# Documentation



## Templates - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/templates/
**Depth**: 2

# Templates¶

You can use any template engine you want with **FastAPI**.

A common choice is Jinja2, the same one used by Flask and other tools.

There are utilities to configure it easily that you can use directly in your **FastAPI** application (provided by Starlette).

## Install dependencies¶

Make sure you create a [virtual environment](../../virtual-environments/), activate it, and install `jinja2`:

    $ pip install jinja2

    ---> 100%

## Using `Jinja2Templates`¶

  * Import `Jinja2Templates`.
  * Create a `templates` object that you can reuse later.
  * Declare a `Request` parameter in the _path operation_ that will return a template.
  * Use the `templates` you created to render and return a `TemplateResponse`, pass the name of the template, the request object, and a "context" dictionary with key-value pairs to be used inside of the Jinja2 template.

Python 3.8+

    from fastapi import FastAPI, Request
    from fastapi.responses import HTMLResponse
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates

    app = FastAPI()

    app.mount("/static", StaticFiles(directory="static"), name="static")

    templates = Jinja2Templates(directory="templates")

    @app.get("/items/{id}", response_class=HTMLResponse)
    async def read_item(request: Request, id: str):
        return templates.TemplateResponse(
            request=request, name="item.html", context={"id": id}
        )

Note

Before FastAPI 0.108.0, Starlette 0.29.0, the `name` was the first parameter.

Also, before that, in previous versions, the `request` object was passed as part of the key-value pairs in the context for Jinja2.

Tip

By declaring `response_class=HTMLResponse` the docs UI will be able to know that the response will be HTML.

Technical Details

You could also use `from starlette.templating import Jinja2Templates`.

**FastAPI** provides the same `starlette.templating` as `fastapi.templating` just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with `Request` and `StaticFiles`.

## Writing templates¶

Then you can write a template at `templates/item.html` with, for example:

        Item Details

        Item ID:

### Template Context Values¶

In the HTML that contains:

    Item ID:

...it will show the `id` taken from the "context" `dict` you passed:

    {"id": id}

For example, with an ID of `42`, this would render:

    Item ID: 42

### Template `url_for` Arguments¶

You can also use `url_for()` inside of the template, it takes as arguments the same arguments that would be used by your _path operation function_.

So, the section with:

...will generate a link to the same URL that would be handled by the _path operation function_ `read_item(id=id)`.

For example, with an ID of `42`, this would render:

## Templates and static files¶

You can also use `url_for()` inside of the template, and use it, for example, with the `StaticFiles` you mounted with the `name="static"`.

        Item Details

        Item ID:

In this example, it would link to a CSS file at `static/styles.css` with:

    h1 {
        color: green;
    }

And because you are using `StaticFiles`, that CSS file would be served automatically by your **FastAPI** application at the URL `/static/styles.css`.

## More details¶

For more details, including how to test templates, check [Starlette's docs on templates](https://www.starlette.io/templates/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Development - Contributing - FastAPI

**URL**: https://fastapi.tiangolo.com/contributing/
**Depth**: 1

# Development - Contributing¶

First, you might want to see the basic ways to [help FastAPI and get help](../help-fastapi/).

## Developing¶

If you already cloned the [fastapi repository](https://github.com/fastapi/fastapi) and you want to deep dive in the code, here are some guidelines to set up your environment.

### Virtual environment¶

Follow the instructions to create and activate a [virtual environment](../virtual-environments/) for the internal code of `fastapi`.

### Install requirements¶

After activating the environment, install the required packages:

`pip``uv`

    $ pip install -r requirements.txt

    ---> 100%

If you have [`uv`](https://github.com/astral-sh/uv):

    $ uv pip install -r requirements.txt

    ---> 100%

It will install all the dependencies and your local FastAPI in your local environment.

### Using your local FastAPI¶

If you create a Python file that imports and uses FastAPI, and run it with the Python from your local environment, it will use your cloned local FastAPI source code.

And if you update that local FastAPI source code when you run that Python file again, it will use the fresh version of FastAPI you just edited.

That way, you don't have to "install" your local version to be able to test every change.

Technical Details

This only happens when you install using this included `requirements.txt` instead of running `pip install fastapi` directly.

That is because inside the `requirements.txt` file, the local version of FastAPI is marked to be installed in "editable" mode, with the `-e` option.

### Format the code¶

There is a script that you can run that will format and clean all your code:

    $ bash scripts/format.sh

It will also auto-sort all your imports.

## Tests¶

There is a script that you can run locally to test all the code and generate coverage reports in HTML:

    $ bash scripts/test-cov-html.sh

This command generates a directory `./htmlcov/`, if you open the file `./htmlcov/index.html` in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.

## Docs¶

First, make sure you set up your environment as described above, that will install all the requirements.

### Docs live¶

During local development, there is a script that builds the site and checks for any changes, live-reloading:

    $ python ./scripts/docs.py live

    [INFO] Serving on http://127.0.0.1:8008
    [INFO] Start watching changes
    [INFO] Start detecting changes

It will serve the documentation on `http://127.0.0.1:8008`.

That way, you can edit the documentation/source files and see the changes live.

Tip

Alternatively, you can perform the same steps that scripts does manually.

Go into the language directory, for the main docs in English it's at `docs/en/`:

    $ cd docs/en/

Then run `mkdocs` in that directory:

    $ mkdocs serve --dev-addr 127.0.0.1:8008

#### Typer CLI (optional)¶

The instructions here show you how to use the script at `./scripts/docs.py` with the `python` program directly.

But you can also use [Typer CLI](https://typer.tiangolo.com/typer-cli/), and you will get autocompletion in your terminal for the commands after installing completion.

If you install Typer CLI, you can install completion with:

    $ typer --install-completion

    zsh completion installed in /home/user/.bashrc.
    Completion will take effect once you restart the terminal.

### Docs Structure¶

The documentation uses [MkDocs](https://www.mkdocs.org/).

And there are extra tools/scripts in place to handle translations in `./scripts/docs.py`.

Tip

You don't need to see the code in `./scripts/docs.py`, you just use it in the command line.

All the documentation is in Markdown format in the directory `./docs/en/`.

Many of the tutorials have blocks of code.

In most of the cases, these blocks of code are actual complete applications that can be run as is.

In fact, those blocks of code are not written inside the Markdown, they are Python files in the `./docs_src/` directory.

And those Python files are included/injected in the documentation when generating the site.

### Docs for tests¶

Most of the tests actually run against the example source files in the documentation.

This helps to make sure that:

  * The documentation is up-to-date.
  * The documentation examples can be run as is.
  * Most of the features are covered by the documentation, ensured by test coverage.

#### Apps and docs at the same time¶

If you run the examples with, e.g.:

    $ fastapi dev tutorial001.py

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

as Uvicorn by default will use the port `8000`, the documentation on port `8008` won't clash.

### Translations¶

Attention

**Update on Translations**

We're updating the way we handle documentation translations.

Until now, we invited community members to translate pages via pull requests, which were then reviewed by at least two native speakers. While this has helped bring FastAPI to many more users, we’ve also run into several challenges - some languages have only a few translated pages, others are outdated and hard to maintain over time. To improve this, we’re working on automation tools 🤖 to manage translations more efficiently. Once ready, documentation will be machine-translated and still reviewed by at least two native speakers ✅ before publishing. This will allow us to keep translations up-to-date while reducing the review burden on maintainers.

What’s changing now:

  * 🚫 We’re no longer accepting new community-submitted translation PRs.

  * ⏳ Existing open PRs will be reviewed and can still be merged if completed within the next 3 weeks (since July 11 2025).

  * 🌐 In the future, we will only support languages where at least three active native speakers are available to review and maintain translations.

This transition will help us keep translations more consistent and timely while better supporting our contributors 🙌. Thank you to everyone who has contributed so far — your help has been invaluable! 💖

Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. 🌎 🚀

Here are the steps to help with translations.

#### Tips and guidelines¶

  * Check the currently [existing pull requests](https://github.com/fastapi/fastapi/pulls) for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is [`lang-es`](https://github.com/fastapi/fastapi/pulls?q=is%3Aopen+sort%3Aupdated-desc+label%3Alang-es+label%3Aawaiting-review).

  * Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.

Tip

You can [add comments with change suggestions](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/commenting-on-a-pull-request) to existing pull requests.

Check the docs about [adding a pull request review](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-reviews) to approve it or request changes.

  * Check if there's a [GitHub Discussion](https://github.com/fastapi/fastapi/discussions/categories/translations) to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.

  * If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.

  * To check the 2-letter code for the language you want to translate, you can use the table [List of ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).

#### Existing language¶

Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.

In the case of Spanish, the 2-letter code is `es`. So, the directory for Spanish translations is located at `docs/es/`.

Tip

The main ("official") language is English, located at `docs/en/`.

Now run the live server for the docs in Spanish:

    // Use the command "live" and pass the language code as a CLI argument
    $ python ./scripts/docs.py live es

    [INFO] Serving on http://127.0.0.1:8008
    [INFO] Start watching changes
    [INFO] Start detecting changes

Tip

Alternatively, you can perform the same steps that scripts does manually.

Go into the language directory, for the Spanish translations it's at `docs/es/`:

    $ cd docs/es/

Then run `mkdocs` in that directory:

    $ mkdocs serve --dev-addr 127.0.0.1:8008

Now you can go to  and see your changes live.

You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.

Now let's say that you want to add a translation for the section [Features](../features/).

  * Copy the file at:

    docs/en/docs/features.md

  * Paste it in exactly the same location but for the language you want to translate, e.g.:

    docs/es/docs/features.md

Tip

Notice that the only change in the path and file name is the language code, from `en` to `es`.

If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). 🎉

Now you can translate it all and see how it looks as you save the file.

#### Don't Translate these Pages¶

🚨 Don't translate:

  * Files under `reference/`
  * `release-notes.md`
  * `fastapi-people.md`
  * `external-links.md`
  * `newsletter.md`
  * `management-tasks.md`
  * `management.md`
  * `contributing.md`

Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.

#### Request a New Language¶

Let's say that you want to request translations for a language that is not yet translated, not even some pages. For example, Latin.

If there is no discussion for that language, you can start by requesting the new language. For that, you can follow these steps:

  * Create a new discussion following the template.
  * Get a few native speakers to comment on the discussion and commit to help review translations for that language.

Once there are several people in the discussion, the FastAPI team can evaluate it and can make it an official translation.

Then the docs will be automatically translated using AI, and the team of native speakers can review the translation, and help tweak the AI prompts.

Once there's a new translation, for example if docs are updated or there's a new section, there will be a comment in the same discussion with the link to the new translation to review.

#### New Language¶

Note

These steps will be performed by the FastAPI team.

Checking the link from above (List of ISO 639-1 codes), you can see that the 2-letter code for Latin is `la`.

Now you can create a new directory for the new language, running the following script:

    // Use the command new-lang, pass the language code as a CLI argument
    $ python ./scripts/docs.py new-lang la

    Successfully initialized: docs/la

Now you can check in your code editor the newly created directory `docs/la/`.

That command created a file `docs/la/mkdocs.yml` with a simple config that inherits everything from the `en` version:

    INHERIT: ../en/mkdocs.yml

Tip

You could also simply create that file with those contents manually.

That command also created a dummy file `docs/la/index.md` for the main page, you can start by translating that one.

You can continue with the previous instructions for an "Existing Language" for that process.

You can make the first pull request with those two files, `docs/la/mkdocs.yml` and `docs/la/index.md`. 🎉

#### Preview the result¶

As already mentioned above, you can use the `./scripts/docs.py` with the `live` command to preview the results (or `mkdocs serve`).

Once you are done, you can also test it all as it would look online, including all the other languages.

To do that, first build all the docs:

    // Use the command "build-all", this will take a bit
    $ python ./scripts/docs.py build-all

    Building docs for: en
    Building docs for: es
    Successfully built docs for: es

This builds all those independent MkDocs sites for each language, combines them, and generates the final output at `./site/`.

Then you can serve that with the command `serve`:

    // Use the command "serve" after running "build-all"
    $ python ./scripts/docs.py serve

    Warning: this is a very simple server. For development, use mkdocs serve instead.
    This is here only to preview a site with translations already built.
    Make sure you run the build-all command first.
    Serving at: http://127.0.0.1:8008

#### Translation specific tips and guidelines¶

  * Translate only the Markdown documents (`.md`). Do not translate the code examples at `./docs_src`.

  * In code blocks within the Markdown document, translate comments (`# a comment`), but leave the rest unchanged.

  * Do not change anything enclosed in "``" (inline code).

  * In lines starting with `///` translate only the text part after `|`. Leave the rest unchanged.

  * You can translate info boxes like `/// warning` with for example `/// warning | Achtung`. But do not change the word immediately after the `///`, it determines the color of the info box.

  * Do not change the paths in links to images, code files, Markdown documents.

  * However, when a Markdown document is translated, the `#hash-parts` in links to its headings may change. Update these links if possible.

    * Search for such links in the translated document using the regex `#[^# ]`.
    * Search in all documents already translated into your language for `your-translated-document.md`. For example VS Code has an option "Edit" -> "Find in Files".
    * When translating a document, do not "pre-translate" `#hash-parts` that link to headings in untranslated documents.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## Advanced Dependencies - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/advanced-dependencies/
**Depth**: 2

# Advanced Dependencies¶

## Parameterized dependencies¶

All the dependencies we have seen are a fixed function or class.

But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes.

Let's imagine that we want to have a dependency that checks if the query parameter `q` contains some fixed content.

But we want to be able to parameterize that fixed content.

## A "callable" instance¶

In Python there's a way to make an instance of a class a "callable".

Not the class itself (which is already a callable), but an instance of that class.

To do that, we declare a method `__call__`:

Python 3.9+

    from typing import Annotated

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

🤓 Other versions and variants

Python 3.8+Python 3.8+ - non-Annotated

    from fastapi import Depends, FastAPI
    from typing_extensions import Annotated

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

Tip

Prefer to use the `Annotated` version if possible.

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: bool = Depends(checker)):
        return {"fixed_content_in_query": fixed_content_included}

In this case, this `__call__` is what **FastAPI** will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your _path operation function_ later.

## Parameterize the instance¶

And now, we can use `__init__` to declare the parameters of the instance that we can use to "parameterize" the dependency:

Python 3.9+

    from typing import Annotated

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

🤓 Other versions and variants

Python 3.8+Python 3.8+ - non-Annotated

    from fastapi import Depends, FastAPI
    from typing_extensions import Annotated

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

Tip

Prefer to use the `Annotated` version if possible.

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: bool = Depends(checker)):
        return {"fixed_content_in_query": fixed_content_included}

In this case, **FastAPI** won't ever touch or care about `__init__`, we will use it directly in our code.

## Create an instance¶

We could create an instance of this class with:

Python 3.9+

    from typing import Annotated

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

🤓 Other versions and variants

Python 3.8+Python 3.8+ - non-Annotated

    from fastapi import Depends, FastAPI
    from typing_extensions import Annotated

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

Tip

Prefer to use the `Annotated` version if possible.

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: bool = Depends(checker)):
        return {"fixed_content_in_query": fixed_content_included}

And that way we are able to "parameterize" our dependency, that now has `"bar"` inside of it, as the attribute `checker.fixed_content`.

## Use the instance as a dependency¶

Then, we could use this `checker` in a `Depends(checker)`, instead of `Depends(FixedContentQueryChecker)`, because the dependency is the instance, `checker`, not the class itself.

And when solving the dependency, **FastAPI** will call this `checker` like:

    checker(q="somequery")

...and pass whatever that returns as the value of the dependency in our _path operation function_ as the parameter `fixed_content_included`:

Python 3.9+

    from typing import Annotated

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

🤓 Other versions and variants

Python 3.8+Python 3.8+ - non-Annotated

    from fastapi import Depends, FastAPI
    from typing_extensions import Annotated

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
        return {"fixed_content_in_query": fixed_content_included}

Tip

Prefer to use the `Annotated` version if possible.

    from fastapi import Depends, FastAPI

    app = FastAPI()

    class FixedContentQueryChecker:
        def __init__(self, fixed_content: str):
            self.fixed_content = fixed_content

        def __call__(self, q: str = ""):
            if q:
                return self.fixed_content in q
            return False

    checker = FixedContentQueryChecker("bar")

    @app.get("/query-checker/")
    async def read_query_check(fixed_content_included: bool = Depends(checker)):
        return {"fixed_content_in_query": fixed_content_included}

Tip

All this might seem contrived. And it might not be very clear how is it useful yet.

These examples are intentionally simple, but show how it all works.

In the chapters about security, there are utility functions that are implemented in this same way.

If you understood all this, you already know how those utility tools for security work underneath.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Tutorial - User Guide - FastAPI

**URL**: https://fastapi.tiangolo.com/tutorial/
**Depth**: 1

# Tutorial - User Guide¶

This tutorial shows you how to use **FastAPI** with most of its features, step by step.

Each section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific API needs.

It is also built to work as a future reference so you can come back and see exactly what you need.

## Run the code¶

All the code blocks can be copied and used directly (they are actually tested Python files).

To run any of the examples, copy the code to a file `main.py`, and start `fastapi dev` with:

    $ fastapi dev main.py

       FastAPI   Starting development server 🚀

                 Searching for package file structure from directories
                 with __init__.py files
                 Importing from /home/user/code/awesomeapp

        module   🐍 main.py

          code   Importing the FastAPI app object from the module with
                 the following code:

                 from main import app

           app   Using import string: main:app

        server   Server started at http://127.0.0.1:8000
        server   Documentation at http://127.0.0.1:8000/docs

           tip   Running in development mode, for production use:
                 fastapi run

                 Logs:

          INFO   Will watch for changes in these directories:
                 [&apos;/home/user/code/awesomeapp&apos;]
          INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C
                 to quit)
          INFO   Started reloader process [383138] using WatchFiles
          INFO   Started server process [383153]
          INFO   Waiting for application startup.
          INFO   Application startup complete.

It is **HIGHLY encouraged** that you write or copy the code, edit it and run it locally.

Using it in your editor is what really shows you the benefits of FastAPI, seeing how little code you have to write, all the type checks, autocompletion, etc.

* * *

## Install FastAPI¶

The first step is to install FastAPI.

Make sure you create a [virtual environment](../virtual-environments/), activate it, and then **install FastAPI** :

    $ pip install "fastapi[standard]"

    ---> 100%

Note

When you install with `pip install "fastapi[standard]"` it comes with some default optional standard dependencies, including `fastapi-cloud-cli`, which allows you to deploy to [FastAPI Cloud](https://fastapicloud.com).

If you don't want to have those optional dependencies, you can instead install `pip install fastapi`.

If you want to install the standard dependencies but without the `fastapi-cloud-cli`, you can install with `pip install "fastapi[standard-no-fastapi-cloud-cli]"`.

## Advanced User Guide¶

There is also an **Advanced User Guide** that you can read later after this **Tutorial - User guide**.

The **Advanced User Guide** builds on this one, uses the same concepts, and teaches you some extra features.

But you should first read the **Tutorial - User Guide** (what you are reading right now).

It's designed so that you can build a complete application with just the **Tutorial - User Guide** , and then extend it in different ways, depending on your needs, using some of the additional ideas from the **Advanced User Guide**.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.

## Using Dataclasses - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/dataclasses/
**Depth**: 2

# Using Dataclasses¶

FastAPI is built on top of **Pydantic** , and I have been showing you how to use Pydantic models to declare requests and responses.

But FastAPI also supports using [`dataclasses`](https://docs.python.org/3/library/dataclasses.html) the same way:

Python 3.8+

    from dataclasses import dataclass
    from typing import Union

    from fastapi import FastAPI

    @dataclass
    class Item:
        name: str
        price: float
        description: Union[str, None] = None
        tax: Union[float, None] = None

    app = FastAPI()

    @app.post("/items/")
    async def create_item(item: Item):
        return item

This is still supported thanks to **Pydantic** , as it has [internal support for `dataclasses`](https://docs.pydantic.dev/latest/concepts/dataclasses/#use-of-stdlib-dataclasses-with-basemodel).

So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses.

And of course, it supports the same:

  * data validation
  * data serialization
  * data documentation, etc.

This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic.

Info

Keep in mind that dataclasses can't do everything Pydantic models can do.

So, you might still need to use Pydantic models.

But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. 🤓

## Dataclasses in `response_model`¶

You can also use `dataclasses` in the `response_model` parameter:

Python 3.8+

    from dataclasses import dataclass, field
    from typing import List, Union

    from fastapi import FastAPI

    @dataclass
    class Item:
        name: str
        price: float
        tags: List[str] = field(default_factory=list)
        description: Union[str, None] = None
        tax: Union[float, None] = None

    app = FastAPI()

    @app.get("/items/next", response_model=Item)
    async def read_next_item():
        return {
            "name": "Island In The Moon",
            "price": 12.99,
            "description": "A place to be playin' and havin' fun",
            "tags": ["breater"],
        }

The dataclass will be automatically converted to a Pydantic dataclass.

This way, its schema will show up in the API docs user interface:

## Dataclasses in Nested Data Structures¶

You can also combine `dataclasses` with other type annotations to make nested data structures.

In some cases, you might still have to use Pydantic's version of `dataclasses`. For example, if you have errors with the automatically generated API documentation.

In that case, you can simply swap the standard `dataclasses` with `pydantic.dataclasses`, which is a drop-in replacement:

Python 3.8+

    from dataclasses import field  # (1)
    from typing import List, Union

    from fastapi import FastAPI
    from pydantic.dataclasses import dataclass  # (2)

    @dataclass
    class Item:
        name: str
        description: Union[str, None] = None

    @dataclass
    class Author:
        name: str
        items: List[Item] = field(default_factory=list)  # (3)

    app = FastAPI()

    @app.post("/authors/{author_id}/items/", response_model=Author)  # (4)
    async def create_author_items(author_id: str, items: List[Item]):  # (5)
        return {"name": author_id, "items": items}  # (6)

    @app.get("/authors/", response_model=List[Author])  # (7)
    def get_authors():  # (8)
        return [  # (9)
            {
                "name": "Breaters",
                "items": [
                    {
                        "name": "Island In The Moon",
                        "description": "A place to be playin' and havin' fun",
                    },
                    {"name": "Holy Buddies"},
                ],
            },
            {
                "name": "System of an Up",
                "items": [
                    {
                        "name": "Salt",
                        "description": "The kombucha mushroom people's favorite",
                    },
                    {"name": "Pad Thai"},
                    {
                        "name": "Lonely Night",
                        "description": "The mostests lonliest nightiest of allest",
                    },
                ],
            },
        ]

  1. We still import `field` from standard `dataclasses`.

  2. `pydantic.dataclasses` is a drop-in replacement for `dataclasses`.

  3. The `Author` dataclass includes a list of `Item` dataclasses.

  4. The `Author` dataclass is used as the `response_model` parameter.

  5. You can use other standard type annotations with dataclasses as the request body.

In this case, it's a list of `Item` dataclasses.

  6. Here we are returning a dictionary that contains `items` which is a list of dataclasses.

FastAPI is still capable of serializing the data to JSON.

  7. Here the `response_model` is using a type annotation of a list of `Author` dataclasses.

Again, you can combine `dataclasses` with standard type annotations.

  8. Notice that this _path operation function_ uses regular `def` instead of `async def`.

As always, in FastAPI you can combine `def` and `async def` as needed.

If you need a refresher about when to use which, check out the section _"In a hurry?"_ in the docs about [`async` and `await`](../../async/#in-a-hurry).

  9. This _path operation function_ is not returning dataclasses (although it could), but a list of dictionaries with internal data.

FastAPI will use the `response_model` parameter (that includes dataclasses) to convert the response.

You can combine `dataclasses` with other type annotations in many different combinations to form complex data structures.

Check the in-code annotation tips above to see more specific details.

##

You can also combine `dataclasses` with other Pydantic models, inherit from them, include them in your own models, etc.

To

## Version¶

This is available since FastAPI version `0.67.0`. 🔖

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted

## Path Operation Advanced Configuration - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/
**Depth**: 2

# Path Operation Advanced Configuration¶

## OpenAPI operationId¶

Warning

If you are not an "expert" in OpenAPI, you probably don't need this.

You can set the OpenAPI `operationId` to be used in your _path operation_ with the parameter `operation_id`.

You would have to make sure that it is unique for each operation.

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/items/", operation_id="some_specific_id_you_define")
    async def read_items():
        return [{"item_id": "Foo"}]

### Using the _path operation function_ name as the operationId¶

If you want to use your APIs' function names as `operationId`s, you can iterate over all of them and override each _path operation's_ `operation_id` using their `APIRoute.name`.

You should do it after adding all your _path operations_.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.routing import APIRoute

    app = FastAPI()

    @app.get("/items/")
    async def read_items():
        return [{"item_id": "Foo"}]

    def use_route_names_as_operation_ids(app: FastAPI) -> None:
        """
        Simplify operation IDs so that generated API clients have simpler function
        names.

        Should be called only after all routes have been added.
        """
        for route in app.routes:
            if isinstance(route, APIRoute):
                route.operation_id = route.name  # in this case, 'read_items'

    use_route_names_as_operation_ids(app)

Tip

If you manually call `app.openapi()`, you should update the `operationId`s before that.

Warning

If you do this, you have to make sure each one of your _path operation functions_ has a unique name.

Even if they are in different modules (Python files).

## Exclude from OpenAPI¶

To exclude a _path operation_ from the generated OpenAPI schema (and thus, from the automatic documentation systems), use the parameter `include_in_schema` and set it to `False`:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/items/", include_in_schema=False)
    async def read_items():
        return [{"item_id": "Foo"}]

## Advanced description from docstring¶

You can limit the lines used from the docstring of a _path operation function_ for OpenAPI.

Adding an `\f` (an escaped "form feed" character) causes **FastAPI** to truncate the output used for OpenAPI at this point.

It won't show up in the documentation, but other tools (such as Sphinx) will be able to use the rest.

Python 3.8+

    from typing import Set, Union

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        description: Union[str, None] = None
        price: float
        tax: Union[float, None] = None
        tags: Set[str] = set()

    @app.post("/items/", response_model=Item, summary="Create an item")
    async def create_item(item: Item):
        """
        Create an item with all the information:

        - **name**: each item must have a name
        - **description**: a long description
        - **price**: required
        - **tax**: if the item doesn't have tax, you can omit this
        - **tags**: a set of unique tag strings for this item
        \f
        :param item: User input.
        """
        return item

## Additional Responses¶

You probably have seen how to declare the `response_model` and `status_code` for a _path operation_.

That defines the metadata about the main response of a _path operation_.

You can also declare additional responses with their models, status codes, etc.

There's a whole chapter here in the documentation about it, you can read it at [Additional Responses in OpenAPI](../additional-responses/).

## OpenAPI Extra¶

When you declare a _path operation_ in your application, **FastAPI** automatically generates the relevant metadata about that _path operation_ to be included in the OpenAPI schema.

Technical details

In the OpenAPI specification it is called the [Operation Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operation-object).

It has all the information about the _path operation_ and is used to generate the automatic documentation.

It includes the `tags`, `parameters`, `requestBody`, `responses`, etc.

This _path operation_ -specific OpenAPI schema is normally generated automatically by **FastAPI** , but you can also extend it.

Tip

This is a low level extension point.

If you only need to declare additional responses, a more convenient way to do it is with [Additional Responses in OpenAPI](../additional-responses/).

You can extend the OpenAPI schema for a _path operation_ using the parameter `openapi_extra`.

### OpenAPI Extensions¶

This `openapi_extra` can be helpful, for example, to declare [OpenAPI Extensions](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions):

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/items/", openapi_extra={"x-aperture-labs-portal": "blue"})
    async def read_items():
        return [{"item_id": "portal-gun"}]

If you open the automatic API docs, your extension will show up at the bottom of the specific _path operation_.

And if you see the resulting OpenAPI (at `/openapi.json` in your API), you will see your extension as part of the specific _path operation_ too:

    {
        "openapi": "3.1.0",
        "info": {
            "title": "FastAPI",
            "version": "0.1.0"
        },
        "paths": {
            "/items/": {
                "get": {
                    "summary": "Read Items",
                    "operationId": "read_items_items__get",
                    "responses": {
                        "200": {
                            "description": "Successful Response",
                            "content": {
                                "application/json": {
                                    "schema": {}
                                }
                            }
                        }
                    },
                    "x-aperture-labs-portal": "blue"
                }
            }
        }
    }

### Custom OpenAPI _path operation_ schema¶

The dictionary in `openapi_extra` will be deeply merged with the automatically generated OpenAPI schema for the _path operation_.

So, you could add additional data to the automatically generated schema.

For example, you could decide to read and validate the request with your own code, without using the automatic features of FastAPI with Pydantic, but you could still want to define the request in the OpenAPI schema.

You could do that with `openapi_extra`:

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI()

    def magic_data_reader(raw_body: bytes):
        return {
            "size": len(raw_body),
            "content": {
                "name": "Maaaagic",
                "price": 42,
                "description": "Just kiddin', no magic here. ✨",
            },
        }

    @app.post(
        "/items/",
        openapi_extra={
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "required": ["name", "price"],
                            "type": "object",
                            "properties": {
                                "name": {"type": "string"},
                                "price": {"type": "number"},
                                "description": {"type": "string"},
                            },
                        }
                    }
                },
                "required": True,
            },
        },
    )
    async def create_item(request: Request):
        raw_body = await request.body()
        data = magic_data_reader(raw_body)
        return data

In this example, we didn't declare any Pydantic model. In fact, the request body is not even parsed as JSON, it is read directly as `bytes`, and the function `magic_data_reader()` would be in charge of parsing it in some way.

Nevertheless, we can declare the expected schema for the request body.

### Custom OpenAPI content type¶

Using this same trick, you could use a Pydantic model to define the JSON Schema that is then included in the custom OpenAPI schema section for the _path operation_.

And you could do this even if the data type in the request is not JSON.

For example, in this application we don't use FastAPI's integrated functionality to extract the JSON Schema from Pydantic models nor the automatic validation for JSON. In fact, we are declaring the request content type as YAML, not JSON:

Pydantic v2Pydantic v1

Python 3.8+

    from typing import List

    import yaml
    from fastapi import FastAPI, HTTPException, Request
    from pydantic import BaseModel, ValidationError

    app = FastAPI()

    class Item(BaseModel):
        name: str
        tags: List[str]

    @app.post(
        "/items/",
        openapi_extra={
            "requestBody": {
                "content": {"application/x-yaml": {"schema": Item.model_json_schema()}},
                "required": True,
            },
        },
    )
    async def create_item(request: Request):
        raw_body = await request.body()
        try:
            data = yaml.safe_load(raw_body)
        except yaml.YAMLError:
            raise HTTPException(status_code=422, detail="Invalid YAML")
        try:
            item = Item.model_validate(data)
        except ValidationError as e:
            raise HTTPException(status_code=422, detail=e.errors(include_url=False))
        return item

Python 3.8+

    from typing import List

    import yaml
    from fastapi import FastAPI, HTTPException, Request
    from pydantic import BaseModel, ValidationError

    app = FastAPI()

    class Item(BaseModel):
        name: str
        tags: List[str]

    @app.post(
        "/items/",
        openapi_extra={
            "requestBody": {
                "content": {"application/x-yaml": {"schema": Item.schema()}},
                "required": True,
            },
        },
    )
    async def create_item(request: Request):
        raw_body = await request.body()
        try:
            data = yaml.safe_load(raw_body)
        except yaml.YAMLError:
            raise HTTPException(status_code=422, detail="Invalid YAML")
        try:
            item = Item.parse_obj(data)
        except ValidationError as e:
            raise HTTPException(status_code=422, detail=e.errors())
        return item

Info

In Pydantic version 1 the method to get the JSON Schema for a model was called `Item.schema()`, in Pydantic version 2, the method is called `Item.model_json_schema()`.

Nevertheless, although we are not using the default integrated functionality, we are still using a Pydantic model to manually generate the JSON Schema for the data that we want to receive in YAML.

Then we use the request directly, and extract the body as `bytes`. This means that FastAPI won't even try to parse the request payload as JSON.

And then in our code, we parse that YAML content directly, and then we are again using the same Pydantic model to validate the YAML content:

Pydantic v2Pydantic v1

Python 3.8+

    from typing import List

    import yaml
    from fastapi import FastAPI, HTTPException, Request
    from pydantic import BaseModel, ValidationError

    app = FastAPI()

    class Item(BaseModel):
        name: str
        tags: List[str]

    @app.post(
        "/items/",
        openapi_extra={
            "requestBody": {
                "content": {"application/x-yaml": {"schema": Item.model_json_schema()}},
                "required": True,
            },
        },
    )
    async def create_item(request: Request):
        raw_body = await request.body()
        try:
            data = yaml.safe_load(raw_body)
        except yaml.YAMLError:
            raise HTTPException(status_code=422, detail="Invalid YAML")
        try:
            item = Item.model_validate(data)
        except ValidationError as e:
            raise HTTPException(status_code=422, detail=e.errors(include_url=False))
        return item

Python 3.8+

    from typing import List

    import yaml
    from fastapi import FastAPI, HTTPException, Request
    from pydantic import BaseModel, ValidationError

    app = FastAPI()

    class Item(BaseModel):
        name: str
        tags: List[str]

    @app.post(
        "/items/",
        openapi_extra={
            "requestBody": {
                "content": {"application/x-yaml": {"schema": Item.schema()}},
                "required": True,
            },
        },
    )
    async def create_item(request: Request):
        raw_body = await request.body()
        try:
            data = yaml.safe_load(raw_body)
        except yaml.YAMLError:
            raise HTTPException(status_code=422, detail="Invalid YAML")
        try:
            item = Item.parse_obj(data)
        except ValidationError as e:
            raise HTTPException(status_code=422, detail=e.errors())
        return item

Info

In Pydantic version 1 the method to parse and validate an object was `Item.parse_obj()`, in Pydantic version 2, the method is called `Item.model_validate()`.

Tip

Here we reuse the same Pydantic model.

But the same way, we could have validated it in some other way.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Environment Variables - FastAPI

**URL**: https://fastapi.tiangolo.com/environment-variables/
**Depth**: 1

# Environment Variables¶

Tip

If you already know what "environment variables" are and how to use them, feel free to skip this.

An environment variable (also known as "**env var** ") is a variable that lives **outside** of the Python code, in the **operating system** , and could be read by your Python code (or by other programs as well).

Environment variables could be useful for handling application **settings** , as part of the **installation** of Python, etc.

## Create and Use Env Vars¶

You can **create** and use environment variables in the **shell (terminal)** , without needing Python:

Linux, macOS, Windows BashWindows PowerShell

    // You could create an env var MY_NAME with
    $ export MY_NAME="Wade Wilson"

    // Then you could use it with other programs, like
    $ echo "Hello $MY_NAME"

    Hello Wade Wilson

    // Create an env var MY_NAME
    $ $Env:MY_NAME = "Wade Wilson"

    // Use it with other programs, like
    $ echo "Hello $Env:MY_NAME"

    Hello Wade Wilson

## Read env vars in Python¶

You could also create environment variables **outside** of Python, in the terminal (or with any other method), and then **read them in Python**.

For example you could have a file `main.py` with:

    import os

    name = os.getenv("MY_NAME", "World")
    print(f"Hello {name} from Python")

Tip

The second argument to [`os.getenv()`](https://docs.python.org/3.8/library/os.html#os.getenv) is the default value to return.

If not provided, it's `None` by default, here we provide `"World"` as the default value to use.

Then you could call that Python program:

Linux, macOS, Windows BashWindows PowerShell

    // Here we don't set the env var yet
    $ python main.py

    // As we didn't set the env var, we get the default value

    Hello World from Python

    // But if we create an environment variable first
    $ export MY_NAME="Wade Wilson"

    // And then call the program again
    $ python main.py

    // Now it can read the environment variable

    Hello Wade Wilson from Python

    // Here we don't set the env var yet
    $ python main.py

    // As we didn't set the env var, we get the default value

    Hello World from Python

    // But if we create an environment variable first
    $ $Env:MY_NAME = "Wade Wilson"

    // And then call the program again
    $ python main.py

    // Now it can read the environment variable

    Hello Wade Wilson from Python

As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to `git`) with the rest of the files, it's common to use them for configurations or **settings**.

You can also create an environment variable only for a **specific program invocation** , that is only available to that program, and only for its duration.

To do that, create it right before the program itself, on the same line:

    // Create an env var MY_NAME in line for this program call
    $ MY_NAME="Wade Wilson" python main.py

    // Now it can read the environment variable

    Hello Wade Wilson from Python

    // The env var no longer exists afterwards
    $ python main.py

    Hello World from Python

Tip

You can

## Types and Validation¶

These environment variables can only handle **text strings** , as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).

That means that **any value** read in Python from an environment variable **will be a`str`**, and any conversion to a different type or any validation has to be done in code.

You will

## `PATH` Environment Variable¶

There is a **special** environment variable called **`PATH`** that is used by the operating systems (Linux, macOS, Windows) to find programs to run.

The value of the variable `PATH` is a long string that is made of directories separated by a colon `:` on Linux and macOS, and by a semicolon `;` on Windows.

For example, the `PATH` environment variable could look like this:

Linux, macOSWindows

    /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

This means that the system should look for programs in the directories:

  * `/usr/local/bin`
  * `/usr/bin`
  * `/bin`
  * `/usr/sbin`
  * `/sbin`

    C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32

This means that the system should look for programs in the directories:

  * `C:\Program Files\Python312\Scripts`
  * `C:\Program Files\Python312`
  * `C:\Windows\System32`

When you type a **command** in the terminal, the operating system **looks for** the program in **each of those directories** listed in the `PATH` environment variable.

For example, when you type `python` in the terminal, the operating system looks for a program called `python` in the **first directory** in that list.

If it finds it, then it will **use it**. Otherwise it keeps looking in the **other directories**.

### Installing Python and Updating the `PATH`¶

When you install Python, you might be asked if you want to update the `PATH` environment variable.

Linux, macOSWindows

Let's say you install Python and it ends up in a directory `/opt/custompython/bin`.

If you say yes to update the `PATH` environment variable, then the installer will add `/opt/custompython/bin` to the `PATH` environment variable.

It could look like this:

    /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin

This way, when you type `python` in the terminal, the system will find the Python program in `/opt/custompython/bin` (the last directory) and use that one.

Let's say you install Python and it ends up in a directory `C:\opt\custompython\bin`.

If you say yes to update the `PATH` environment variable, then the installer will add `C:\opt\custompython\bin` to the `PATH` environment variable.

    C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin

This way, when you type `python` in the terminal, the system will find the Python program in `C:\opt\custompython\bin` (the last directory) and use that one.

So, if you type:

    $ python

Linux, macOSWindows

The system will **find** the `python` program in `/opt/custompython/bin` and run it.

It would be roughly equivalent to typing:

    $ /opt/custompython/bin/python

The system will **find** the `python` program in `C:\opt\custompython\bin\python` and run it.

It would be roughly equivalent to typing:

    $ C:\opt\custompython\bin\python

This information will be useful when learning about [Virtual Environments](../virtual-environments/).

## Conclusion¶

With this you should have a basic understanding of what **environment variables** are and how to use them in Python.

You can also

In many cases it's not very obvious how environment variables would be useful and applicable right away. But they keep showing up in many different scenarios when you are developing, so it's good to know about them.

For example, you will need this information in the next section, about [Virtual Environments](../virtual-environments/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## How To - Recipes - FastAPI

**URL**: https://fastapi.tiangolo.com/how-to/
**Depth**: 1

# How To - Recipes¶

Here you will see different recipes or "how to" guides for **several topics**.

Most of these ideas would be more or less **independent** , and in most cases you should only need to study them if they apply directly to **your project**.

If something seems interesting and useful to your project, go ahead and check it, but otherwise, you might probably just skip them.

Tip

If you want to **learn FastAPI** in a structured way (recommended), go and read the [Tutorial - User Guide](../tutorial/) chapter by chapter instead.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## Response Headers - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/response-headers/
**Depth**: 2

## Use a `Response` parameter¶

You can declare a parameter of type `Response` in your _path operation function_ (as you can do for cookies).

And then you can set headers in that _temporal_ response object.

Python 3.8+

    from fastapi import FastAPI, Response

    app = FastAPI()

    @app.get("/headers-and-object/")
    def get_headers(response: Response):
        response.headers["X-Cat-Dog"] = "alone in the world"
        return {"message": "Hello World"}

And then you can return any object you need, as you normally would (a `dict`, a database model, etc).

And if you declared a `response_model`, it will still be used to filter and convert the object you returned.

**FastAPI** will use that _temporal_ response to extract the headers (also cookies and status code), and will put them in the final response that contains the value you returned, filtered by any `response_model`.

You can also declare the `Response` parameter in dependencies, and set headers (and cookies) in them.

## Return a `Response` directly¶

You can also add headers when you return a `Response` directly.

Create a response as described in [Return a Response Directly](../response-directly/) and pass the headers as an additional parameter:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import JSONResponse

    app = FastAPI()

    @app.get("/headers/")
    def get_headers():
        content = {"message": "Hello World"}
        headers = {"X-Cat-Dog": "alone in the world", "Content-Language": "en-US"}
        return JSONResponse(content=content, headers=headers)

Technical Details

You could also use `from starlette.responses import Response` or `from starlette.responses import JSONResponse`.

**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette.

And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.

Keep in mind that custom proprietary headers can be added [using the `X-` prefix](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers).

But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations (

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Full Stack FastAPI Template - FastAPI

**URL**: https://fastapi.tiangolo.com/project-generation/
**Depth**: 1

# Full Stack FastAPI Template¶

Templates, while typically come with a specific setup, are designed to be flexible and customizable. This allows you to modify and adapt them to your project's requirements, making them an excellent starting point. 🏁

You can use this template to

GitHub Repository: [Full Stack FastAPI Template](https://github.com/tiangolo/full-stack-fastapi-template)

## Full Stack FastAPI Template - Technology Stack and Features¶

  * ⚡ [**FastAPI**](https://fastapi.tiangolo.com) for the Python backend API.
    * 🧰 [SQLModel](https://sqlmodel.tiangolo.com) for the Python SQL database interactions (ORM).
    * 🔍 [Pydantic](https://docs.pydantic.dev), used by FastAPI, for the data validation and settings management.
    * 💾 [PostgreSQL](https://www.postgresql.org) as the SQL database.
  * 🚀 [React](https://react.dev) for the frontend.
    * 💃 Using TypeScript, hooks, [Vite](https://vitejs.dev), and other parts of a modern frontend stack.
    * 🎨 [Chakra UI](https://chakra-ui.com) for the frontend components.
    * 🤖 An automatically generated frontend client.
    * 🧪 [Playwright](https://playwright.dev) for End-to-End testing.
    * 🦇 Dark mode support.
  * 🐋 [Docker Compose](https://www.docker.com) for development and production.
  * 🔒 Secure password hashing by default.
  * 🔑 JWT token authentication.
  * 📫 Email based password recovery.
  * ✅ Tests with [Pytest](https://pytest.org).
  * 📞 [Traefik](https://traefik.io) as a reverse proxy / load balancer.
  * 🚢 Deployment instructions using Docker Compose, including how to set up a frontend Traefik proxy to handle automatic HTTPS certificates.
  * 🏭 CI (continuous integration) and CD (continuous deployment) based on GitHub Actions.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life

## Settings and Environment Variables - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/settings/
**Depth**: 2

# Settings and Environment Variables¶

In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc.

Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets.

For this reason it's common to provide them in environment variables that are read by the application.

Tip

To understand environment variables you can read [Environment Variables](../../environment-variables/).

## Types and validation¶

These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).

That means that any value read in Python from an environment variable will be a `str`, and any conversion to a different type or any validation has to be done in code.

## Pydantic `Settings`¶

Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with [Pydantic: Settings management](https://docs.pydantic.dev/latest/concepts/pydantic_settings/).

### Install `pydantic-settings`¶

First, make sure you create your [virtual environment](../../virtual-environments/), activate it, and then install the `pydantic-settings` package:

    $ pip install pydantic-settings
    ---> 100%

It also comes included when you install the `all` extras with:

    $ pip install "fastapi[all]"
    ---> 100%

Info

In Pydantic v1 it came included with the main package. Now it is distributed as this independent package so that you can choose to install it or not if you don't need that functionality.

### Create the `Settings` object¶

Import `BaseSettings` from Pydantic and create a sub-class, very much like with a Pydantic model.

The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values.

You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with `Field()`.

Pydantic v2Pydantic v1

Python 3.8+

    from fastapi import FastAPI
    from pydantic_settings import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

    settings = Settings()
    app = FastAPI()

    @app.get("/info")
    async def info():
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

Info

In Pydantic v1 you would import `BaseSettings` directly from `pydantic` instead of from `pydantic_settings`.

Python 3.8+

    from fastapi import FastAPI
    from pydantic import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

    settings = Settings()
    app = FastAPI()

    @app.get("/info")
    async def info():
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

Tip

If you want something quick to copy and paste, don't use this example, use the last one below.

Then, when you create an instance of that `Settings` class (in this case, in the `settings` object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable `APP_NAME` will still be read for the attribute `app_name`.

Next it will convert and validate the data. So, when you use that `settings` object, you will have data of the types you declared (e.g. `items_per_user` will be an `int`).

### Use the `settings`¶

Then you can use the new `settings` object in your application:

Python 3.8+

    from fastapi import FastAPI
    from pydantic_settings import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

    settings = Settings()
    app = FastAPI()

    @app.get("/info")
    async def info():
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

### Run the server¶

Next, you would run the server passing the configurations as environment variables, for example you could set an `ADMIN_EMAIL` and `APP_NAME` with:

    $ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.py

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

Tip

To set multiple env vars for a single command just separate them with a space, and put them all before the command.

And then the `admin_email` setting would be set to `"deadpool@example.com"`.

The `app_name` would be `"ChimichangApp"`.

And the `items_per_user` would keep its default value of `50`.

## Settings in another module¶

You could put those settings in another module file as you saw in [Bigger Applications - Multiple Files](../../tutorial/bigger-applications/).

For example, you could have a file `config.py` with:

Python 3.8+

    from pydantic_settings import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

    settings = Settings()

And then use it in a file `main.py`:

Python 3.8+

    from fastapi import FastAPI

    from .config import settings

    app = FastAPI()

    @app.get("/info")
    async def info():
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

Tip

You would also need a file `__init__.py` as you saw in [Bigger Applications - Multiple Files](../../tutorial/bigger-applications/).

## Settings in a dependency¶

In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with `settings` that is used everywhere.

This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings.

### The config file¶

Coming from the previous example, your `config.py` file could look like:

Python 3.8+

    from pydantic_settings import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

Notice that now we don't create a default instance `settings = Settings()`.

### The main app file¶

Now we create a dependency that returns a new `config.Settings()`.

Python 3.8+

    from functools import lru_cache
    from typing import Annotated

    from fastapi import Depends, FastAPI

    from .config import Settings

    app = FastAPI()

    @lru_cache
    def get_settings():
        return Settings()

    @app.get("/info")
    async def info(settings: Annotated[Settings, Depends(get_settings)]):
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

Tip

We'll discuss the `@lru_cache` in a bit.

For now you can assume `get_settings()` is a normal function.

And then we can require it from the _path operation function_ as a dependency and use it anywhere we need it.

Python 3.8+

    from functools import lru_cache
    from typing import Annotated

    from fastapi import Depends, FastAPI

    from .config import Settings

    app = FastAPI()

    @lru_cache
    def get_settings():
        return Settings()

    @app.get("/info")
    async def info(settings: Annotated[Settings, Depends(get_settings)]):
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

### Settings and testing¶

Then it would be very easy to provide a different settings object during testing by creating a dependency override for `get_settings`:

Python 3.8+

    from fastapi.testclient import TestClient

    from .config import Settings
    from .main import app, get_settings

    client = TestClient(app)

    def get_settings_override():
        return Settings(admin_email="testing_admin@example.com")

    app.dependency_overrides[get_settings] = get_settings_override

    def test_app():
        response = client.get("/info")
        data = response.json()
        assert data == {
            "app_name": "Awesome API",
            "admin_email": "testing_admin@example.com",
            "items_per_user": 50,
        }

In the dependency override we set a new value for the `admin_email` when creating the new `Settings` object, and then we return that new object.

Then we can test that it is used.

## Reading a `.env` file¶

If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables.

This practice is common enough that it has a name, these environment variables are commonly placed in a file `.env`, and the file is called a "dotenv".

Tip

A file starting with a dot (`.`) is a hidden file in Unix-like systems, like Linux and macOS.

But a dotenv file doesn't really have to have that exact filename.

Pydantic has support for reading from these types of files using an external library. You can

Tip

For this to work, you need to `pip install python-dotenv`.

### The `.env` file¶

You could have a `.env` file with:

    ADMIN_EMAIL="deadpool@example.com"
    APP_NAME="ChimichangApp"

### Read settings from `.env`¶

And then update your `config.py` with:

Pydantic v2Pydantic v1

Python 3.8+

    from pydantic_settings import BaseSettings, SettingsConfigDict

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

        model_config = SettingsConfigDict(env_file=".env")

Tip

The `model_config` attribute is used just for Pydantic configuration. You can

Python 3.8+

    from pydantic import BaseSettings

    class Settings(BaseSettings):
        app_name: str = "Awesome API"
        admin_email: str
        items_per_user: int = 50

        class Config:
            env_file = ".env"

Tip

The `Config` class is used just for Pydantic configuration. You can

Info

In Pydantic version 1 the configuration was done in an internal class `Config`, in Pydantic version 2 it's done in an attribute `model_config`. This attribute takes a `dict`, and to get autocompletion and inline errors you can import and use `SettingsConfigDict` to define that `dict`.

Here we define the config `env_file` inside of your Pydantic `Settings` class, and set the value to the filename with the dotenv file we want to use.

### Creating the `Settings` only once with `lru_cache`¶

Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then reuse the same settings object, instead of reading it for each request.

But every time we do:

    Settings()

a new `Settings` object would be created, and at creation it would read the `.env` file again.

If the dependency function was just like:

    def get_settings():
        return Settings()

we would create that object for each request, and we would be reading the `.env` file for each request. ⚠️

But as we are using the `@lru_cache` decorator on top, the `Settings` object will be created only once, the first time it's called. ✔️

Python 3.8+

    from functools import lru_cache

    from fastapi import Depends, FastAPI
    from typing_extensions import Annotated

    from . import config

    app = FastAPI()

    @lru_cache
    def get_settings():
        return config.Settings()

    @app.get("/info")
    async def info(settings: Annotated[config.Settings, Depends(get_settings)]):
        return {
            "app_name": settings.app_name,
            "admin_email": settings.admin_email,
            "items_per_user": settings.items_per_user,
        }

Then for any subsequent call of `get_settings()` in the dependencies for the next requests, instead of executing the internal code of `get_settings()` and creating a new `Settings` object, it will return the same object that was returned on the first call, again and again.

#### `lru_cache` Technical Details¶

`@lru_cache` modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time.

So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments.

For example, if you have a function:

    @lru_cache
    def say_hi(name: str, salutation: str = "Ms."):
        return f"Hello {salutation} {name}"

your program could execute like this:

    sequenceDiagram

    participant code as Code
    participant function as say_hi()
    participant execute as Execute function

        rect rgba(0, 255, 0, .1)
            code ->> function: say_hi(name="Camila")
            function ->> execute: execute function code
            execute ->> code: return the result
        end

        rect rgba(0, 255, 255, .1)
            code ->> function: say_hi(name="Camila")
            function ->> code: return stored result
        end

        rect rgba(0, 255, 0, .1)
            code ->> function: say_hi(name="Rick")
            function ->> execute: execute function code
            execute ->> code: return the result
        end

        rect rgba(0, 255, 0, .1)
            code ->> function: say_hi(name="Rick", salutation="Mr.")
            function ->> execute: execute function code
            execute ->> code: return the result
        end

        rect rgba(0, 255, 255, .1)
            code ->> function: say_hi(name="Rick")
            function ->> code: return stored result
        end

        rect rgba(0, 255, 255, .1)
            code ->> function: say_hi(name="Camila")
            function ->> code: return stored result
        end

In the case of our dependency `get_settings()`, the function doesn't even take any arguments, so it always returns the same value.

That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing.

`@lru_cache` is part of `functools` which is part of Python's standard library, you can

## Recap¶

You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models.

  * By using a dependency you can simplify testing.
  * You can use `.env` files with it.
  * Using `@lru_cache` lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Advanced User Guide - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/
**Depth**: 1

# Advanced User Guide¶

## Additional Features¶

The main [Tutorial - User Guide](../tutorial/) should be enough to give you a tour through all the main features of **FastAPI**.

In the next sections you will see other options, configurations, and additional features.

Tip

The next sections are **not necessarily "advanced"**.

And it's possible that for your use case, the solution is in one of them.

## Read the Tutorial first¶

You could still use most of the features in **FastAPI** with the knowledge from the main [Tutorial - User Guide](../tutorial/).

And the next sections assume you already read it, and assume that you know those main ideas.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.

## FastAPI CLI - FastAPI

**URL**: https://fastapi.tiangolo.com/fastapi-cli/
**Depth**: 1

# FastAPI CLI¶

**FastAPI CLI** is a command line program that you can use to serve your FastAPI app, manage your FastAPI project, and more.

When you install FastAPI (e.g. with `pip install "fastapi[standard]"`), it includes a package called `fastapi-cli`, this package provides the `fastapi` command in the terminal.

To run your FastAPI app for development, you can use the `fastapi dev` command:

    $ fastapi dev main.py

       FastAPI   Starting development server 🚀

                 Searching for package file structure from directories with
                 __init__.py files
                 Importing from /home/user/code/awesomeapp

        module   🐍 main.py

          code   Importing the FastAPI app object from the module with the
                 following code:

                 from main import app

           app   Using import string: main:app

        server   Server started at http://127.0.0.1:8000
        server   Documentation at http://127.0.0.1:8000/docs

           tip   Running in development mode, for production use:
                 fastapi run

                 Logs:

          INFO   Will watch for changes in these directories:
                 [&apos;/home/user/code/awesomeapp&apos;]
          INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
                 quit)
          INFO   Started reloader process [383138] using WatchFiles
          INFO   Started server process [383153]
          INFO   Waiting for application startup.
          INFO   Application startup complete.

The command line program called `fastapi` is **FastAPI CLI**.

FastAPI CLI takes the path to your Python program (e.g. `main.py`) and automatically detects the `FastAPI` instance (commonly named `app`), determines the correct import process, and then serves it.

For production you would use `fastapi run` instead. 🚀

Internally, **FastAPI CLI** uses [Uvicorn](https://www.uvicorn.org), a high-performance, production-ready, ASGI server. 😎

## `fastapi dev`¶

Running `fastapi dev` initiates development mode.

By default, **auto-reload** is enabled, automatically reloading the server when you make changes to your code. This is resource-intensive and could be less stable than when it's disabled. You should only use it for development. It also listens on the IP address `127.0.0.1`, which is the IP for your machine to communicate with itself alone (`localhost`).

## `fastapi run`¶

Executing `fastapi run` starts FastAPI in production mode by default.

By default, **auto-reload** is disabled. It also listens on the IP address `0.0.0.0`, which means all the available IP addresses, this way it will be publicly accessible to anyone that can communicate with the machine. This is how you would normally run it in production, for example, in a container.

In most cases you would (and should) have a "termination proxy" handling HTTPS for you on top, this will depend on how you deploy your application, your provider might do this for you, or you might need to set it up yourself.

Tip

You can

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## Virtual Environments - FastAPI

**URL**: https://fastapi.tiangolo.com/virtual-environments/
**Depth**: 1

# Virtual Environments¶

When you work in Python projects you probably should use a **virtual environment** (or a similar mechanism) to isolate the packages you install for each project.

Info

If you already know about virtual environments, how to create them and use them, you might want to skip this section. 🤓

Tip

A **virtual environment** is different than an **environment variable**.

An **environment variable** is a variable in the system that can be used by programs.

A **virtual environment** is a directory with some files in it.

Info

This page will teach you how to use **virtual environments** and how they work.

If you are ready to adopt a **tool that manages everything** for you (including installing Python), try [uv](https://github.com/astral-sh/uv).

## Create a Project¶

First, create a directory for your project.

What I normally do is that I create a directory named `code` inside my home/user directory.

And inside of that I create one directory per project.

    // Go to the home directory
    $ cd
    // Create a directory for all your code projects
    $ mkdir code
    // Enter into that code directory
    $ cd code
    // Create a directory for this project
    $ mkdir awesome-project
    // Enter into that project directory
    $ cd awesome-project

## Create a Virtual Environment¶

When you start working on a Python project **for the first time** , create a virtual environment **inside your project**.

Tip

You only need to do this **once per project** , not every time you work.

`venv``uv`

To create a virtual environment, you can use the `venv` module that comes with Python.

    $ python -m venv .venv

What that command means

  * `python`: use the program called `python`
  * `-m`: call a module as a script, we'll tell it which module next
  * `venv`: use the module called `venv` that normally comes installed with Python
  * `.venv`: create the virtual environment in the new directory `.venv`

If you have [`uv`](https://github.com/astral-sh/uv) installed, you can use it to create a virtual environment.

    $ uv venv

Tip

By default, `uv` will create a virtual environment in a directory called `.venv`.

But you could customize it passing an additional argument with the directory name.

That command creates a new virtual environment in a directory called `.venv`.

`.venv` or other name

You could create the virtual environment in a different directory, but there's a convention of calling it `.venv`.

## Activate the Virtual Environment¶

Activate the new virtual environment so that any Python command you run or package you install uses it.

Tip

Do this **every time** you start a **new terminal session** to work on the project.

Linux, macOSWindows PowerShellWindows Bash

    $ source .venv/bin/activate

    $ .venv\Scripts\Activate.ps1

Or if you use Bash for Windows (e.g. [Git Bash](https://gitforwindows.org/)):

    $ source .venv/Scripts/activate

Tip

Every time you install a **new package** in that environment, **activate** the environment again.

This makes sure that if you use a **terminal ( CLI) program** installed by that package, you use the one from your virtual environment and not any other that could be installed globally, probably with a different version than what you need.

## Check the Virtual Environment is Active¶

Check that the virtual environment is active (the previous command worked).

Tip

This is **optional** , but it's a good way to **check** that everything is working as expected and you are using the virtual environment you intended.

Linux, macOS, Windows BashWindows PowerShell

    $ which python

    /home/user/code/awesome-project/.venv/bin/python

If it shows the `python` binary at `.venv/bin/python`, inside of your project (in this case `awesome-project`), then it worked. 🎉

    $ Get-Command python

    C:\Users\user\code\awesome-project\.venv\Scripts\python

If it shows the `python` binary at `.venv\Scripts\python`, inside of your project (in this case `awesome-project`), then it worked. 🎉

## Upgrade `pip`¶

Tip

If you use [`uv`](https://github.com/astral-sh/uv) you would use it to install things instead of `pip`, so you don't need to upgrade `pip`. 😎

If you are using `pip` to install packages (it comes by default with Python), you should **upgrade** it to the latest version.

Many exotic errors while installing a package are solved by just upgrading `pip` first.

Tip

You would normally do this **once** , right after you create the virtual environment.

Make sure the virtual environment is active (with the command above) and then run:

    $ python -m pip install --upgrade pip

    ---> 100%

## Add `.gitignore`¶

If you are using **Git** (you should), add a `.gitignore` file to exclude everything in your `.venv` from Git.

Tip

If you used [`uv`](https://github.com/astral-sh/uv) to create the virtual environment, it already did this for you, you can skip this step. 😎

Tip

Do this **once** , right after you create the virtual environment.

    $ echo "*" > .venv/.gitignore

What that command means

  * `echo "*"`: will "print" the text `*` in the terminal (the next part changes that a bit)
  * `>`: anything printed to the terminal by the command to the left of `>` should not be printed but instead written to the file that goes to the right of `>`
  * `.gitignore`: the name of the file where the text should be written

And `*` for Git means "everything". So, it will ignore everything in the `.venv` directory.

That command will create a file `.gitignore` with the content:

    *

## Install Packages¶

After activating the environment, you can install packages in it.

Tip

Do this **once** when installing or upgrading the packages your project needs.

If you need to upgrade a version or add a new package you would **do this again**.

### Install Packages Directly¶

If you're in a hurry and don't want to use a file to declare your project's package requirements, you can install them directly.

Tip

It's a (very) good idea to put the packages and versions your program needs in a file (for example `requirements.txt` or `pyproject.toml`).

`pip``uv`

    $ pip install "fastapi[standard]"

    ---> 100%

If you have [`uv`](https://github.com/astral-sh/uv):

    $ uv pip install "fastapi[standard]"
    ---> 100%

### Install from `requirements.txt`¶

If you have a `requirements.txt`, you can now use it to install its packages.

`pip``uv`

    $ pip install -r requirements.txt
    ---> 100%

If you have [`uv`](https://github.com/astral-sh/uv):

    $ uv pip install -r requirements.txt
    ---> 100%

`requirements.txt`

A `requirements.txt` with some packages could look like:

    fastapi[standard]==0.113.0
    pydantic==2.8.0

## Run Your Program¶

After you activated the virtual environment, you can run your program, and it will use the Python inside of your virtual environment with the packages you installed there.

    $ python main.py

    Hello World

## Configure Your Editor¶

You would probably use an editor, make sure you configure it to use the same virtual environment you created (it will probably autodetect it) so that you can get autocompletion and inline errors.

For example:

  * [VS Code](https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment)
  * [PyCharm](https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html)

Tip

You normally have to do this only **once** , when you create the virtual environment.

## Deactivate the Virtual Environment¶

Once you are done working on your project you can **deactivate** the virtual environment.

    $ deactivate

This way, when you run `python` it won't try to run it from that virtual environment with the packages installed there.

## Ready to Work¶

Now you're ready to start working on your project.

Tip

Do you want to understand what's all that above?

Continue reading. 👇🤓

## Why Virtual Environments¶

To work with FastAPI you need to install [Python](https://www.python.org/).

After that, you would need to **install** FastAPI and any other **packages** you want to use.

To install packages you would normally use the `pip` command that comes with Python (or similar alternatives).

Nevertheless, if you just use `pip` directly, the packages would be installed in your **global Python environment** (the global installation of Python).

### The Problem¶

So, what's the problem with installing packages in the global Python environment?

At some point, you will probably end up writing many different programs that depend on **different packages**. And some of these projects you work on will depend on **different versions** of the same package. 😱

For example, you could create a project called `philosophers-stone`, this program depends on another package called **`harry`, using the version `1`**. So, you need to install `harry`.

    flowchart LR
        stone(philosophers-stone) -->|requires| harry-1[harry v1]

Then, at some point later, you create another project called `prisoner-of-azkaban`, and this project also depends on `harry`, but this project needs **`harry` version `3`**.

    flowchart LR
        azkaban(prisoner-of-azkaban) --> |requires| harry-3[harry v3]

But now the problem is, if you install the packages globally (in the global environment) instead of in a local **virtual environment** , you will have to choose which version of `harry` to install.

If you want to run `philosophers-stone` you will need to first install `harry` version `1`, for example with:

    $ pip install "harry==1"

And then you would end up with `harry` version `1` installed in your global Python environment.

    flowchart LR
        subgraph global[global env]
            harry-1[harry v1]
        end
        subgraph stone-project[philosophers-stone project]
            stone(philosophers-stone) -->|requires| harry-1
        end

But then if you want to run `prisoner-of-azkaban`, you will need to uninstall `harry` version `1` and install `harry` version `3` (or just installing version `3` would automatically uninstall version `1`).

    $ pip install "harry==3"

And then you would end up with `harry` version `3` installed in your global Python environment.

And if you try to run `philosophers-stone` again, there's a chance it would **not work** because it needs `harry` version `1`.

    flowchart LR
        subgraph global[global env]
            harry-1[harry v1]
            style harry-1 fill:#ccc,stroke-dasharray: 5 5
            harry-3[harry v3]
        end
        subgraph stone-project[philosophers-stone project]
            stone(philosophers-stone) -.-x|⛔️| harry-1
        end
        subgraph azkaban-project[prisoner-of-azkaban project]
            azkaban(prisoner-of-azkaban) --> |requires| harry-3
        end

Tip

It's very common in Python packages to try the best to **avoid breaking changes** in **new versions** , but it's better to be safe, and install newer versions intentionally and when you can run the tests to check everything is working correctly.

Now, imagine that with **many** other **packages** that all your **projects depend on**. That's very difficult to manage. And you would probably end up running some projects with some **incompatible versions** of the packages, and not knowing why something isn't working.

Also, depending on your operating system (e.g. Linux, Windows, macOS), it could have come with Python already installed. And in that case it probably had some packages pre-installed with some specific versions **needed by your system**. If you install packages in the global Python environment, you could end up **breaking** some of the programs that came with your operating system.

## Where are Packages Installed¶

When you install Python, it creates some directories with some files in your computer.

Some of these directories are the ones in charge of having all the packages you install.

When you run:

    // Don't run this now, it's just an example 🤓
    $ pip install "fastapi[standard]"
    ---> 100%

That will download a compressed file with the FastAPI code, normally from [PyPI](https://pypi.org/project/fastapi/).

It will also **download** files for other packages that FastAPI depends on.

Then it will **extract** all those files and put them in a directory in your computer.

By default, it will put those files downloaded and extracted in the directory that comes with your Python installation, that's the **global environment**.

## What are Virtual Environments¶

The solution to the problems of having all the packages in the global environment is to use a **virtual environment for each project** you work on.

A virtual environment is a **directory** , very similar to the global one, where you can install the packages for a project.

This way, each project will have its own virtual environment (`.venv` directory) with its own packages.

    flowchart TB
        subgraph stone-project[philosophers-stone project]
            stone(philosophers-stone) --->|requires| harry-1
            subgraph venv1[.venv]
                harry-1[harry v1]
            end
        end
        subgraph azkaban-project[prisoner-of-azkaban project]
            azkaban(prisoner-of-azkaban) --->|requires| harry-3
            subgraph venv2[.venv]
                harry-3[harry v3]
            end
        end
        stone-project ~~~ azkaban-project

## What Does Activating a Virtual Environment Mean¶

When you activate a virtual environment, for example with:

Linux, macOSWindows PowerShellWindows Bash

    $ source .venv/bin/activate

    $ .venv\Scripts\Activate.ps1

Or if you use Bash for Windows (e.g. [Git Bash](https://gitforwindows.org/)):

    $ source .venv/Scripts/activate

That command will create or modify some [environment variables](../environment-variables/) that will be available for the next commands.

One of those variables is the `PATH` variable.

Tip

You can

Activating a virtual environment adds its path `.venv/bin` (on Linux and macOS) or `.venv\Scripts` (on Windows) to the `PATH` environment variable.

Let's say that before activating the environment, the `PATH` variable looked like this:

Linux, macOSWindows

    /usr/bin:/bin:/usr/sbin:/sbin

That means that the system would look for programs in:

  * `/usr/bin`
  * `/bin`
  * `/usr/sbin`
  * `/sbin`

    C:\Windows\System32

That means that the system would look for programs in:

  * `C:\Windows\System32`

After activating the virtual environment, the `PATH` variable would look something like this:

Linux, macOSWindows

    /home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin

That means that the system will now start looking first for programs in:

    /home/user/code/awesome-project/.venv/bin

before looking in the other directories.

So, when you type `python` in the terminal, the system will find the Python program in

    /home/user/code/awesome-project/.venv/bin/python

and use that one.

    C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32

That means that the system will now start looking first for programs in:

    C:\Users\user\code\awesome-project\.venv\Scripts

before looking in the other directories.

So, when you type `python` in the terminal, the system will find the Python program in

    C:\Users\user\code\awesome-project\.venv\Scripts\python

and use that one.

An important detail is that it will put the virtual environment path at the **beginning** of the `PATH` variable. The system will find it **before** finding any other Python available. This way, when you run `python`, it will use the Python **from the virtual environment** instead of any other `python` (for example, a `python` from a global environment).

Activating a virtual environment also changes a couple of other things, but this is one of the most important things it does.

## Checking a Virtual Environment¶

When you check if a virtual environment is active, for example with:

Linux, macOS, Windows BashWindows PowerShell

    $ which python

    /home/user/code/awesome-project/.venv/bin/python

    $ Get-Command python

    C:\Users\user\code\awesome-project\.venv\Scripts\python

That means that the `python` program that will be used is the one **in the virtual environment**.

You use `which` in Linux and macOS and `Get-Command` in Windows PowerShell.

The way that command works is that it will go and check in the `PATH` environment variable, going through **each path in order** , looking for the program called `python`. Once it finds it, it will **show you the path** to that program.

The most important part is that when you call `python`, that is the exact "`python`" that will be executed.

So, you can confirm if you are in the correct virtual environment.

Tip

It's easy to activate one virtual environment, get one Python, and then **go to another project**.

And the second project **wouldn't work** because you are using the **incorrect Python** , from a virtual environment for another project.

It's useful being able to check what `python` is being used. 🤓

## Why Deactivate a Virtual Environment¶

For example, you could be working on a project `philosophers-stone`, **activate that virtual environment** , install packages and work with that environment.

And then you want to work on **another project** `prisoner-of-azkaban`.

You go to that project:

    $ cd ~/code/prisoner-of-azkaban

If you don't deactivate the virtual environment for `philosophers-stone`, when you run `python` in the terminal, it will try to use the Python from `philosophers-stone`.

    $ cd ~/code/prisoner-of-azkaban

    $ python main.py

    // Error importing sirius, it's not installed 😱
    Traceback (most recent call last):
        File "main.py", line 1, in
            import sirius

But if you deactivate the virtual environment and activate the new one for `prisoner-of-askaban` then when you run `python` it will use the Python from the virtual environment in `prisoner-of-azkaban`.

    $ cd ~/code/prisoner-of-azkaban

    // You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎
    $ deactivate

    // Activate the virtual environment in prisoner-of-azkaban/.venv 🚀
    $ source .venv/bin/activate

    // Now when you run python, it will find the package sirius installed in this virtual environment ✨
    $ python main.py

    I solemnly swear 🐺

## Alternatives¶

This is a simple guide to get you started and teach you how everything works **underneath**.

There are many **alternatives** to managing virtual environments, package dependencies (requirements), projects.

Once you are ready and want to use a tool to **manage the entire project** , packages dependencies, virtual environments, etc. I would suggest you try [uv](https://github.com/astral-sh/uv).

`uv` can do a lot of things, it can:

  * **Install Python** for you, including different versions
  * Manage the **virtual environment** for your projects
  * Install **packages**
  * Manage package **dependencies and versions** for your project
  * Make sure you have an **exact** set of packages and versions to install, including their dependencies, so that you can be sure that you can run your project in production exactly the same as in your computer while developing, this is called **locking**
  * And many other things

## Conclusion¶

If you read and understood all this, now **you know much more** about virtual environments than many developers out there. 🤓

Knowing these details will most probably be useful in a future time when you are debugging something that seems complex, but you will know **how it all works underneath**. 😎

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Additional Responses in OpenAPI - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/additional-responses/
**Depth**: 2

# Additional Responses in OpenAPI¶

Warning

This is a rather advanced topic.

If you are starting with **FastAPI** , you might not need this.

You can declare additional responses, with additional status codes, media types, descriptions, etc.

Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs.

But for those additional responses you have to make sure you return a `Response` like `JSONResponse` directly, with your status code and content.

## Additional Response with `model`¶

You can pass to your _path operation decorators_ a parameter `responses`.

It receives a `dict`: the keys are status codes for each response (like `200`), and the values are other `dict`s with the information for each of them.

Each of those response `dict`s can have a key `model`, containing a Pydantic model, just like `response_model`.

**FastAPI** will take that model, generate its JSON Schema and include it in the correct place in OpenAPI.

For example, to declare another response with a status code `404` and a Pydantic model `Message`, you can write:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    from pydantic import BaseModel

    class Item(BaseModel):
        id: str
        value: str

    class Message(BaseModel):
        message: str

    app = FastAPI()

    @app.get("/items/{item_id}", response_model=Item, responses={404: {"model": Message}})
    async def read_item(item_id: str):
        if item_id == "foo":
            return {"id": "foo", "value": "there goes my hero"}
        return JSONResponse(status_code=404, content={"message": "Item not found"})

Note

Keep in mind that you have to return the `JSONResponse` directly.

Info

The `model` key is not part of OpenAPI.

**FastAPI** will take the Pydantic model from there, generate the JSON Schema, and put it in the correct place.

The correct place is:

  * In the key `content`, that has as value another JSON object (`dict`) that contains:
    * A key with the media type, e.g. `application/json`, that contains as value another JSON object, that contains:
      * A key `schema`, that has as the value the JSON Schema from the model, here's the correct place.
        * **FastAPI** adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc.

The generated responses in the OpenAPI for this _path operation_ will be:

    {
        "responses": {
            "404": {
                "description": "Additional Response",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            },
            "200": {
                "description": "Successful Response",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Item"
                        }
                    }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/HTTPValidationError"
                        }
                    }
                }
            }
        }
    }

The schemas are referenced to another place inside the OpenAPI schema:

    {
        "components": {
            "schemas": {
                "Message": {
                    "title": "Message",
                    "required": [
                        "message"
                    ],
                    "type": "object",
                    "properties": {
                        "message": {
                            "title": "Message",
                            "type": "string"
                        }
                    }
                },
                "Item": {
                    "title": "Item",
                    "required": [
                        "id",
                        "value"
                    ],
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "Id",
                            "type": "string"
                        },
                        "value": {
                            "title": "Value",
                            "type": "string"
                        }
                    }
                },
                "ValidationError": {
                    "title": "ValidationError",
                    "required": [
                        "loc",
                        "msg",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "loc": {
                            "title": "Location",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "msg": {
                            "title": "Message",
                            "type": "string"
                        },
                        "type": {
                            "title": "Error Type",
                            "type": "string"
                        }
                    }
                },
                "HTTPValidationError": {
                    "title": "HTTPValidationError",
                    "type": "object",
                    "properties": {
                        "detail": {
                            "title": "Detail",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ValidationError"
                            }
                        }
                    }
                }
            }
        }
    }

## Additional media types for the main response¶

You can use this same `responses` parameter to add different media types for the same main response.

For example, you can add an additional media type of `image/png`, declaring that your _path operation_ can return a JSON object (with media type `application/json`) or a PNG image:

Python 3.8+

    from typing import Union

    from fastapi import FastAPI
    from fastapi.responses import FileResponse
    from pydantic import BaseModel

    class Item(BaseModel):
        id: str
        value: str

    app = FastAPI()

    @app.get(
        "/items/{item_id}",
        response_model=Item,
        responses={
            200: {
                "content": {"image/png": {}},
                "description": "Return the JSON item or an image.",
            }
        },
    )
    async def read_item(item_id: str, img: Union[bool, None] = None):
        if img:
            return FileResponse("image.png", media_type="image/png")
        else:
            return {"id": "foo", "value": "there goes my hero"}

Note

Notice that you have to return the image using a `FileResponse` directly.

Info

Unless you specify a different media type explicitly in your `responses` parameter, FastAPI will assume the response has the same media type as the main response class (default `application/json`).

But if you have specified a custom response class with `None` as its media type, FastAPI will use `application/json` for any additional response that has an associated model.

## Combining information¶

You can also combine response information from multiple places, including the `response_model`, `status_code`, and `responses` parameters.

You can declare a `response_model`, using the default status code `200` (or a custom one if you need), and then declare additional information for that same response in `responses`, directly in the OpenAPI schema.

**FastAPI** will keep the additional information from `responses`, and combine it with the JSON Schema from your model.

For example, you can declare a response with a status code `404` that uses a Pydantic model and has a custom `description`.

And a response with a status code `200` that uses your `response_model`, but includes a custom `example`:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    from pydantic import BaseModel

    class Item(BaseModel):
        id: str
        value: str

    class Message(BaseModel):
        message: str

    app = FastAPI()

    @app.get(
        "/items/{item_id}",
        response_model=Item,
        responses={
            404: {"model": Message, "description": "The item was not found"},
            200: {
                "description": "Item requested by ID",
                "content": {
                    "application/json": {
                        "example": {"id": "bar", "value": "The bar tenders"}
                    }
                },
            },
        },
    )
    async def read_item(item_id: str):
        if item_id == "foo":
            return {"id": "foo", "value": "there goes my hero"}
        else:
            return JSONResponse(status_code=404, content={"message": "Item not found"})

It will all be combined and included in your OpenAPI, and shown in the API docs:

## Combine predefined responses and custom ones¶

You might want to have some predefined responses that apply to many _path operations_ , but you want to combine them with custom responses needed by each _path operation_.

For those cases, you can use the Python technique of "unpacking" a `dict` with `**dict_to_unpack`:

    old_dict = {
        "old key": "old value",
        "second old key": "second old value",
    }
    new_dict = {**old_dict, "new key": "new value"}

Here, `new_dict` will contain all the key-value pairs from `old_dict` plus the new key-value pair:

    {
        "old key": "old value",
        "second old key": "second old value",
        "new key": "new value",
    }

You can use that technique to reuse some predefined responses in your _path operations_ and combine them with additional custom ones.

For example:

Python 3.8+

    from typing import Union

    from fastapi import FastAPI
    from fastapi.responses import FileResponse
    from pydantic import BaseModel

    class Item(BaseModel):
        id: str
        value: str

    responses = {
        404: {"description": "Item not found"},
        302: {"description": "The item was moved"},
        403: {"description": "Not enough privileges"},
    }

    app = FastAPI()

    @app.get(
        "/items/{item_id}",
        response_model=Item,
        responses={**responses, 200: {"content": {"image/png": {}}}},
    )
    async def read_item(item_id: str, img: Union[bool, None] = None):
        if img:
            return FileResponse("image.png", media_type="image/png")
        else:
            return {"id": "foo", "value": "there goes my hero"}

## More information about OpenAPI responses¶

To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification:

  * [OpenAPI Responses Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#responses-object), it includes the `Response Object`.
  * [OpenAPI Response Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#response-object), you can include anything from this directly in each response inside your `responses` parameter. Including `description`, `headers`, `content` (inside of this is that you declare different media types and JSON Schemas), and `links`.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Custom Response - HTML, Stream, File, others - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/custom-response/
**Depth**: 2

# Custom Response - HTML, Stream, File, others¶

By default, **FastAPI** will return the responses using `JSONResponse`.

You can override it by returning a `Response` directly as seen in [Return a Response directly](../response-directly/).

But if you return a `Response` directly (or any subclass, like `JSONResponse`), the data won't be automatically converted (even if you declare a `response_model`), and the documentation won't be automatically generated (for example, including the specific "media type", in the HTTP header `Content-Type` as part of the generated OpenAPI).

But you can also declare the `Response` that you want to be used (e.g. any `Response` subclass), in the _path operation decorator_ using the `response_class` parameter.

The contents that you return from your _path operation function_ will be put inside of that `Response`.

And if that `Response` has a JSON media type (`application/json`), like is the case with the `JSONResponse` and `UJSONResponse`, the data you return will be automatically converted (and filtered) with any Pydantic `response_model` that you declared in the _path operation decorator_.

Note

If you use a response class with no media type, FastAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs.

## Use `ORJSONResponse`¶

For example, if you are squeezing performance, you can install and use [`orjson`](https://github.com/ijl/orjson) and set the response to be `ORJSONResponse`.

Import the `Response` class (sub-class) you want to use and declare it in the _path operation decorator_.

For large responses, returning a `Response` directly is much faster than returning a dictionary.

This is because by default, FastAPI will inspect every item inside and make sure it is serializable as JSON, using the same [JSON Compatible Encoder](../../tutorial/encoder/) explained in the tutorial. This is what allows you to return **arbitrary objects** , for example database models.

But if you are certain that the content that you are returning is **serializable with JSON** , you can pass it directly to the response class and avoid the extra overhead that FastAPI would have by passing your return content through the `jsonable_encoder` before passing it to the response class.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import ORJSONResponse

    app = FastAPI()

    @app.get("/items/", response_class=ORJSONResponse)
    async def read_items():
        return ORJSONResponse([{"item_id": "Foo"}])

Info

The parameter `response_class` will also be used to define the "media type" of the response.

In this case, the HTTP header `Content-Type` will be set to `application/json`.

And it will be documented as such in OpenAPI.

Tip

The `ORJSONResponse` is only available in FastAPI, not in Starlette.

## HTML Response¶

To return a response with HTML directly from **FastAPI** , use `HTMLResponse`.

  * Import `HTMLResponse`.
  * Pass `HTMLResponse` as the parameter `response_class` of your _path operation decorator_.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import HTMLResponse

    app = FastAPI()

    @app.get("/items/", response_class=HTMLResponse)
    async def read_items():
        return """

                Some HTML in here

                Look ma! HTML!

        """

Info

The parameter `response_class` will also be used to define the "media type" of the response.

In this case, the HTTP header `Content-Type` will be set to `text/html`.

And it will be documented as such in OpenAPI.

### Return a `Response`¶

As seen in [Return a Response directly](../response-directly/), you can also override the response directly in your _path operation_ , by returning it.

The same example from above, returning an `HTMLResponse`, could look like:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import HTMLResponse

    app = FastAPI()

    @app.get("/items/")
    async def read_items():
        html_content = """

                Some HTML in here

                Look ma! HTML!

        """
        return HTMLResponse(content=html_content, status_code=200)

Warning

A `Response` returned directly by your _path operation function_ won't be documented in OpenAPI (for example, the `Content-Type` won't be documented) and won't be visible in the automatic interactive docs.

Info

Of course, the actual `Content-Type` header, status code, etc, will come from the `Response` object you returned.

### Document in OpenAPI and override `Response`¶

If you want to override the response from inside of the function but at the same time document the "media type" in OpenAPI, you can use the `response_class` parameter AND return a `Response` object.

The `response_class` will then be used only to document the OpenAPI _path operation_ , but your `Response` will be used as is.

#### Return an `HTMLResponse` directly¶

For example, it could be something like:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import HTMLResponse

    app = FastAPI()

    def generate_html_response():
        html_content = """

                Some HTML in here

                Look ma! HTML!

        """
        return HTMLResponse(content=html_content, status_code=200)

    @app.get("/items/", response_class=HTMLResponse)
    async def read_items():
        return generate_html_response()

In this example, the function `generate_html_response()` already generates and returns a `Response` instead of returning the HTML in a `str`.

By returning the result of calling `generate_html_response()`, you are already returning a `Response` that will override the default **FastAPI** behavior.

But as you passed the `HTMLResponse` in the `response_class` too, **FastAPI** will know how to document it in OpenAPI and the interactive docs as HTML with `text/html`:

## Available responses¶

Here are some of the available responses.

Keep in mind that you can use `Response` to return anything else, or even create a custom sub-class.

Technical Details

You could also use `from starlette.responses import HTMLResponse`.

**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette.

### `Response`¶

The main `Response` class, all the other responses inherit from it.

You can return it directly.

It accepts the following parameters:

  * `content` \- A `str` or `bytes`.
  * `status_code` \- An `int` HTTP status code.
  * `headers` \- A `dict` of strings.
  * `media_type` \- A `str` giving the media type. E.g. `"text/html"`.

FastAPI (actually Starlette) will automatically include a Content-Length header. It will also include a Content-Type header, based on the `media_type` and appending a charset for text types.

Python 3.8+

    from fastapi import FastAPI, Response

    app = FastAPI()

    @app.get("/legacy/")
    def get_legacy_data():
        data = """

            Apply shampoo here.

            You'll have to use soap here.

        """
        return Response(content=data, media_type="application/xml")

### `HTMLResponse`¶

Takes some text or bytes and returns an HTML response, as you read above.

### `PlainTextResponse`¶

Takes some text or bytes and returns a plain text response.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import PlainTextResponse

    app = FastAPI()

    @app.get("/", response_class=PlainTextResponse)
    async def main():
        return "Hello World"

### `JSONResponse`¶

Takes some data and returns an `application/json` encoded response.

This is the default response used in **FastAPI** , as you read above.

### `ORJSONResponse`¶

A fast alternative JSON response using [`orjson`](https://github.com/ijl/orjson), as you read above.

Info

This requires installing `orjson` for example with `pip install orjson`.

### `UJSONResponse`¶

An alternative JSON response using [`ujson`](https://github.com/ultrajson/ultrajson).

Info

This requires installing `ujson` for example with `pip install ujson`.

Warning

`ujson` is less careful than Python's built-in implementation in how it handles some edge-cases.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import UJSONResponse

    app = FastAPI()

    @app.get("/items/", response_class=UJSONResponse)
    async def read_items():
        return [{"item_id": "Foo"}]

Tip

It's possible that `ORJSONResponse` might be a faster alternative.

### `RedirectResponse`¶

Returns an HTTP redirect. Uses a 307 status code (Temporary Redirect) by default.

You can return a `RedirectResponse` directly:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import RedirectResponse

    app = FastAPI()

    @app.get("/typer")
    async def redirect_typer():
        return RedirectResponse("https://typer.tiangolo.com")

* * *

Or you can use it in the `response_class` parameter:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import RedirectResponse

    app = FastAPI()

    @app.get("/fastapi", response_class=RedirectResponse)
    async def redirect_fastapi():
        return "https://fastapi.tiangolo.com"

If you do that, then you can return the URL directly from your _path operation_ function.

In this case, the `status_code` used will be the default one for the `RedirectResponse`, which is `307`.

* * *

You can also use the `status_code` parameter combined with the `response_class` parameter:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import RedirectResponse

    app = FastAPI()

    @app.get("/pydantic", response_class=RedirectResponse, status_code=302)
    async def redirect_pydantic():
        return "https://docs.pydantic.dev/"

### `StreamingResponse`¶

Takes an async generator or a normal generator/iterator and streams the response body.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import StreamingResponse

    app = FastAPI()

    async def fake_video_streamer():
        for i in range(10):
            yield b"some fake video bytes"

    @app.get("/")
    async def main():
        return StreamingResponse(fake_video_streamer())

#### Using `StreamingResponse` with file-like objects¶

If you have a [file-like](https://docs.python.org/3/glossary.html#term-file-like-object) object (e.g. the object returned by `open()`), you can create a generator function to iterate over that file-like object.

That way, you don't have to read it all first in memory, and you can pass that generator function to the `StreamingResponse`, and return it.

This includes many libraries to interact with cloud storage, video processing, and others.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import StreamingResponse

    some_file_path = "large-video-file.mp4"
    app = FastAPI()

    @app.get("/")
    def main():
        def iterfile():  # (1)
            with open(some_file_path, mode="rb") as file_like:  # (2)
                yield from file_like  # (3)

        return StreamingResponse(iterfile(), media_type="video/mp4")

  1. This is the generator function. It's a "generator function" because it contains `yield` statements inside.
  2. By using a `with` block, we make sure that the file-like object is closed after the generator function is done. So, after it finishes sending the response.
  3. This `yield from` tells the function to iterate over that thing named `file_like`. And then, for each part iterated, yield that part as coming from this generator function (`iterfile`).

So, it is a generator function that transfers the "generating" work to something else internally.

By doing it this way, we can put it in a `with` block, and that way, ensure that the file-like object is closed after finishing.

Tip

Notice that here as we are using standard `open()` that doesn't support `async` and `await`, we declare the path operation with normal `def`.

### `FileResponse`¶

Asynchronously streams a file as the response.

Takes a different set of arguments to instantiate than the other response types:

  * `path` \- The file path to the file to stream.
  * `headers` \- Any custom headers to include, as a dictionary.
  * `media_type` \- A string giving the media type. If unset, the filename or path will be used to infer a media type.
  * `filename` \- If set, this will be included in the response `Content-Disposition`.

File responses will include appropriate `Content-Length`, `Last-Modified` and `ETag` headers.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import FileResponse

    some_file_path = "large-video-file.mp4"
    app = FastAPI()

    @app.get("/")
    async def main():
        return FileResponse(some_file_path)

You can also use the `response_class` parameter:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import FileResponse

    some_file_path = "large-video-file.mp4"
    app = FastAPI()

    @app.get("/", response_class=FileResponse)
    async def main():
        return some_file_path

In this case, you can return the file path directly from your _path operation_ function.

## Custom response class¶

You can create your own custom response class, inheriting from `Response` and using it.

For example, let's say that you want to use [`orjson`](https://github.com/ijl/orjson), but with some custom settings not used in the included `ORJSONResponse` class.

Let's say you want it to return indented and formatted JSON, so you want to use the orjson option `orjson.OPT_INDENT_2`.

You could create a `CustomORJSONResponse`. The main thing you have to do is create a `Response.render(content)` method that returns the content as `bytes`:

Python 3.8+

    from typing import Any

    import orjson
    from fastapi import FastAPI, Response

    app = FastAPI()

    class CustomORJSONResponse(Response):
        media_type = "application/json"

        def render(self, content: Any) -> bytes:
            assert orjson is not None, "orjson must be installed"
            return orjson.dumps(content, option=orjson.OPT_INDENT_2)

    @app.get("/", response_class=CustomORJSONResponse)
    async def main():
        return {"message": "Hello World"}

Now instead of returning:

    {"message": "Hello World"}

...this response will return:

    {
      "message": "Hello World"
    }

Of course, you will probably find much better ways to take advantage of this than formatting JSON. 😉

## Default response class¶

When creating a **FastAPI** class instance or an `APIRouter` you can specify which response class to use by default.

The parameter that defines this is `default_response_class`.

In the example below, **FastAPI** will use `ORJSONResponse` by default, in all _path operations_ , instead of `JSONResponse`.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import ORJSONResponse

    app = FastAPI(default_response_class=ORJSONResponse)

    @app.get("/items/")
    async def read_items():
        return [{"item_id": "Foo"}]

Tip

You can still override `response_class` in _path operations_ as before.

## Additional documentation¶

You can also declare the media type and many other details in OpenAPI using `responses`: [Additional Responses in OpenAPI](../additional-responses/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Generating SDKs - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/generate-clients/
**Depth**: 2

# Generating SDKs¶

Because **FastAPI** is based on the **OpenAPI** specification, its APIs can be described in a standard format that many tools understand.

This makes it easy to generate up-to-date **documentation** , client libraries (**SDKs**) in multiple languages, and **testing** or **automation workflows** that stay in sync with your code.

In this guide, you'll learn how to generate a **TypeScript SDK** for your FastAPI backend.

## Open Source SDK Generators¶

A versatile option is the [OpenAPI Generator](https://openapi-generator.tech/), which supports **many programming languages** and can generate SDKs from your OpenAPI specification.

For **TypeScript clients** , [Hey API](https://heyapi.dev/) is a purpose-built solution, providing an optimized experience for the TypeScript ecosystem.

You can discover more SDK generators on [OpenAPI.Tools](https://openapi.tools/#sdk).

Tip

FastAPI automatically generates **OpenAPI 3.1** specifications, so any tool you use must support this version.

## SDK Generators from FastAPI Sponsors¶

This section highlights **venture-backed** and **company-supported** solutions from companies that sponsor FastAPI. These products provide **additional features** and **integrations** on top of high-quality generated SDKs.

By ✨ [**sponsoring FastAPI**](../../help-fastapi/#sponsor-the-author) ✨, these companies help ensure the framework and its **ecosystem** remain healthy and **sustainable**.

Their sponsorship also demonstrates a strong commitment to the FastAPI **community** (you), showing that they care not only about offering a **great service** but also about supporting a **robust and thriving framework** , FastAPI. 🙇

For example, you might want to try:

  * [Speakeasy](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship)
  * [Stainless](https://www.stainless.com/?utm_source=fastapi&utm_medium=referral)
  * [liblab](https://developers.liblab.com/tutorials/sdk-for-fastapi?utm_source=fastapi)

Some of these solutions may also be open source or offer free tiers, so you can try them without a financial commitment. Other commercial SDK generators are available and can be found online. 🤓

## Create a TypeScript SDK¶

Let's start with a simple FastAPI application:

Python 3.9+

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    @app.post("/items/", response_model=ResponseMessage)
    async def create_item(item: Item):
        return {"message": "item received"}

    @app.get("/items/", response_model=list[Item])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

🤓 Other versions and variants

Python 3.8+

    from typing import List

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    @app.post("/items/", response_model=ResponseMessage)
    async def create_item(item: Item):
        return {"message": "item received"}

    @app.get("/items/", response_model=List[Item])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

Notice that the _path operations_ define the models they use for request payload and response payload, using the models `Item` and `ResponseMessage`.

### API Docs¶

If you go to `/docs`, you will see that it has the **schemas** for the data to be sent in requests and received in responses:

You can see those schemas because they were declared with the models in the app.

That information is available in the app's **OpenAPI schema** , and then shown in the API docs.

That same information from the models that is included in OpenAPI is what can be used to **generate the client code**.

### Hey API¶

Once we have a FastAPI app with the models, we can use Hey API to generate a TypeScript client. The fastest way to do that is via npx.

    npx @hey-api/openapi-ts -i http://localhost:8000/openapi.json -o src/client

This will generate a TypeScript SDK in `./src/client`.

You can learn how to [install `@hey-api/openapi-ts`](https://heyapi.dev/openapi-ts/get-started) and read about the [generated output](https://heyapi.dev/openapi-ts/output) on their website.

### Using the SDK¶

Now you can import and use the client code. It could look like this, notice that you get autocompletion for the methods:

You will also get autocompletion for the payload to send:

Tip

Notice the autocompletion for `name` and `price`, that was defined in the FastAPI application, in the `Item` model.

You will have inline errors for the data that you send:

The response object will also have autocompletion:

## FastAPI App with Tags¶

In many cases, your FastAPI app will be bigger, and you will probably use tags to separate different groups of _path operations_.

For example, you could have a section for **items** and another section for **users** , and they could be separated by tags:

Python 3.9+

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    class User(BaseModel):
        username: str
        email: str

    @app.post("/items/", response_model=ResponseMessage, tags=["items"])
    async def create_item(item: Item):
        return {"message": "Item received"}

    @app.get("/items/", response_model=list[Item], tags=["items"])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

    @app.post("/users/", response_model=ResponseMessage, tags=["users"])
    async def create_user(user: User):
        return {"message": "User received"}

🤓 Other versions and variants

Python 3.8+

    from typing import List

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    class User(BaseModel):
        username: str
        email: str

    @app.post("/items/", response_model=ResponseMessage, tags=["items"])
    async def create_item(item: Item):
        return {"message": "Item received"}

    @app.get("/items/", response_model=List[Item], tags=["items"])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

    @app.post("/users/", response_model=ResponseMessage, tags=["users"])
    async def create_user(user: User):
        return {"message": "User received"}

### Generate a TypeScript Client with Tags¶

If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags.

This way, you will be able to have things ordered and grouped correctly for the client code:

In this case, you have:

  * `ItemsService`
  * `UsersService`

### Client Method Names¶

Right now, the generated method names like `createItemItemsPost` don't look very clean:

    ItemsService.createItemItemsPost({name: "Plumbus", price: 5})

...that's because the client generator uses the OpenAPI internal **operation ID** for each _path operation_.

OpenAPI requires that each operation ID is unique across all the _path operations_ , so FastAPI uses the **function name** , the **path** , and the **HTTP method/operation** to generate that operation ID, because that way it can make sure that the operation IDs are unique.

But I'll show you how to improve that next. 🤓

## Custom Operation IDs and Better Method Names¶

You can **modify** the way these operation IDs are **generated** to make them simpler and have **simpler method names** in the clients.

In this case, you will have to ensure that each operation ID is **unique** in some other way.

For example, you could make sure that each _path operation_ has a tag, and then generate the operation ID based on the **tag** and the _path operation_ **name** (the function name).

### Custom Generate Unique ID Function¶

FastAPI uses a **unique ID** for each _path operation_ , which is used for the **operation ID** and also for the names of any needed custom models, for requests or responses.

You can customize that function. It takes an `APIRoute` and outputs a string.

For example, here it is using the first tag (you will probably have only one tag) and the _path operation_ name (the function name).

You can then pass that custom function to **FastAPI** as the `generate_unique_id_function` parameter:

Python 3.9+

    from fastapi import FastAPI
    from fastapi.routing import APIRoute
    from pydantic import BaseModel

    def custom_generate_unique_id(route: APIRoute):
        return f"{route.tags[0]}-{route.name}"

    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    class User(BaseModel):
        username: str
        email: str

    @app.post("/items/", response_model=ResponseMessage, tags=["items"])
    async def create_item(item: Item):
        return {"message": "Item received"}

    @app.get("/items/", response_model=list[Item], tags=["items"])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

    @app.post("/users/", response_model=ResponseMessage, tags=["users"])
    async def create_user(user: User):
        return {"message": "User received"}

🤓 Other versions and variants

Python 3.8+

    from typing import List

    from fastapi import FastAPI
    from fastapi.routing import APIRoute
    from pydantic import BaseModel

    def custom_generate_unique_id(route: APIRoute):
        return f"{route.tags[0]}-{route.name}"

    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)

    class Item(BaseModel):
        name: str
        price: float

    class ResponseMessage(BaseModel):
        message: str

    class User(BaseModel):
        username: str
        email: str

    @app.post("/items/", response_model=ResponseMessage, tags=["items"])
    async def create_item(item: Item):
        return {"message": "Item received"}

    @app.get("/items/", response_model=List[Item], tags=["items"])
    async def get_items():
        return [
            {"name": "Plumbus", "price": 3},
            {"name": "Portal Gun", "price": 9001},
        ]

    @app.post("/users/", response_model=ResponseMessage, tags=["users"])
    async def create_user(user: User):
        return {"message": "User received"}

### Generate a TypeScript Client with Custom Operation IDs¶

Now, if you generate the client again, you will see that it has the improved method names:

As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation.

### Preprocess the OpenAPI Specification for the Client Generator¶

The generated code still has some **duplicated information**.

We already know that this method is related to the **items** because that word is in the `ItemsService` (taken from the tag), but we still have the tag name prefixed in the method name too. 😕

We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are **unique**.

But for the generated client, we could **modify** the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and **cleaner**.

We could download the OpenAPI JSON to a file `openapi.json` and then we could **remove that prefixed tag** with a script like this:

Python 3.8+Node.js

    import json
    from pathlib import Path

    file_path = Path("./openapi.json")
    openapi_content = json.loads(file_path.read_text())

    for path_data in openapi_content["paths"].values():
        for operation in path_data.values():
            tag = operation["tags"][0]
            operation_id = operation["operationId"]
            to_remove = f"{tag}-"
            new_operation_id = operation_id[len(to_remove) :]
            operation["operationId"] = new_operation_id

    file_path.write_text(json.dumps(openapi_content))

    import * as fs from 'fs'

    async function modifyOpenAPIFile(filePath) {
      try {
        const data = await fs.promises.readFile(filePath)
        const openapiContent = JSON.parse(data)

        const paths = openapiContent.paths
        for (const pathKey of Object.keys(paths)) {
          const pathData = paths[pathKey]
          for (const method of Object.keys(pathData)) {
            const operation = pathData[method]
            if (operation.tags && operation.tags.length > 0) {
              const tag = operation.tags[0]
              const operationId = operation.operationId
              const toRemove = `${tag}-`
              if (operationId.startsWith(toRemove)) {
                const newOperationId = operationId.substring(toRemove.length)
                operation.operationId = newOperationId
              }
            }
          }
        }

        await fs.promises.writeFile(
          filePath,
          JSON.stringify(openapiContent, null, 2),
        )
        console.log('File successfully modified')
      } catch (err) {
        console.error('Error:', err)
      }
    }

    const filePath = './openapi.json'
    modifyOpenAPIFile(filePath)

With that, the operation IDs would be renamed from things like `items-get_items` to just `get_items`, that way the client generator can generate simpler method names.

### Generate a TypeScript Client with the Preprocessed OpenAPI¶

Since the end result is now in an `openapi.json` file, you need to update your input location:

    npx @hey-api/openapi-ts -i ./openapi.json -o src/client

After generating the new client, you would now have **clean method names** , with all the **autocompletion** , **inline errors** , etc:

## Benefits¶

When using the automatically generated clients, you would get **autocompletion** for:

  * Methods.
  * Request payloads in the body, query parameters, etc.
  * Response payloads.

You would also have **inline errors** for everything.

And whenever you update the backend code, and **regenerate** the frontend, it would have any new _path operations_ available as methods, the old ones removed, and any other change would be reflected on the generated code. 🤓

This also means that if something changed, it will be **reflected** on the client code automatically. And if you **build** the client, it will error out if you have any **mismatch** in the data used.

So, you would **detect many errors** very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. ✨

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits

## Advanced Middleware - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/middleware/
**Depth**: 2

# Advanced Middleware¶

In the main tutorial you read how to add [Custom Middleware](../../tutorial/middleware/) to your application.

And then you also read how to handle [CORS with the `CORSMiddleware`](../../tutorial/cors/).

In this section we'll see how to use other middlewares.

## Adding ASGI middlewares¶

As **FastAPI** is based on Starlette and implements the ASGI specification, you can use any ASGI middleware.

A middleware doesn't have to be made for FastAPI or Starlette to work, as long as it follows the ASGI spec.

In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument.

So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like:

    from unicorn import UnicornMiddleware

    app = SomeASGIApp()

    new_app = UnicornMiddleware(app, some_config="rainbow")

But FastAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares handle server errors and custom exception handlers work properly.

For that, you use `app.add_middleware()` (as in the example for CORS).

    from fastapi import FastAPI
    from unicorn import UnicornMiddleware

    app = FastAPI()

    app.add_middleware(UnicornMiddleware, some_config="rainbow")

`app.add_middleware()` receives a middleware class as the first argument and any additional arguments to be passed to the middleware.

## Integrated middlewares¶

**FastAPI** includes several middlewares for common use cases, we'll see next how to use them.

Technical Details

For the next examples, you could also use `from starlette.middleware.something import SomethingMiddleware`.

**FastAPI** provides several middlewares in `fastapi.middleware` just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.

## `HTTPSRedirectMiddleware`¶

Enforces that all incoming requests must either be `https` or `wss`.

Any incoming request to `http` or `ws` will be redirected to the secure scheme instead.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware

    app = FastAPI()

    app.add_middleware(HTTPSRedirectMiddleware)

    @app.get("/")
    async def main():
        return {"message": "Hello World"}

## `TrustedHostMiddleware`¶

Enforces that all incoming requests have a correctly set `Host` header, in order to guard against HTTP Host Header attacks.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.middleware.trustedhost import TrustedHostMiddleware

    app = FastAPI()

    app.add_middleware(
        TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"]
    )

    @app.get("/")
    async def main():
        return {"message": "Hello World"}

The following arguments are supported:

  * `allowed_hosts` \- A list of domain names that should be allowed as hostnames. Wildcard domains such as `*.example.com` are supported for matching subdomains. To allow any hostname either use `allowed_hosts=["*"]` or omit the middleware.
  * `www_redirect` \- If set to True, requests to non-www versions of the allowed hosts will be redirected to their www counterparts. Defaults to `True`.

If an incoming request does not validate correctly then a `400` response will be sent.

## `GZipMiddleware`¶

Handles GZip responses for any request that includes `"gzip"` in the `Accept-Encoding` header.

The middleware will handle both standard and streaming responses.

Python 3.8+

    from fastapi import FastAPI
    from fastapi.middleware.gzip import GZipMiddleware

    app = FastAPI()

    app.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)

    @app.get("/")
    async def main():
        return "somebigcontent"

The following arguments are supported:

  * `minimum_size` \- Do not GZip responses that are smaller than this minimum size in bytes. Defaults to `500`.
  * `compresslevel` \- Used during GZip compression. It is an integer ranging from 1 to 9. Defaults to `9`. Lower value results in faster compression but larger file sizes, while higher value results in slower compression but smaller file sizes.

## Other middlewares¶

There are many other ASGI middlewares.

For example:

  * [Uvicorn's `ProxyHeadersMiddleware`](https://github.com/encode/uvicorn/blob/master/uvicorn/middleware/proxy_headers.py)
  * [MessagePack](https://github.com/florimondmanca/msgpack-asgi)

To see other available middlewares check [Starlette's Middleware docs](https://www.starlette.io/middleware/) and the [ASGI Awesome List](https://github.com/florimondmanca/awesome-asgi).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits

## OpenAPI Callbacks - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/openapi-callbacks/
**Depth**: 2

# OpenAPI Callbacks¶

You could create an API with a _path operation_ that could trigger a request to an _external API_ created by someone else (probably the same developer that would be _using_ your API).

The process that happens when your API app calls the _external API_ is named a "callback". Because the software that the external developer wrote sends a request to your API and then your API _calls back_ , sending a request to an _external API_ (that was probably created by the same developer).

In this case, you could want to document how that external API _should_ look like. What _path operation_ it should have, what body it should expect, what response it should return, etc.

## An app with callbacks¶

Let's see all this with an example.

Imagine you develop an app that allows creating invoices.

These invoices will have an `id`, `title` (optional), `customer`, and `total`.

The user of your API (an external developer) will create an invoice in your API with a POST request.

Then your API will (let's imagine):

  * Send the invoice to some customer of the external developer.
  * Collect the money.
  * Send a notification back to the API user (the external developer).
    * This will be done by sending a POST request (from _your API_) to some _external API_ provided by that external developer (this is the "callback").

## The normal **FastAPI** app¶

Let's first see how the normal API app would look like before adding the callback.

It will have a _path operation_ that will receive an `Invoice` body, and a query parameter `callback_url` that will contain the URL for the callback.

This part is pretty normal, most of the code is probably already familiar to you:

Python 3.8+

    from typing import Union

    from fastapi import APIRouter, FastAPI
    from pydantic import BaseModel, HttpUrl

    app = FastAPI()

    class Invoice(BaseModel):
        id: str
        title: Union[str, None] = None
        customer: str
        total: float

    class InvoiceEvent(BaseModel):
        description: str
        paid: bool

    class InvoiceEventReceived(BaseModel):
        ok: bool

    invoices_callback_router = APIRouter()

    @invoices_callback_router.post(
        "{$callback_url}/invoices/{$request.body.id}", response_model=InvoiceEventReceived
    )
    def invoice_notification(body: InvoiceEvent):
        pass

    @app.post("/invoices/", callbacks=invoices_callback_router.routes)
    def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):
        """
        Create an invoice.

        This will (let's imagine) let the API user (some external developer) create an
        invoice.

        And this path operation will:

        * Send the invoice to the client.
        * Collect the money from the client.
        * Send a notification back to the API user (the external developer), as a callback.
            * At this point is that the API will somehow send a POST request to the
                external API with the notification of the invoice event
                (e.g. "payment successful").
        """
        # Send the invoice, collect the money, send the notification (the callback)
        return {"msg": "Invoice received"}

Tip

The `callback_url` query parameter uses a Pydantic [Url](https://docs.pydantic.dev/latest/api/networks/) type.

The only new thing is the `callbacks=invoices_callback_router.routes` as an argument to the _path operation decorator_. We'll see what that is next.

## Documenting the callback¶

The actual callback code will depend heavily on your own API app.

And it will probably vary a lot from one app to the next.

It could be just one or two lines of code, like:

    callback_url = "https://example.com/api/v1/invoices/events/"
    httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})

But possibly the most important part of the callback is making sure that your API user (the external developer) implements the _external API_ correctly, according to the data that _your API_ is going to send in the request body of the callback, etc.

So, what we will do next is add the code to document how that _external API_ should look like to receive the callback from _your API_.

That documentation will show up in the Swagger UI at `/docs` in your API, and it will let external developers know how to build the _external API_.

This example doesn't implement the callback itself (that could be just a line of code), only the documentation part.

Tip

The actual callback is just an HTTP request.

When implementing the callback yourself, you could use something like [HTTPX](https://www.python-httpx.org) or [Requests](https://requests.readthedocs.io/).

## Write the callback documentation code¶

This code won't be executed in your app, we only need it to _document_ how that _external API_ should look like.

But, you already know how to easily create automatic documentation for an API with **FastAPI**.

So we are going to use that same knowledge to document how the _external API_ should look like... by creating the _path operation(s)_ that the external API should implement (the ones your API will call).

Tip

When writing the code to document a callback, it might be useful to imagine that you are that _external developer_. And that you are currently implementing the _external API_ , not _your API_.

Temporarily adopting this point of view (of the _external developer_) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that _external API_.

### Create a callback `APIRouter`¶

First create a new `APIRouter` that will contain one or more callbacks.

Python 3.8+

    from typing import Union

    from fastapi import APIRouter, FastAPI
    from pydantic import BaseModel, HttpUrl

    app = FastAPI()

    class Invoice(BaseModel):
        id: str
        title: Union[str, None] = None
        customer: str
        total: float

    class InvoiceEvent(BaseModel):
        description: str
        paid: bool

    class InvoiceEventReceived(BaseModel):
        ok: bool

    invoices_callback_router = APIRouter()

    @invoices_callback_router.post(
        "{$callback_url}/invoices/{$request.body.id}", response_model=InvoiceEventReceived
    )
    def invoice_notification(body: InvoiceEvent):
        pass

    @app.post("/invoices/", callbacks=invoices_callback_router.routes)
    def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):
        """
        Create an invoice.

        This will (let's imagine) let the API user (some external developer) create an
        invoice.

        And this path operation will:

        * Send the invoice to the client.
        * Collect the money from the client.
        * Send a notification back to the API user (the external developer), as a callback.
            * At this point is that the API will somehow send a POST request to the
                external API with the notification of the invoice event
                (e.g. "payment successful").
        """
        # Send the invoice, collect the money, send the notification (the callback)
        return {"msg": "Invoice received"}

### Create the callback _path operation_¶

To create the callback _path operation_ use the same `APIRouter` you created above.

It should look just like a normal FastAPI _path operation_ :

  * It should probably have a declaration of the body it should receive, e.g. `body: InvoiceEvent`.
  * And it could also have a declaration of the response it should return, e.g. `response_model=InvoiceEventReceived`.

Python 3.8+

    from typing import Union

    from fastapi import APIRouter, FastAPI
    from pydantic import BaseModel, HttpUrl

    app = FastAPI()

    class Invoice(BaseModel):
        id: str
        title: Union[str, None] = None
        customer: str
        total: float

    class InvoiceEvent(BaseModel):
        description: str
        paid: bool

    class InvoiceEventReceived(BaseModel):
        ok: bool

    invoices_callback_router = APIRouter()

    @invoices_callback_router.post(
        "{$callback_url}/invoices/{$request.body.id}", response_model=InvoiceEventReceived
    )
    def invoice_notification(body: InvoiceEvent):
        pass

    @app.post("/invoices/", callbacks=invoices_callback_router.routes)
    def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):
        """
        Create an invoice.

        This will (let's imagine) let the API user (some external developer) create an
        invoice.

        And this path operation will:

        * Send the invoice to the client.
        * Collect the money from the client.
        * Send a notification back to the API user (the external developer), as a callback.
            * At this point is that the API will somehow send a POST request to the
                external API with the notification of the invoice event
                (e.g. "payment successful").
        """
        # Send the invoice, collect the money, send the notification (the callback)
        return {"msg": "Invoice received"}

There are 2 main differences from a normal _path operation_ :

  * It doesn't need to have any actual code, because your app will never call this code. It's only used to document the _external API_. So, the function could just have `pass`.
  * The _path_ can contain an [OpenAPI 3 expression](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression) (see more below) where it can use variables with parameters and parts of the original request sent to _your API_.

### The callback path expression¶

The callback _path_ can have an [OpenAPI 3 expression](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression) that can contain parts of the original request sent to _your API_.

In this case, it's the `str`:

    "{$callback_url}/invoices/{$request.body.id}"

So, if your API user (the external developer) sends a request to _your API_ to:

    https://yourapi.com/invoices/?callback_url=https://www.external.org/events

with a JSON body of:

    {
        "id": "2expen51ve",
        "customer": "Mr. Richie Rich",
        "total": "9999"
    }

then _your API_ will process the invoice, and at some point later, send a callback request to the `callback_url` (the _external API_):

    https://www.external.org/events/invoices/2expen51ve

with a JSON body containing something like:

    {
        "description": "Payment celebration",
        "paid": true
    }

and it would expect a response from that _external API_ with a JSON body like:

    {
        "ok": true
    }

Tip

Notice how the callback URL used contains the URL received as a query parameter in `callback_url` (`https://www.external.org/events`) and also the invoice `id` from inside of the JSON body (`2expen51ve`).

### Add the callback router¶

At this point you have the _callback path operation(s)_ needed (the one(s) that the _external developer_ should implement in the _external API_) in the callback router you created above.

Now use the parameter `callbacks` in _your API's path operation decorator_ to pass the attribute `.routes` (that's actually just a `list` of routes/_path operations_) from that callback router:

Python 3.8+

    from typing import Union

    from fastapi import APIRouter, FastAPI
    from pydantic import BaseModel, HttpUrl

    app = FastAPI()

    class Invoice(BaseModel):
        id: str
        title: Union[str, None] = None
        customer: str
        total: float

    class InvoiceEvent(BaseModel):
        description: str
        paid: bool

    class InvoiceEventReceived(BaseModel):
        ok: bool

    invoices_callback_router = APIRouter()

    @invoices_callback_router.post(
        "{$callback_url}/invoices/{$request.body.id}", response_model=InvoiceEventReceived
    )
    def invoice_notification(body: InvoiceEvent):
        pass

    @app.post("/invoices/", callbacks=invoices_callback_router.routes)
    def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):
        """
        Create an invoice.

        This will (let's imagine) let the API user (some external developer) create an
        invoice.

        And this path operation will:

        * Send the invoice to the client.
        * Collect the money from the client.
        * Send a notification back to the API user (the external developer), as a callback.
            * At this point is that the API will somehow send a POST request to the
                external API with the notification of the invoice event
                (e.g. "payment successful").
        """
        # Send the invoice, collect the money, send the notification (the callback)
        return {"msg": "Invoice received"}

Tip

Notice that you are not passing the router itself (`invoices_callback_router`) to `callback=`, but the attribute `.routes`, as in `invoices_callback_router.routes`.

### Check the docs¶

Now you can start your app and go to .

You will see your docs including a "Callbacks" section for your _path operation_ that shows how the _external API_ should look like:

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits

## OpenAPI Webhooks - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/openapi-webhooks/
**Depth**: 2

# OpenAPI Webhooks¶

There are cases where you want to tell your API **users** that your app could call _their_ app (sending a request) with some data, normally to **notify** of some type of **event**.

This means that instead of the normal process of your users sending requests to your API, it's **your API** (or your app) that could **send requests to their system** (to their API, their app).

This is normally called a **webhook**.

## Webhooks steps¶

The process normally is that **you define** in your code what is the message that you will send, the **body of the request**.

You also define in some way at which **moments** your app will send those requests or events.

And **your users** define in some way (for example in a web dashboard somewhere) the **URL** where your app should send those requests.

All the **logic** about how to register the URLs for webhooks and the code to actually send those requests is up to you. You write it however you want to in **your own code**.

## Documenting webhooks with **FastAPI** and OpenAPI¶

With **FastAPI** , using OpenAPI, you can define the names of these webhooks, the types of HTTP operations that your app can send (e.g. `POST`, `PUT`, etc.) and the request **bodies** that your app would send.

This can make it a lot easier for your users to **implement their APIs** to receive your **webhook** requests, they might even be able to autogenerate some of their own API code.

Info

Webhooks are available in OpenAPI 3.1.0 and above, supported by FastAPI `0.99.0` and above.

## An app with webhooks¶

When you create a **FastAPI** application, there is a `webhooks` attribute that you can use to define _webhooks_ , the same way you would define _path operations_ , for example with `@app.webhooks.post()`.

Python 3.8+

    from datetime import datetime

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Subscription(BaseModel):
        username: str
        monthly_fee: float
        start_date: datetime

    @app.webhooks.post("new-subscription")
    def new_subscription(body: Subscription):
        """
        When a new user subscribes to your service we'll send you a POST request with this
        data to the URL that you register for the event `new-subscription` in the dashboard.
        """

    @app.get("/users/")
    def read_users():
        return ["Rick", "Morty"]

The webhooks that you define will end up in the **OpenAPI** schema and the automatic **docs UI**.

Info

The `app.webhooks` object is actually just an `APIRouter`, the same type you would use when structuring your app with multiple files.

Notice that with webhooks you are actually not declaring a _path_ (like `/items/`), the text you pass there is just an **identifier** of the webhook (the name of the event), for example in `@app.webhooks.post("new-subscription")`, the webhook name is `new-subscription`.

This is because it is expected that **your users** would define the actual **URL path** where they want to receive the webhook request in some other way (e.g. a web dashboard).

### Check the docs¶

Now you can start your app and go to .

You will see your docs have the normal _path operations_ and now also some **webhooks** :

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits

## Return a Response Directly - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/response-directly/
**Depth**: 2

# Return a Response Directly¶

When you create a **FastAPI** _path operation_ you can normally return any data from it: a `dict`, a `list`, a Pydantic model, a database model, etc.

By default, **FastAPI** would automatically convert that return value to JSON using the `jsonable_encoder` explained in [JSON Compatible Encoder](../../tutorial/encoder/).

Then, behind the scenes, it would put that JSON-compatible data (e.g. a `dict`) inside of a `JSONResponse` that would be used to send the response to the client.

But you can return a `JSONResponse` directly from your _path operations_.

It might be useful, for example, to return custom headers or cookies.

## Return a `Response`¶

In fact, you can return any `Response` or any sub-class of it.

Tip

`JSONResponse` itself is a sub-class of `Response`.

And when you return a `Response`, **FastAPI** will pass it directly.

It won't do any data conversion with Pydantic models, it won't convert the contents to any type, etc.

This gives you a lot of flexibility. You can return any data type, override any data declaration or validation, etc.

## Using the `jsonable_encoder` in a `Response`¶

Because **FastAPI** doesn't make any changes to a `Response` you return, you have to make sure its contents are ready for it.

For example, you cannot put a Pydantic model in a `JSONResponse` without first converting it to a `dict` with all the data types (like `datetime`, `UUID`, etc) converted to JSON-compatible types.

For those cases, you can use the `jsonable_encoder` to convert your data before passing it to a response:

Python 3.8+

    from datetime import datetime
    from typing import Union

    from fastapi import FastAPI
    from fastapi.encoders import jsonable_encoder
    from fastapi.responses import JSONResponse
    from pydantic import BaseModel

    class Item(BaseModel):
        title: str
        timestamp: datetime
        description: Union[str, None] = None

    app = FastAPI()

    @app.put("/items/{id}")
    def update_item(id: str, item: Item):
        json_compatible_item_data = jsonable_encoder(item)
        return JSONResponse(content=json_compatible_item_data)

Technical Details

You could also use `from starlette.responses import JSONResponse`.

**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette.

## Returning a custom `Response`¶

The example above shows all the parts you need, but it's not very useful yet, as you could have just returned the `item` directly, and **FastAPI** would put it in a `JSONResponse` for you, converting it to a `dict`, etc. All that by default.

Now, let's see how you could use that to return a custom response.

Let's say that you want to return an [XML](https://en.wikipedia.org/wiki/XML) response.

You could put your XML content in a string, put that in a `Response`, and return it:

Python 3.8+

    from fastapi import FastAPI, Response

    app = FastAPI()

    @app.get("/legacy/")
    def get_legacy_data():
        data = """

            Apply shampoo here.

            You'll have to use soap here.

        """
        return Response(content=data, media_type="application/xml")

## Notes¶

When you return a `Response` directly its data is not validated, converted (serialized), or documented automatically.

But you can still document it as described in [Additional Responses in OpenAPI](../additional-responses/).

You can see in later sections how to use/declare these custom `Response`s while still having automatic data conversion, documentation, etc.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## History, Design and Future - FastAPI

**URL**: https://fastapi.tiangolo.com/history-design-future/
**Depth**: 1

# History, Design and Future¶

Some time ago, [a **FastAPI** user asked](https://github.com/fastapi/fastapi/issues/3#issuecomment-454956920):

> What’s the history of this project? It seems to have come from nowhere to awesome in a few weeks [...]

Here's a little bit of that history.

## Alternatives¶

I have been creating APIs with complex requirements for several years (Machine Learning, distributed systems, asynchronous jobs, NoSQL databases, etc), leading several teams of developers.

As part of that, I needed to investigate, test and use many alternatives.

The history of **FastAPI** is in great part the history of its predecessors.

As said in the section [Alternatives](../alternatives/):

> **FastAPI** wouldn't exist if not for the previous work of others.
>
> There have been many tools created before that have helped inspire its creation.
>
> I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by **FastAPI** using many different frameworks, plug-ins, and tools.
>
> But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).

## Investigation¶

By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with.

For example, it was clear that ideally it should be based on standard Python type hints.

Also, the best approach was to use already existing standards.

So, before even starting to code **FastAPI** , I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences.

## Design¶

Then I spent some time designing the developer "API" I wanted to have as a user (as a developer using FastAPI).

I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors.

By the last [Python Developer Survey](https://www.jetbrains.com/research/python-developers-survey-2018/#development-tools), that covers about 80% of the users.

It means that **FastAPI** was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors.

That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc.

All in a way that provided the best development experience for all the developers.

## Requirements¶

After testing several alternatives, I decided that I was going to use [**Pydantic**](https://docs.pydantic.dev/) for its advantages.

Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors.

During the development, I also contributed to [**Starlette**](https://www.starlette.io/), the other key requirement.

## Development¶

By the time I started creating **FastAPI** itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh.

## Future¶

By this point, it's already clear that **FastAPI** with its ideas is being useful for many people.

It is being chosen over previous alternatives for suiting many use cases better.

Many developers and teams already depend on **FastAPI** for their projects (including me and my team).

But still, there are many improvements and features to come.

**FastAPI** has a great future ahead.

And [your help](../help-fastapi/) is greatly appreciated.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## Additional Status Codes - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/additional-status-codes/
**Depth**: 2

# Additional Status Codes¶

By default, **FastAPI** will return the responses using a `JSONResponse`, putting the content you return from your _path operation_ inside of that `JSONResponse`.

It will use the default status code or the one you set in your _path operation_.

## Additional status codes¶

If you want to return additional status codes apart from the main one, you can do that by returning a `Response` directly, like a `JSONResponse`, and set the additional status code directly.

For example, let's say that you want to have a _path operation_ that allows to update items, and returns HTTP status codes of 200 "OK" when successful.

But you also want it to accept new items. And when the items didn't exist before, it creates them, and returns an HTTP status code of 201 "Created".

To achieve that, import `JSONResponse`, and return your content there directly, setting the `status_code` that you want:

Python 3.10+

    from typing import Annotated

    from fastapi import Body, FastAPI, status
    from fastapi.responses import JSONResponse

    app = FastAPI()

    items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}

    @app.put("/items/{item_id}")
    async def upsert_item(
        item_id: str,
        name: Annotated[str | None, Body()] = None,
        size: Annotated[int | None, Body()] = None,
    ):
        if item_id in items:
            item = items[item_id]
            item["name"] = name
            item["size"] = size
            return item
        else:
            item = {"name": name, "size": size}
            items[item_id] = item
            return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

🤓 Other versions and variants

Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated

    from typing import Annotated, Union

    from fastapi import Body, FastAPI, status
    from fastapi.responses import JSONResponse

    app = FastAPI()

    items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}

    @app.put("/items/{item_id}")
    async def upsert_item(
        item_id: str,
        name: Annotated[Union[str, None], Body()] = None,
        size: Annotated[Union[int, None], Body()] = None,
    ):
        if item_id in items:
            item = items[item_id]
            item["name"] = name
            item["size"] = size
            return item
        else:
            item = {"name": name, "size": size}
            items[item_id] = item
            return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

    from typing import Union

    from fastapi import Body, FastAPI, status
    from fastapi.responses import JSONResponse
    from typing_extensions import Annotated

    app = FastAPI()

    items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}

    @app.put("/items/{item_id}")
    async def upsert_item(
        item_id: str,
        name: Annotated[Union[str, None], Body()] = None,
        size: Annotated[Union[int, None], Body()] = None,
    ):
        if item_id in items:
            item = items[item_id]
            item["name"] = name
            item["size"] = size
            return item
        else:
            item = {"name": name, "size": size}
            items[item_id] = item
            return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

Tip

Prefer to use the `Annotated` version if possible.

    from fastapi import Body, FastAPI, status
    from fastapi.responses import JSONResponse

    app = FastAPI()

    items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}

    @app.put("/items/{item_id}")
    async def upsert_item(
        item_id: str,
        name: str | None = Body(default=None),
        size: int | None = Body(default=None),
    ):
        if item_id in items:
            item = items[item_id]
            item["name"] = name
            item["size"] = size
            return item
        else:
            item = {"name": name, "size": size}
            items[item_id] = item
            return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

Tip

Prefer to use the `Annotated` version if possible.

    from typing import Union

    from fastapi import Body, FastAPI, status
    from fastapi.responses import JSONResponse

    app = FastAPI()

    items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}

    @app.put("/items/{item_id}")
    async def upsert_item(
        item_id: str,
        name: Union[str, None] = Body(default=None),
        size: Union[int, None] = Body(default=None),
    ):
        if item_id in items:
            item = items[item_id]
            item["name"] = name
            item["size"] = size
            return item
        else:
            item = {"name": name, "size": size}
            items[item_id] = item
            return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

Warning

When you return a `Response` directly, like in the example above, it will be returned directly.

It won't be serialized with a model, etc.

Make sure it has the data you want it to have, and that the values are valid JSON (if you are using `JSONResponse`).

Technical Details

You could also use `from starlette.responses import JSONResponse`.

**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with `status`.

## OpenAPI and API docs¶

If you return additional status codes and responses directly, they won't be included in the OpenAPI schema (the API docs), because FastAPI doesn't have a way to know beforehand what you are going to return.

But you can document that in your code, using: [Additional Responses](../additional-responses/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Async Tests - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/async-tests/
**Depth**: 2

# Async Tests¶

You have already seen how to test your **FastAPI** applications using the provided `TestClient`. Up to now, you have only seen how to write synchronous tests, without using `async` functions.

Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your FastAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library.

Let's look at how we can make that work.

## pytest.mark.anyio¶

If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. AnyIO provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously.

## HTTPX¶

Even if your **FastAPI** application uses normal `def` functions instead of `async def`, it is still an `async` application underneath.

The `TestClient` does some magic inside to call the asynchronous FastAPI application in your normal `def` test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the `TestClient` inside our test functions.

The `TestClient` is based on [HTTPX](https://www.python-httpx.org), and luckily, we can use it directly to test the API.

## Example¶

For a simple example, let's consider a file structure similar to the one described in [Bigger Applications](../../tutorial/bigger-applications/) and [Testing](../../tutorial/testing/):

    .
    ├── app
    │   ├── __init__.py
    │   ├── main.py
    │   └── test_main.py

The file `main.py` would have:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    async def root():
        return {"message": "Tomato"}

The file `test_main.py` would have the tests for `main.py`, it could look like this now:

Python 3.8+

    import pytest
    from httpx import ASGITransport, AsyncClient

    from .main import app

    @pytest.mark.anyio
    async def test_root():
        async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://test"
        ) as ac:
            response = await ac.get("/")
        assert response.status_code == 200
        assert response.json() == {"message": "Tomato"}

## Run it¶

You can run your tests as usual via:

    $ pytest

    ---> 100%

## In Detail¶

The marker `@pytest.mark.anyio` tells pytest that this test function should be called asynchronously:

Python 3.8+

    import pytest
    from httpx import ASGITransport, AsyncClient

    from .main import app

    @pytest.mark.anyio
    async def test_root():
        async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://test"
        ) as ac:
            response = await ac.get("/")
        assert response.status_code == 200
        assert response.json() == {"message": "Tomato"}

Tip

Note that the test function is now `async def` instead of just `def` as before when using the `TestClient`.

Then we can create an `AsyncClient` with the app, and send async requests to it, using `await`.

Python 3.8+

    import pytest
    from httpx import ASGITransport, AsyncClient

    from .main import app

    @pytest.mark.anyio
    async def test_root():
        async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://test"
        ) as ac:
            response = await ac.get("/")
        assert response.status_code == 200
        assert response.json() == {"message": "Tomato"}

This is the equivalent to:

    response = client.get('/')

...that we used to make our requests with the `TestClient`.

Tip

Note that we're using async/await with the new `AsyncClient` \- the request is asynchronous.

Warning

If your application relies on lifespan events, the `AsyncClient` won't trigger these events. To ensure they are triggered, use `LifespanManager` from [florimondmanca/asgi-lifespan](https://github.com/florimondmanca/asgi-lifespan#usage).

## Other Asynchronous Function Calls¶

As the testing function is now asynchronous, you can now also call (and `await`) other `async` functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code.

Tip

If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests (e.g. when using [MongoDB's MotorClient](https://stackoverflow.com/questions/41584243/runtimeerror-task-attached-to-a-different-loop)), remember to instantiate objects that need an event loop only within async functions, e.g. an `@app.on_event("startup")` callback.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Behind a Proxy - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/behind-a-proxy/
**Depth**: 2

# Behind a Proxy¶

In many situations, you would use a **proxy** like Traefik or Nginx in front of your FastAPI app.

These proxies could handle HTTPS certificates and other things.

A **proxy** in front of your application would normally set some headers on the fly before sending the requests to your **server** to let the server know that the request was **forwarded** by the proxy, letting it know the original (public) URL, including the domain, that it is using HTTPS, etc.

The **server** program (for example **Uvicorn** via **FastAPI CLI**) is capable of interpreting these headers, and then passing that information to your application.

But for security, as the server doesn't know it is behind a trusted proxy, it won't interpret those headers.

Technical Details

The proxy headers are:

  * [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/X-Forwarded-For)
  * [X-Forwarded-Proto](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/X-Forwarded-Proto)
  * [X-Forwarded-Host](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/X-Forwarded-Host)

You can start FastAPI CLI with the _CLI Option_ `--forwarded-allow-ips` and pass the IP addresses that should be trusted to read those forwarded headers.

If you set it to `--forwarded-allow-ips="*"` it would trust all the incoming IPs.

If your **server** is behind a trusted **proxy** and only the proxy talks to it, this would make it accept whatever is the IP of that **proxy**.

    $ fastapi run --forwarded-allow-ips="*"

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

### Redirects with HTTPS¶

For example, let's say you define a _path operation_ `/items/`:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/items/")
    def read_items():
        return ["plumbus", "portal gun"]

If the client tries to go to `/items`, by default, it would be redirected to `/items/`.

But before setting the _CLI Option_ `--forwarded-allow-ips` it could redirect to `http://localhost:8000/items/`.

But maybe your application is hosted at `https://mysuperapp.com`, and the redirection should be to `https://mysuperapp.com/items/`.

By setting `--proxy-headers` now FastAPI would be able to redirect to the right location. 😎

    https://mysuperapp.com/items/

Tip

If you want to

Here's a visual representation of how the **proxy** adds forwarded headers between the client and the **application server** :

    sequenceDiagram
        participant Client
        participant Proxy as Proxy/Load Balancer
        participant Server as FastAPI Server

        Client->>Proxy: HTTPS RequestHost: mysuperapp.comPath: /items

        Note over Proxy: Proxy adds forwarded headers

        Proxy->>Server: HTTP RequestX-Forwarded-For: [client IP]X-Forwarded-Proto: httpsX-Forwarded-Host: mysuperapp.comPath: /items

        Note over Server: Server interprets headers(if --forwarded-allow-ips is set)

        Server->>Proxy: HTTP Responsewith correct HTTPS URLs

        Proxy->>Client: HTTPS Response

The **proxy** intercepts the original client request and adds the special _forwarded_ headers (`X-Forwarded-*`) before passing the request to the **application server**.

These headers preserve information about the original request that would otherwise be lost:

  * **X-Forwarded-For** : The original client's IP address
  * **X-Forwarded-Proto** : The original protocol (`https`)
  * **X-Forwarded-Host** : The original host (`mysuperapp.com`)

When **FastAPI CLI** is configured with `--forwarded-allow-ips`, it trusts these headers and uses them, for example to generate the correct URLs in redirects.

## Proxy with a stripped path prefix¶

You could have a proxy that adds a path prefix to your application.

In these cases you can use `root_path` to configure your application.

The `root_path` is a mechanism provided by the ASGI specification (that FastAPI is built on, through Starlette).

The `root_path` is used to handle these specific cases.

And it's also used internally when mounting sub-applications.

Having a proxy with a stripped path prefix, in this case, means that you could declare a path at `/app` in your code, but then, you add a layer on top (the proxy) that would put your **FastAPI** application under a path like `/api/v1`.

In this case, the original path `/app` would actually be served at `/api/v1/app`.

Even though all your code is written assuming there's just `/app`.

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI()

    @app.get("/app")
    def read_main(request: Request):
        return {"message": "Hello World", "root_path": request.scope.get("root_path")}

And the proxy would be **"stripping"** the **path prefix** on the fly before transmitting the request to the app server (probably Uvicorn via FastAPI CLI), keeping your application convinced that it is being served at `/app`, so that you don't have to update all your code to include the prefix `/api/v1`.

Up to here, everything would work as normally.

But then, when you open the integrated docs UI (the frontend), it would expect to get the OpenAPI schema at `/openapi.json`, instead of `/api/v1/openapi.json`.

So, the frontend (that runs in the browser) would try to reach `/openapi.json` and wouldn't be able to get the OpenAPI schema.

Because we have a proxy with a path prefix of `/api/v1` for our app, the frontend needs to fetch the OpenAPI schema at `/api/v1/openapi.json`.

    graph LR

    browser("Browser")
    proxy["Proxy on http://0.0.0.0:9999/api/v1/app"]
    server["Server on http://127.0.0.1:8000/app"]

    browser --> proxy
    proxy --> server

Tip

The IP `0.0.0.0` is commonly used to mean that the program listens on all the IPs available in that machine/server.

The docs UI would also need the OpenAPI schema to declare that this API `server` is located at `/api/v1` (behind the proxy). For example:

    {
        "openapi": "3.1.0",
        // More stuff here
        "servers": [
            {
                "url": "/api/v1"
            }
        ],
        "paths": {
                // More stuff here
        }
    }

In this example, the "Proxy" could be something like **Traefik**. And the server would be something like FastAPI CLI with **Uvicorn** , running your FastAPI application.

### Providing the `root_path`¶

To achieve this, you can use the command line option `--root-path` like:

    $ fastapi run main.py --forwarded-allow-ips="*" --root-path /api/v1

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

If you use Hypercorn, it also has the option `--root-path`.

Technical Details

The ASGI specification defines a `root_path` for this use case.

And the `--root-path` command line option provides that `root_path`.

### Checking the current `root_path`¶

You can get the current `root_path` used by your application for each request, it is part of the `scope` dictionary (that's part of the ASGI spec).

Here we are including it in the message just for demonstration purposes.

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI()

    @app.get("/app")
    def read_main(request: Request):
        return {"message": "Hello World", "root_path": request.scope.get("root_path")}

Then, if you start Uvicorn with:

    $ fastapi run main.py --forwarded-allow-ips="*" --root-path /api/v1

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

The response would be something like:

    {
        "message": "Hello World",
        "root_path": "/api/v1"
    }

### Setting the `root_path` in the FastAPI app¶

Alternatively, if you don't have a way to provide a command line option like `--root-path` or equivalent, you can set the `root_path` parameter when creating your FastAPI app:

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI(root_path="/api/v1")

    @app.get("/app")
    def read_main(request: Request):
        return {"message": "Hello World", "root_path": request.scope.get("root_path")}

Passing the `root_path` to `FastAPI` would be the equivalent of passing the `--root-path` command line option to Uvicorn or Hypercorn.

### About `root_path`¶

Keep in mind that the server (Uvicorn) won't use that `root_path` for anything else than passing it to the app.

But if you go with your browser to [http://127.0.0.1:8000/app](http://127.0.0.1:8000) you will see the normal response:

    {
        "message": "Hello World",
        "root_path": "/api/v1"
    }

So, it won't expect to be accessed at `http://127.0.0.1:8000/api/v1/app`.

Uvicorn will expect the proxy to access Uvicorn at `http://127.0.0.1:8000/app`, and then it would be the proxy's responsibility to add the extra `/api/v1` prefix on top.

## About proxies with a stripped path prefix¶

Keep in mind that a proxy with stripped path prefix is only one of the ways to configure it.

Probably in many cases the default will be that the proxy doesn't have a stripped path prefix.

In a case like that (without a stripped path prefix), the proxy would listen on something like `https://myawesomeapp.com`, and then if the browser goes to `https://myawesomeapp.com/api/v1/app` and your server (e.g. Uvicorn) listens on `http://127.0.0.1:8000` the proxy (without a stripped path prefix) would access Uvicorn at the same path: `http://127.0.0.1:8000/api/v1/app`.

## Testing locally with Traefik¶

You can easily run the experiment locally with a stripped path prefix using [Traefik](https://docs.traefik.io/).

[Download Traefik](https://github.com/containous/traefik/releases), it's a single binary, you can extract the compressed file and run it directly from the terminal.

Then create a file `traefik.toml` with:

    [entryPoints]
      [entryPoints.http]
        address = ":9999"

    [providers]
      [providers.file]
        filename = "routes.toml"

This tells Traefik to listen on port 9999 and to use another file `routes.toml`.

Tip

We are using port 9999 instead of the standard HTTP port 80 so that you don't have to run it with admin (`sudo`) privileges.

Now create that other file `routes.toml`:

    [http]
      [http.middlewares]

        [http.middlewares.api-stripprefix.stripPrefix]
          prefixes = ["/api/v1"]

      [http.routers]

        [http.routers.app-http]
          entryPoints = ["http"]
          service = "app"
          rule = "PathPrefix(`/api/v1`)"
          middlewares = ["api-stripprefix"]

      [http.services]

        [http.services.app]
          [http.services.app.loadBalancer]
            [[http.services.app.loadBalancer.servers]]
              url = "http://127.0.0.1:8000"

This file configures Traefik to use the path prefix `/api/v1`.

And then Traefik will redirect its requests to your Uvicorn running on `http://127.0.0.1:8000`.

Now start Traefik:

    $ ./traefik --configFile=traefik.toml

    INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml

And now start your app, using the `--root-path` option:

    $ fastapi run main.py --forwarded-allow-ips="*" --root-path /api/v1

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

### Check the responses¶

Now, if you go to the URL with the port for Uvicorn: , you will see the normal response:

    {
        "message": "Hello World",
        "root_path": "/api/v1"
    }

Tip

Notice that even though you are accessing it at `http://127.0.0.1:8000/app` it shows the `root_path` of `/api/v1`, taken from the option `--root-path`.

And now open the URL with the port for Traefik, including the path prefix: .

We get the same response:

    {
        "message": "Hello World",
        "root_path": "/api/v1"
    }

but this time at the URL with the prefix path provided by the proxy: `/api/v1`.

Of course, the idea here is that everyone would access the app through the proxy, so the version with the path prefix `/api/v1` is the "correct" one.

And the version without the path prefix (`http://127.0.0.1:8000/app`), provided by Uvicorn directly, would be exclusively for the _proxy_ (Traefik) to access it.

That demonstrates how the Proxy (Traefik) uses the path prefix and how the server (Uvicorn) uses the `root_path` from the option `--root-path`.

### Check the docs UI¶

But here's the fun part. ✨

The "official" way to access the app would be through the proxy with the path prefix that we defined. So, as we would expect, if you try the docs UI served by Uvicorn directly, without the path prefix in the URL, it won't work, because it expects to be accessed through the proxy.

You can check it at :

But if we access the docs UI at the "official" URL using the proxy with port `9999`, at `/api/v1/docs`, it works correctly! 🎉

You can check it at :

Right as we wanted it. ✔️

This is because FastAPI uses this `root_path` to create the default `server` in OpenAPI with the URL provided by `root_path`.

## Additional servers¶

Warning

This is a more advanced use case. Feel free to skip it.

By default, **FastAPI** will create a `server` in the OpenAPI schema with the URL for the `root_path`.

But you can also provide other alternative `servers`, for example if you want _the same_ docs UI to interact with both a staging and a production environment.

If you pass a custom list of `servers` and there's a `root_path` (because your API lives behind a proxy), **FastAPI** will insert a "server" with this `root_path` at the beginning of the list.

For example:

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI(
        servers=[
            {"url": "https://stag.example.com", "description": "Staging environment"},
            {"url": "https://prod.example.com", "description": "Production environment"},
        ],
        root_path="/api/v1",
    )

    @app.get("/app")
    def read_main(request: Request):
        return {"message": "Hello World", "root_path": request.scope.get("root_path")}

Will generate an OpenAPI schema like:

    {
        "openapi": "3.1.0",
        // More stuff here
        "servers": [
            {
                "url": "/api/v1"
            },
            {
                "url": "https://stag.example.com",
                "description": "Staging environment"
            },
            {
                "url": "https://prod.example.com",
                "description": "Production environment"
            }
        ],
        "paths": {
                // More stuff here
        }
    }

Tip

Notice the auto-generated server with a `url` value of `/api/v1`, taken from the `root_path`.

In the docs UI at  it would look like:

Tip

The docs UI will interact with the server that you select.

### Disable automatic server from `root_path`¶

If you don't want **FastAPI** to include an automatic server using the `root_path`, you can use the parameter `root_path_in_servers=False`:

Python 3.8+

    from fastapi import FastAPI, Request

    app = FastAPI(
        servers=[
            {"url": "https://stag.example.com", "description": "Staging environment"},
            {"url": "https://prod.example.com", "description": "Production environment"},
        ],
        root_path="/api/v1",
        root_path_in_servers=False,
    )

    @app.get("/app")
    def read_main(request: Request):
        return {"message": "Hello World", "root_path": request.scope.get("root_path")}

and then it won't include it in the OpenAPI schema.

## Mounting a sub-application¶

If you need to mount a sub-application (as described in [Sub Applications - Mounts](../sub-applications/)) while also using a proxy with `root_path`, you can do it normally, as you would expect.

FastAPI will internally use the `root_path` smartly, so it will just work. ✨

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface

## Lifespan Events - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/events/
**Depth**: 2

# Lifespan Events¶

You can define logic (code) that should be executed before the application **starts up**. This means that this code will be executed **once** , **before** the application **starts receiving requests**.

The same way, you can define logic (code) that should be executed when the application is **shutting down**. In this case, this code will be executed **once** , **after** having handled possibly **many requests**.

Because this code is executed before the application **starts** taking requests, and right after it **finishes** handling requests, it covers the whole application **lifespan** (the word "lifespan" will be important in a second 😉).

This can be very useful for setting up **resources** that you need to use for the whole app, and that are **shared** among requests, and/or that you need to **clean up** afterwards. For example, a database connection pool, or loading a shared machine learning model.

## Use Case¶

Let's start with an example **use case** and then see how to solve it with this.

Let's imagine that you have some **machine learning models** that you want to use to handle requests. 🤖

The same models are shared among requests, so, it's not one model per request, or one per user or something similar.

Let's imagine that loading the model can **take quite some time** , because it has to read a lot of **data from disk**. So you don't want to do it for every request.

You could load it at the top level of the module/file, but that would also mean that it would **load the model** even if you are just running a simple automated test, then that test would be **slow** because it would have to wait for the model to load before being able to run an independent part of the code.

That's what we'll solve, let's load the model before the requests are handled, but only right before the application starts receiving requests, not while the code is being loaded.

## Lifespan¶

You can define this _startup_ and _shutdown_ logic using the `lifespan` parameter of the `FastAPI` app, and a "context manager" (I'll show you what that is in a second).

Let's start with an example and then see it in detail.

We create an async function `lifespan()` with `yield` like this:

Python 3.8+

    from contextlib import asynccontextmanager

    from fastapi import FastAPI

    def fake_answer_to_everything_ml_model(x: float):
        return x * 42

    ml_models = {}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # Load the ML model
        ml_models["answer_to_everything"] = fake_answer_to_everything_ml_model
        yield
        # Clean up the ML models and release the resources
        ml_models.clear()

    app = FastAPI(lifespan=lifespan)

    @app.get("/predict")
    async def predict(x: float):
        result = ml_models["answer_to_everything"](x)
        return {"result": result}

Here we are simulating the expensive _startup_ operation of loading the model by putting the (fake) model function in the dictionary with machine learning models before the `yield`. This code will be executed **before** the application **starts taking requests** , during the _startup_.

And then, right after the `yield`, we unload the model. This code will be executed **after** the application **finishes handling requests** , right before the _shutdown_. This could, for example, release resources like memory or a GPU.

Tip

The `shutdown` would happen when you are **stopping** the application.

Maybe you need to start a new version, or you just got tired of running it. 🤷

### Lifespan function¶

The first thing to notice, is that we are defining an async function with `yield`. This is very similar to Dependencies with `yield`.

Python 3.8+

    from contextlib import asynccontextmanager

    from fastapi import FastAPI

    def fake_answer_to_everything_ml_model(x: float):
        return x * 42

    ml_models = {}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # Load the ML model
        ml_models["answer_to_everything"] = fake_answer_to_everything_ml_model
        yield
        # Clean up the ML models and release the resources
        ml_models.clear()

    app = FastAPI(lifespan=lifespan)

    @app.get("/predict")
    async def predict(x: float):
        result = ml_models["answer_to_everything"](x)
        return {"result": result}

The first part of the function, before the `yield`, will be executed **before** the application starts.

And the part after the `yield` will be executed **after** the application has finished.

### Async Context Manager¶

If you check, the function is decorated with an `@asynccontextmanager`.

That converts the function into something called an "**async context manager** ".

Python 3.8+

    from contextlib import asynccontextmanager

    from fastapi import FastAPI

    def fake_answer_to_everything_ml_model(x: float):
        return x * 42

    ml_models = {}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # Load the ML model
        ml_models["answer_to_everything"] = fake_answer_to_everything_ml_model
        yield
        # Clean up the ML models and release the resources
        ml_models.clear()

    app = FastAPI(lifespan=lifespan)

    @app.get("/predict")
    async def predict(x: float):
        result = ml_models["answer_to_everything"](x)
        return {"result": result}

A **context manager** in Python is something that you can use in a `with` statement, for example, `open()` can be used as a context manager:

    with open("file.txt") as file:
        file.read()

In recent versions of Python, there's also an **async context manager**. You would use it with `async with`:

    async with lifespan(app):
        await do_stuff()

When you create a context manager or an async context manager like above, what it does is that, before entering the `with` block, it will execute the code before the `yield`, and after exiting the `with` block, it will execute the code after the `yield`.

In our code example above, we don't use it directly, but we pass it to FastAPI for it to use it.

The `lifespan` parameter of the `FastAPI` app takes an **async context manager** , so we can pass our new `lifespan` async context manager to it.

Python 3.8+

    from contextlib import asynccontextmanager

    from fastapi import FastAPI

    def fake_answer_to_everything_ml_model(x: float):
        return x * 42

    ml_models = {}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # Load the ML model
        ml_models["answer_to_everything"] = fake_answer_to_everything_ml_model
        yield
        # Clean up the ML models and release the resources
        ml_models.clear()

    app = FastAPI(lifespan=lifespan)

    @app.get("/predict")
    async def predict(x: float):
        result = ml_models["answer_to_everything"](x)
        return {"result": result}

## Alternative Events (deprecated)¶

Warning

The recommended way to handle the _startup_ and _shutdown_ is using the `lifespan` parameter of the `FastAPI` app as described above. If you provide a `lifespan` parameter, `startup` and `shutdown` event handlers will no longer be called. It's all `lifespan` or all events, not both.

You can probably skip this part.

There's an alternative way to define this logic to be executed during _startup_ and during _shutdown_.

You can define event handlers (functions) that need to be executed before the application starts up, or when the application is shutting down.

These functions can be declared with `async def` or normal `def`.

### `startup` event¶

To add a function that should be run before the application starts, declare it with the event `"startup"`:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    items = {}

    @app.on_event("startup")
    async def startup_event():
        items["foo"] = {"name": "Fighters"}
        items["bar"] = {"name": "Tenders"}

    @app.get("/items/{item_id}")
    async def read_items(item_id: str):
        return items[item_id]

In this case, the `startup` event handler function will initialize the items "database" (just a `dict`) with some values.

You can add more than one event handler function.

And your application won't start receiving requests until all the `startup` event handlers have completed.

### `shutdown` event¶

To add a function that should be run when the application is shutting down, declare it with the event `"shutdown"`:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.on_event("shutdown")
    def shutdown_event():
        with open("log.txt", mode="a") as log:
            log.write("Application shutdown")

    @app.get("/items/")
    async def read_items():
        return [{"name": "Foo"}]

Here, the `shutdown` event handler function will write a text line `"Application shutdown"` to a file `log.txt`.

Info

In the `open()` function, the `mode="a"` means "append", so, the line will be added after whatever is on that file, without overwriting the previous contents.

Tip

Notice that in this case we are using a standard Python `open()` function that interacts with a file.

So, it involves I/O (input/output), that requires "waiting" for things to be written to disk.

But `open()` doesn't use `async` and `await`.

So, we declare the event handler function with standard `def` instead of `async def`.

### `startup` and `shutdown` together¶

There's a high chance that the logic for your _startup_ and _shutdown_ is connected, you might want to start something and then finish it, acquire a resource and then release it, etc.

Doing that in separated functions that don't share logic or variables together is more difficult as you would need to store values in global variables or similar tricks.

Because of that, it's now recommended to instead use the `lifespan` as explained above.

## Technical Details¶

Just a technical detail for the curious nerds. 🤓

Underneath, in the ASGI technical specification, this is part of the [Lifespan Protocol](https://asgi.readthedocs.io/en/latest/specs/lifespan.html), and it defines events called `startup` and `shutdown`.

Info

You can

Including how to handle lifespan state that can be used in other areas of your code.

## Sub Applications¶

🚨 Keep in mind that these lifespan events (startup and shutdown) will only be executed for the main application, not for [Sub Applications - Mounts](../sub-applications/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted

## Response - Change Status Code - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/response-change-status-code/
**Depth**: 2

# Response - Change Status Code¶

You probably read before that you can set a default [Response Status Code](../../tutorial/response-status-code/).

But in some cases you need to return a different status code than the default.

## Use case¶

For example, imagine that you want to return an HTTP status code of "OK" `200` by default.

But if the data didn't exist, you want to create it, and return an HTTP status code of "CREATED" `201`.

But you still want to be able to filter and convert the data you return with a `response_model`.

For those cases, you can use a `Response` parameter.

## Use a `Response` parameter¶

You can declare a parameter of type `Response` in your _path operation function_ (as you can do for cookies and headers).

And then you can set the `status_code` in that _temporal_ response object.

Python 3.8+

    from fastapi import FastAPI, Response, status

    app = FastAPI()

    tasks = {"foo": "Listen to the Bar Fighters"}

    @app.put("/get-or-create-task/{task_id}", status_code=200)
    def get_or_create_task(task_id: str, response: Response):
        if task_id not in tasks:
            tasks[task_id] = "This didn't exist before"
            response.status_code = status.HTTP_201_CREATED
        return tasks[task_id]

And then you can return any object you need, as you normally would (a `dict`, a database model, etc).

And if you declared a `response_model`, it will still be used to filter and convert the object you returned.

**FastAPI** will use that _temporal_ response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any `response_model`.

You can also declare the `Response` parameter in dependencies, and set the status code in them. But keep in mind that the last one to be set will win.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Sub Applications - Mounts - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/sub-applications/
**Depth**: 2

# Sub Applications - Mounts¶

If you need to have two independent FastAPI applications, with their own independent OpenAPI and their own docs UIs, you can have a main app and "mount" one (or more) sub-application(s).

## Mounting a **FastAPI** application¶

"Mounting" means adding a completely "independent" application in a specific path, that then takes care of handling everything under that path, with the _path operations_ declared in that sub-application.

### Top-level application¶

First, create the main, top-level, **FastAPI** application, and its _path operations_ :

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/app")
    def read_main():
        return {"message": "Hello World from main app"}

    subapi = FastAPI()

    @subapi.get("/sub")
    def read_sub():
        return {"message": "Hello World from sub API"}

    app.mount("/subapi", subapi)

### Sub-application¶

Then, create your sub-application, and its _path operations_.

This sub-application is just another standard FastAPI application, but this is the one that will be "mounted":

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/app")
    def read_main():
        return {"message": "Hello World from main app"}

    subapi = FastAPI()

    @subapi.get("/sub")
    def read_sub():
        return {"message": "Hello World from sub API"}

    app.mount("/subapi", subapi)

### Mount the sub-application¶

In your top-level application, `app`, mount the sub-application, `subapi`.

In this case, it will be mounted at the path `/subapi`:

Python 3.8+

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/app")
    def read_main():
        return {"message": "Hello World from main app"}

    subapi = FastAPI()

    @subapi.get("/sub")
    def read_sub():
        return {"message": "Hello World from sub API"}

    app.mount("/subapi", subapi)

### Check the automatic API docs¶

Now, run the `fastapi` command with your file:

    $ fastapi dev main.py

    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

And open the docs at .

You will see the automatic API docs for the main app, including only its own _path operations_ :

And then, open the docs for the sub-application, at .

You will see the automatic API docs for the sub-application, including only its own _path operations_ , all under the correct sub-path prefix `/subapi`:

If you try interacting with any of the two user interfaces, they will work correctly, because the browser will be able to talk to each specific app or sub-app.

### Technical Details: `root_path`¶

When you mount a sub-application as described above, FastAPI will take care of communicating the mount path for the sub-application using a mechanism from the ASGI specification called a `root_path`.

That way, the sub-application will know to use that path prefix for the docs UI.

And the sub-application could also have its own mounted sub-applications and everything would work correctly, because FastAPI handles all these `root_path`s automatically.

You will

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Reference - FastAPI

**URL**: https://fastapi.tiangolo.com/reference/
**Depth**: 1

# Reference¶

Here's the reference or code API, the classes, functions, parameters, attributes, and all the FastAPI parts you can use in your applications.

If you want to **learn FastAPI** you are much better off reading the [FastAPI Tutorial](https://fastapi.tiangolo.com/tutorial/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.

## FastAPI

**URL**: https://fastapi.tiangolo.com
**Depth**: 0

# FastAPI¶

[](https://fastapi.tiangolo.com)

_FastAPI framework, high performance, easy to learn, fast to code, ready for production_

[ ](https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster) [ ](https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi) [ ](https://pypi.org/project/fastapi) [ ](https://pypi.org/project/fastapi)

* * *

**Documentation** :

**Source Code** :

* * *

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

The key features are:

  * **Fast** : Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.
  * **Fast to code** : Increase the speed to develop features by about 200% to 300%. *
  * **Fewer bugs** : Reduce about 40% of human (developer) induced errors. *
  * **Intuitive** : Great editor support. Completion everywhere. Less time debugging.
  * **Easy** : Designed to be easy to use and learn. Less time reading docs.
  * **Short** : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
  * **Robust** : Get production-ready code. With automatic interactive documentation.
  * **Standards-based** : Based on (and fully compatible with) the open standards for APIs: [OpenAPI](https://github.com/OAI/OpenAPI-Specification) (previously known as Swagger) and [JSON Schema](https://json-schema.org/).

* estimation based on tests on an internal development team, building production applications.

## Sponsors¶

[](https://blockbee.io?ref=fastapi "BlockBee Cryptocurrency Payment Gateway") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge "Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge "Auth, user management and more for your B2B product") [](https://zuplo.link/fastapi-gh "Zuplo: Deploy, Secure, Document, and Monetize your FastAPI") [](https://liblab.com?utm_source=fastapi "liblab - Generate SDKs from FastAPI") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi "Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi "Cut Code Review Time & Bugs in Half with CodeRabbit") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source "The Gold Standard in Retail Account Linking") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi "Deploy enterprise applications at startup speed") [](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display "Pay as you go for market data") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship "SDKs for your API | Speakeasy") [](https://www.svix.com/ "Svix - Webhooks as a service") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral "Stainless | Generate best-in-class SDKs") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi "Fine-Grained Authorization for FastAPI") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring "InterviewPal - AI Interview Coach for Engineers and Devs") [](https://dribia.com/en/ "Dribia - Data Science within your reach")

[Other sponsors](https://fastapi.tiangolo.com/fastapi-people/#sponsors)

## Opinions¶

"_[...] I'm using**FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._"

Kabir Khan - **Microsoft** [(ref)](https://github.com/fastapi/fastapi/pull/26)

* * *

"_We adopted the**FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_"

Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - **Uber** [(ref)](https://eng.uber.com/ludwig-v0-2/)

* * *

"_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [

Kevin Glisson, Marc Vilanova, Forest Monsen - **Netflix** [(ref)](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072)

* * *

"_I’m over the moon excited about**FastAPI**. It’s so fun!_"

Brian Okken - **[Python Bytes](https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855) podcast host** [(ref)](https://x.com/brianokken/status/1112220079972728832)

* * *

"_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted**Hug** to be - it's really inspiring to see someone build that._"

Timothy Crosley - **[Hug](https://github.com/hugapi/hug) creator** [(ref)](https://news.ycombinator.com/item?id=19455465)

* * *

"_If you're looking to learn one**modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_"

"_We've switched over to**FastAPI** for our **APIs** [...] I think you'll like it [...]_"

Ines Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai) founders - [spaCy](https://spacy.io) creators** [(ref)](https://x.com/_inesmontani/status/1144173225322143744) \- [(ref)](https://x.com/honnibal/status/1144031421859655680)

* * *

"_If anyone is looking to build a production Python API, I would highly recommend**FastAPI**. It is **beautifully designed** , **simple to use** and **highly scalable** , it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._"

Deon Pillsbury - **Cisco** [(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/)

* * *

## **Typer** , the FastAPI of CLIs¶

[](https://typer.tiangolo.com)

If you are building a CLI app to be used in the terminal instead of a web API, check out [**Typer**](https://typer.tiangolo.com/).

**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ 🚀

## Requirements¶

FastAPI stands on the shoulders of giants:

  * [Starlette](https://www.starlette.io/) for the web parts.
  * [Pydantic](https://docs.pydantic.dev/) for the data parts.

## Installation¶

Create and activate a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/) and then install FastAPI:

    $ pip install "fastapi[standard]"

    ---> 100%

**Note** : Make sure you put `"fastapi[standard]"` in quotes to ensure it works in all terminals.

## Example¶

### Create it¶

Create a file `main.py` with:

    from typing import Union

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    def read_root():
        return {"Hello": "World"}

    @app.get("/items/{item_id}")
    def read_item(item_id: int, q: Union[str, None] = None):
        return {"item_id": item_id, "q": q}

Or use `async def`...

If your code uses `async` / `await`, use `async def`:

    from typing import Union

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    async def read_root():
        return {"Hello": "World"}

    @app.get("/items/{item_id}")
    async def read_item(item_id: int, q: Union[str, None] = None):
        return {"item_id": item_id, "q": q}

**Note** :

If you don't know, check the _"In a hurry?"_ section about [`async` and `await` in the docs](https://fastapi.tiangolo.com/async/#in-a-hurry).

### Run it¶

Run the server with:

    $ fastapi dev main.py

     ╭────────── FastAPI CLI - Development mode ───────────╮
     │                                                     │
     │  Serving at: http://127.0.0.1:8000                  │
     │                                                     │
     │  API docs: http://127.0.0.1:8000/docs               │
     │                                                     │
     │  Running in development mode, for production use:   │
     │                                                     │
     │  fastapi run                                        │
     │                                                     │
     ╰─────────────────────────────────────────────────────╯

    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
    INFO:     Started reloader process [2248755] using WatchFiles
    INFO:     Started server process [2248757]
    INFO:     Waiting for application startup.
    INFO:     Application startup complete.

About the command `fastapi dev main.py`...

The command `fastapi dev` reads your `main.py` file, detects the **FastAPI** app in it, and starts a server using [Uvicorn](https://www.uvicorn.org).

By default, `fastapi dev` will start with auto-reload enabled for local development.

You can

### Check it¶

Open your browser at .

You will see the JSON response as:

    {"item_id": 5, "q": "somequery"}

You already created an API that:

  * Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.
  * Both _paths_ take `GET` _operations_ (also known as HTTP _methods_).
  * The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.
  * The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.

### Interactive API docs¶

Now go to .

You will see the automatic interactive API documentation (provided by [Swagger UI](https://github.com/swagger-api/swagger-ui)):

### Alternative API docs¶

And now, go to .

You will see the alternative automatic documentation (provided by [ReDoc](https://github.com/Rebilly/ReDoc)):

## Example upgrade¶

Now modify the file `main.py` to receive a body from a `PUT` request.

Declare the body using standard Python types, thanks to Pydantic.

    from typing import Union

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float
        is_offer: Union[bool, None] = None

    @app.get("/")
    def read_root():
        return {"Hello": "World"}

    @app.get("/items/{item_id}")
    def read_item(item_id: int, q: Union[str, None] = None):
        return {"item_id": item_id, "q": q}

    @app.put("/items/{item_id}")
    def update_item(item_id: int, item: Item):
        return {"item_name": item.name, "item_id": item_id}

The `fastapi dev` server should reload automatically.

### Interactive API docs upgrade¶

Now go to .

  * The interactive API documentation will be automatically updated, including the new body:

  * Click on the button "Try it out", it allows you to fill the parameters and directly interact with the API:

  * Then click on the "Execute" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:

### Alternative API docs upgrade¶

And now, go to .

  * The alternative documentation will also reflect the new query parameter and body:

### Recap¶

In summary, you declare **once** the types of parameters, body, etc. as function parameters.

You do that with standard modern Python types.

You don't have to learn a new syntax, the methods or classes of a specific library, etc.

Just standard **Python**.

For example, for an `int`:

    item_id: int

or for a more complex `Item` model:

    item: Item

...and with that single declaration you get:

  * Editor support, including:
    * Completion.
    * Type checks.
  * Validation of data:
    * Automatic and clear errors when the data is invalid.
    * Validation even for deeply nested JSON objects.
  * Conversion of input data: coming from the network to Python data and types. Reading from:
    * JSON.
    * Path parameters.
    * Query parameters.
    * Cookies.
    * Headers.
    * Forms.
    * Files.
  * Conversion of output data: converting from Python data and types to network data (as JSON):
    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).
    * `datetime` objects.
    * `UUID` objects.
    * Database models.
    * ...and many more.
  * Automatic interactive API documentation, including 2 alternative user interfaces:
    * Swagger UI.
    * ReDoc.

* * *

Coming back to the previous code example, **FastAPI** will:

  * Validate that there is an `item_id` in the path for `GET` and `PUT` requests.
  * Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.
    * If it is not, the client will see a useful, clear error.
  * Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.
    * As the `q` parameter is declared with `= None`, it is optional.
    * Without the `None` it would be required (as is the body in the case with `PUT`).
  * For `PUT` requests to `/items/{item_id}`, read the body as JSON:
    * Check that it has a required attribute `name` that should be a `str`.
    * Check that it has a required attribute `price` that has to be a `float`.
    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.
    * All this would also work for deeply nested JSON objects.
  * Convert from and to JSON automatically.
  * Document everything with OpenAPI, that can be used by:
    * Interactive documentation systems.
    * Automatic client code generation systems, for many languages.
  * Provide 2 interactive documentation web interfaces directly.

* * *

We just scratched the surface, but you already get the idea of how it all works.

Try changing the line with:

        return {"item_name": item.name, "item_id": item_id}

...from:

            ... "item_name": item.name ...

...to:

            ... "item_price": item.price ...

...and see how your editor will auto-complete the attributes and know their types:

For a more complete example including more features, see the [Tutorial - User Guide](https://fastapi.tiangolo.com/tutorial/).

**Spoiler alert** : the tutorial - user guide includes:

  * Declaration of **parameters** from other different places as: **headers** , **cookies** , **form fields** and **files**.
  * How to set **validation constraints** as `maximum_length` or `regex`.
  * A very powerful and easy to use **Dependency Injection** system.
  * Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.
  * More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).
  * **GraphQL** integration with [Strawberry](https://strawberry.rocks) and other libraries.
  * Many extra features (thanks to Starlette) as:
    * **WebSockets**
    * extremely easy tests based on HTTPX and `pytest`
    * **CORS**
    * **Cookie Sessions**
    * ...and more.

## Performance¶

Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as [one of the fastest Python frameworks available](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7), only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)

To understand more about it, see the section [Benchmarks](https://fastapi.tiangolo.com/benchmarks/).

## Dependencies¶

FastAPI depends on Pydantic and Starlette.

### `standard` Dependencies¶

When you install FastAPI with `pip install "fastapi[standard]"` it comes with the `standard` group of optional dependencies:

Used by Pydantic:

  * [`email-validator`](https://github.com/JoshData/python-email-validator) \- for email validation.

Used by Starlette:

  * [`httpx`](https://www.python-httpx.org) \- Required if you want to use the `TestClient`.
  * [`jinja2`](https://jinja.palletsprojects.com) \- Required if you want to use the default template configuration.
  * [`python-multipart`](https://github.com/Kludex/python-multipart) \- Required if you want to support form "parsing", with `request.form()`.

Used by FastAPI:

  * [`uvicorn`](https://www.uvicorn.org) \- for the server that loads and serves your application. This includes `uvicorn[standard]`, which includes some dependencies (e.g. `uvloop`) needed for high performance serving.
  * `fastapi-cli[standard]` \- to provide the `fastapi` command.
    * This includes `fastapi-cloud-cli`, which allows you to deploy your FastAPI application to [FastAPI Cloud](https://fastapicloud.com).

### Without `standard` Dependencies¶

If you don't want to include the `standard` optional dependencies, you can install with `pip install fastapi` instead of `pip install "fastapi[standard]"`.

### Without `fastapi-cloud-cli`¶

If you want to install FastAPI with the standard dependencies but without the `fastapi-cloud-cli`, you can install with `pip install "fastapi[standard-no-fastapi-cloud-cli]"`.

### Additional Optional Dependencies¶

There are some additional dependencies you might want to install.

Additional optional Pydantic dependencies:

  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) \- for settings management.
  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) \- for extra types to be used with Pydantic.

Additional optional FastAPI dependencies:

  * [`orjson`](https://github.com/ijl/orjson) \- Required if you want to use `ORJSONResponse`.
  * [`ujson`](https://github.com/esnme/ultrajson) \- Required if you want to use `UJSONResponse`.

## License¶

This project is licensed under the terms of the MIT license.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data

## Features - FastAPI

**URL**: https://fastapi.tiangolo.com/features/
**Depth**: 1

# Features¶

## FastAPI features¶

**FastAPI** gives you the following:

### Based on open standards¶

  * [**OpenAPI**](https://github.com/OAI/OpenAPI-Specification) for API creation, including declarations of path operations, parameters, request bodies, security, etc.
  * Automatic data model documentation with [**JSON Schema**](https://json-schema.org/) (as OpenAPI itself is based on JSON Schema).
  * Designed around these standards, after a meticulous study. Instead of an afterthought layer on top.
  * This also allows using automatic **client code generation** in many languages.

### Automatic docs¶

Interactive API documentation and exploration web user interfaces. As the framework is based on OpenAPI, there are multiple options, 2 included by default.

  * [**Swagger UI**](https://github.com/swagger-api/swagger-ui), with interactive exploration, call and test your API directly from the browser.

  * Alternative API documentation with [**ReDoc**](https://github.com/Rebilly/ReDoc).

### Just Modern Python¶

It's all based on standard **Python type** declarations (thanks to Pydantic). No new syntax to learn. Just standard modern Python.

If you need a 2 minute refresher of how to use Python types (even if you don't use FastAPI), check the short tutorial: [Python Types](../python-types/).

You write standard Python with types:

    from datetime import date

    from pydantic import BaseModel

    # Declare a variable as a str
    # and get editor support inside the function
    def main(user_id: str):
        return user_id

    # A Pydantic model
    class User(BaseModel):
        id: int
        name: str
        joined: date

That can then be used like:

    my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

    second_user_data = {
        "id": 4,
        "name": "Mary",
        "joined": "2018-11-30",
    }

    my_second_user: User = User(**second_user_data)

Info

`**second_user_data` means:

Pass the keys and values of the `second_user_data` dict directly as key-value arguments, equivalent to: `User(id=4, name="Mary", joined="2018-11-30")`

### Editor support¶

All the framework was designed to be easy and intuitive to use, all the decisions were tested on multiple editors even before starting development, to ensure the best development experience.

In the Python developer surveys, it's clear [that one of the most used features is "autocompletion"](https://www.jetbrains.com/research/python-developers-survey-2017/#tools-and-features).

The whole **FastAPI** framework is based to satisfy that. Autocompletion works everywhere.

You will rarely need to come back to the docs.

Here's how your editor might help you:

  * in [Visual Studio Code](https://code.visualstudio.com/):

  * in [PyCharm](https://www.jetbrains.com/pycharm/):

You will get completion in code you might even consider impossible before. As for example, the `price` key inside a JSON body (that could have been nested) that comes from a request.

No more typing the wrong key names, coming back and forth between docs, or scrolling up and down to find if you finally used `username` or `user_name`.

### Short¶

It has sensible **defaults** for everything, with optional configurations everywhere. All the parameters can be fine-tuned to do what you need and to define the API you need.

But by default, it all **"just works"**.

### Validation¶

  * Validation for most (or all?) Python **data types** , including:

    * JSON objects (`dict`).
    * JSON array (`list`) defining item types.
    * String (`str`) fields, defining min and max lengths.
    * Numbers (`int`, `float`) with min and max values, etc.
  * Validation for more exotic types, like:

    * URL.
    * Email.
    * UUID.
    * ...and others.

All the validation is handled by the well-established and robust **Pydantic**.

### Security and authentication¶

Security and authentication integrated. Without any compromise with databases or data models.

All the security schemes defined in OpenAPI, including:

  * HTTP Basic.
  * **OAuth2** (also with **JWT tokens**). Check the tutorial on [OAuth2 with JWT](../tutorial/security/oauth2-jwt/).
  * API keys in:
    * Headers.
    * Query parameters.
    * Cookies, etc.

Plus all the security features from Starlette (including **session cookies**).

All built as reusable tools and components that are easy to integrate with your systems, data stores, relational and NoSQL databases, etc.

### Dependency Injection¶

FastAPI includes an extremely easy to use, but extremely powerful **Dependency Injection** system.

  * Even dependencies can have dependencies, creating a hierarchy or **"graph" of dependencies**.
  * All **automatically handled** by the framework.
  * All the dependencies can require data from requests and **augment the path operation** constraints and automatic documentation.
  * **Automatic validation** even for _path operation_ parameters defined in dependencies.
  * Support for complex user authentication systems, **database connections** , etc.
  * **No compromise** with databases, frontends, etc. But easy integration with all of them.

### Unlimited "plug-ins"¶

Or in other way, no need for them, import and use the code you need.

Any integration is designed to be so simple to use (with dependencies) that you can create a "plug-in" for your application in 2 lines of code using the same structure and syntax used for your _path operations_.

### Tested¶

  * 100% test coverage.
  * 100% type annotated code base.
  * Used in production applications.

## Starlette features¶

**FastAPI** is fully compatible with (and based on) [**Starlette**](https://www.starlette.io/). So, any additional Starlette code you have, will also work.

`FastAPI` is actually a sub-class of `Starlette`. So, if you already know or use Starlette, most of the functionality will work the same way.

With **FastAPI** you get all of **Starlette** 's features (as FastAPI is just Starlette on steroids):

  * Seriously impressive performance. It is [one of the fastest Python frameworks available, on par with **NodeJS** and **Go**](https://github.com/encode/starlette#performance).
  * **WebSocket** support.
  * In-process background tasks.
  * Startup and shutdown events.
  * Test client built on HTTPX.
  * **CORS** , GZip, Static Files, Streaming responses.
  * **Session and Cookie** support.
  * 100% test coverage.
  * 100% type annotated codebase.

## Pydantic features¶

**FastAPI** is fully compatible with (and based on) [**Pydantic**](https://docs.pydantic.dev/). So, any additional Pydantic code you have, will also work.

Including external libraries also based on Pydantic, as ORMs, ODMs for databases.

This also means that in many cases you can pass the same object you get from a request **directly to the database** , as everything is validated automatically.

The same applies the other way around, in many cases you can just pass the object you get from the database **directly to the client**.

With **FastAPI** you get all of **Pydantic** 's features (as FastAPI is based on Pydantic for all the data handling):

  * **No brainfuck** :
    * No new schema definition micro-language to learn.
    * If you know Python types you know how to use Pydantic.
  * Plays nicely with your **IDE /linter/brain**:
    * Because pydantic data structures are just instances of classes you define; auto-completion, linting, mypy and your intuition should all work properly with your validated data.
  * Validate **complex structures** :
    * Use of hierarchical Pydantic models, Python `typing`’s `List` and `Dict`, etc.
    * And validators allow complex data schemas to be clearly and easily defined, checked and documented as JSON Schema.
    * You can have deeply **nested JSON** objects and have them all validated and annotated.
  * **Extensible** :
    * Pydantic allows custom data types to be defined or you can extend validation with methods on a model decorated with the validator decorator.
  * 100% test coverage.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## Python Types Intro - FastAPI

**URL**: https://fastapi.tiangolo.com/python-types/
**Depth**: 1

# Python Types Intro¶

Python has support for optional "type hints" (also called "type annotations").

These **"type hints"** or annotations are a special syntax that allow declaring the type of a variable.

By declaring types for your variables, editors and tools can give you better support.

This is just a **quick tutorial / refresher** about Python type hints. It covers only the minimum necessary to use them with **FastAPI**... which is actually very little.

**FastAPI** is all based on these type hints, they give it many advantages and benefits.

But even if you never use **FastAPI** , you would benefit from learning a bit about them.

Note

If you are a Python expert, and you already know everything about type hints, skip to the next chapter.

## Motivation¶

Let's start with a simple example:

Python 3.8+

    def get_full_name(first_name, last_name):
        full_name = first_name.title() + " " + last_name.title()
        return full_name

    print(get_full_name("john", "doe"))

Calling this program outputs:

    John Doe

The function does the following:

  * Takes a `first_name` and `last_name`.
  * Converts the first letter of each one to upper case with `title()`.
  * Concatenates them with a space in the middle.

Python 3.8+

    def get_full_name(first_name, last_name):
        full_name = first_name.title() + " " + last_name.title()
        return full_name

    print(get_full_name("john", "doe"))

### Edit it¶

It's a very simple program.

But now imagine that you were writing it from scratch.

At some point you would have started the definition of the function, you had the parameters ready...

But then you have to call "that method that converts the first letter to upper case".

Was it `upper`? Was it `uppercase`? `first_uppercase`? `capitalize`?

Then, you try with the old programmer's friend, editor autocompletion.

You type the first parameter of the function, `first_name`, then a dot (`.`) and then hit `Ctrl+Space` to trigger the completion.

But, sadly, you get nothing useful:

### Add types¶

Let's modify a single line from the previous version.

We will change exactly this fragment, the parameters of the function, from:

        first_name, last_name

to:

        first_name: str, last_name: str

That's it.

Those are the "type hints":

Python 3.8+

    def get_full_name(first_name: str, last_name: str):
        full_name = first_name.title() + " " + last_name.title()
        return full_name

    print(get_full_name("john", "doe"))

That is not the same as declaring default values like would be with:

        first_name="john", last_name="doe"

It's a different thing.

We are using colons (`:`), not equals (`=`).

And adding type hints normally doesn't change what happens from what would happen without them.

But now, imagine you are again in the middle of creating that function, but with type hints.

At the same point, you try to trigger the autocomplete with `Ctrl+Space` and you see:

With that, you can scroll, seeing the options, until you find the one that "rings a bell":

## More motivation¶

Check this function, it already has type hints:

Python 3.8+

    def get_name_with_age(name: str, age: int):
        name_with_age = name + " is this old: " + age
        return name_with_age

Because the editor knows the types of the variables, you don't only get completion, you also get error checks:

Now you know that you have to fix it, convert `age` to a string with `str(age)`:

Python 3.8+

    def get_name_with_age(name: str, age: int):
        name_with_age = name + " is this old: " + str(age)
        return name_with_age

## Declaring types¶

You just saw the main place to declare type hints. As function parameters.

This is also the main place you would use them with **FastAPI**.

### Simple types¶

You can declare all the standard Python types, not only `str`.

You can use, for example:

  * `int`
  * `float`
  * `bool`
  * `bytes`

Python 3.8+

    def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):
        return item_a, item_b, item_c, item_d, item_d, item_e

### Generic types with type parameters¶

There are some data structures that can contain other values, like `dict`, `list`, `set` and `tuple`. And the internal values can have their own type too.

These types that have internal types are called "**generic** " types. And it's possible to declare them, even with their internal types.

To declare those types and the internal types, you can use the standard Python module `typing`. It exists specifically to support these type hints.

#### Newer versions of Python¶

The syntax using `typing` is **compatible** with all versions, from Python 3.6 to the latest ones, including Python 3.9, Python 3.10, etc.

As Python advances, **newer versions** come with improved support for these type annotations and in many cases you won't even need to import and use the `typing` module to declare the type annotations.

If you can choose a more recent version of Python for your project, you will be able to take advantage of that extra simplicity.

In all the docs there are examples compatible with each version of Python (when there's a difference).

For example "**Python 3.6+** " means it's compatible with Python 3.6 or above (including 3.7, 3.8, 3.9, 3.10, etc). And "**Python 3.9+** " means it's compatible with Python 3.9 or above (including 3.10, etc).

If you can use the **latest versions of Python** , use the examples for the latest version, those will have the **best and simplest syntax** , for example, "**Python 3.10+** ".

#### List¶

For example, let's define a variable to be a `list` of `str`.

Python 3.9+Python 3.8+

Declare the variable, with the same colon (`:`) syntax.

As the type, put `list`.

As the list is a type that contains some internal types, you put them in square brackets:

    def process_items(items: list[str]):
        for item in items:
            print(item)

From `typing`, import `List` (with a capital `L`):

    from typing import List

    def process_items(items: List[str]):
        for item in items:
            print(item)

Declare the variable, with the same colon (`:`) syntax.

As the type, put the `List` that you imported from `typing`.

As the list is a type that contains some internal types, you put them in square brackets:

    from typing import List

    def process_items(items: List[str]):
        for item in items:
            print(item)

Info

Those internal types in the square brackets are called "type parameters".

In this case, `str` is the type parameter passed to `List` (or `list` in Python 3.9 and above).

That means: "the variable `items` is a `list`, and each of the items in this list is a `str`".

Tip

If you use Python 3.9 or above, you don't have to import `List` from `typing`, you can use the same regular `list` type instead.

By doing that, your editor can provide support even while processing items from the list:

Without types, that's almost impossible to achieve.

Notice that the variable `item` is one of the elements in the list `items`.

And still, the editor knows it is a `str`, and provides support for that.

#### Tuple and Set¶

You would do the same to declare `tuple`s and `set`s:

Python 3.9+Python 3.8+

    def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):
        return items_t, items_s

    from typing import Set, Tuple

    def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):
        return items_t, items_s

This means:

  * The variable `items_t` is a `tuple` with 3 items, an `int`, another `int`, and a `str`.
  * The variable `items_s` is a `set`, and each of its items is of type `bytes`.

#### Dict¶

To define a `dict`, you pass 2 type parameters, separated by commas.

The first type parameter is for the keys of the `dict`.

The second type parameter is for the values of the `dict`:

Python 3.9+Python 3.8+

    def process_items(prices: dict[str, float]):
        for item_name, item_price in prices.items():
            print(item_name)
            print(item_price)

    from typing import Dict

    def process_items(prices: Dict[str, float]):
        for item_name, item_price in prices.items():
            print(item_name)
            print(item_price)

This means:

  * The variable `prices` is a `dict`:
    * The keys of this `dict` are of type `str` (let's say, the name of each item).
    * The values of this `dict` are of type `float` (let's say, the price of each item).

#### Union¶

You can declare that a variable can be any of **several types** , for example, an `int` or a `str`.

In Python 3.6 and above (including Python 3.10) you can use the `Union` type from `typing` and put inside the square brackets the possible types to accept.

In Python 3.10 there's also a **new syntax** where you can put the possible types separated by a vertical bar (`|`).

Python 3.10+Python 3.8+

    def process_item(item: int | str):
        print(item)

    from typing import Union

    def process_item(item: Union[int, str]):
        print(item)

In both cases this means that `item` could be an `int` or a `str`.

#### Possibly `None`¶

You can declare that a value could have a type, like `str`, but that it could also be `None`.

In Python 3.6 and above (including Python 3.10) you can declare it by importing and using `Optional` from the `typing` module.

    from typing import Optional

    def say_hi(name: Optional[str] = None):
        if name is not None:
            print(f"Hey {name}!")
        else:
            print("Hello World")

Using `Optional[str]` instead of just `str` will let the editor help you detect errors where you could be assuming that a value is always a `str`, when it could actually be `None` too.

`Optional[Something]` is actually a shortcut for `Union[Something, None]`, they are equivalent.

This also means that in Python 3.10, you can use `Something | None`:

Python 3.10+Python 3.8+Python 3.8+ alternative

    def say_hi(name: str | None = None):
        if name is not None:
            print(f"Hey {name}!")
        else:
            print("Hello World")

    from typing import Optional

    def say_hi(name: Optional[str] = None):
        if name is not None:
            print(f"Hey {name}!")
        else:
            print("Hello World")

    from typing import Union

    def say_hi(name: Union[str, None] = None):
        if name is not None:
            print(f"Hey {name}!")
        else:
            print("Hello World")

#### Using `Union` or `Optional`¶

If you are using a Python version below 3.10, here's a tip from my very **subjective** point of view:

  * 🚨 Avoid using `Optional[SomeType]`
  * Instead ✨ **use`Union[SomeType, None]`** ✨.

Both are equivalent and underneath they are the same, but I would recommend `Union` instead of `Optional` because the word "**optional** " would seem to imply that the value is optional, and it actually means "it can be `None`", even if it's not optional and is still required.

I think `Union[SomeType, None]` is more explicit about what it means.

It's just about the words and names. But those words can affect how you and your teammates think about the code.

As an example, let's take this function:

Python 3.8+

    from typing import Optional

    def say_hi(name: Optional[str]):
        print(f"Hey {name}!")

🤓 Other versions and variants

Python 3.10+

    def say_hi(name: str | None):
        print(f"Hey {name}!")

The parameter `name` is defined as `Optional[str]`, but it is **not optional** , you cannot call the function without the parameter:

    say_hi()  # Oh, no, this throws an error! 😱

The `name` parameter is **still required** (not _optional_) because it doesn't have a default value. Still, `name` accepts `None` as the value:

    say_hi(name=None)  # This works, None is valid 🎉

The good news is, once you are on Python 3.10 you won't have to worry about that, as you will be able to simply use `|` to define unions of types:

Python 3.10+

    def say_hi(name: str | None):
        print(f"Hey {name}!")

🤓 Other versions and variants

Python 3.8+

    from typing import Optional

    def say_hi(name: Optional[str]):
        print(f"Hey {name}!")

And then you won't have to worry about names like `Optional` and `Union`. 😎

#### Generic types¶

These types that take type parameters in square brackets are called **Generic types** or **Generics** , for example:

Python 3.10+Python 3.9+Python 3.8+

You can use the same builtin types as generics (with square brackets and types inside):

  * `list`
  * `tuple`
  * `set`
  * `dict`

And the same as with Python 3.8, from the `typing` module:

  * `Union`
  * `Optional` (the same as with Python 3.8)
  * ...and others.

In Python 3.10, as an alternative to using the generics `Union` and `Optional`, you can use the vertical bar (`|`) to declare unions of types, that's a lot better and simpler.

You can use the same builtin types as generics (with square brackets and types inside):

  * `list`
  * `tuple`
  * `set`
  * `dict`

And the same as with Python 3.8, from the `typing` module:

  * `Union`
  * `Optional`
  * ...and others.

  * `List`
  * `Tuple`
  * `Set`
  * `Dict`
  * `Union`
  * `Optional`
  * ...and others.

### Classes as types¶

You can also declare a class as the type of a variable.

Let's say you have a class `Person`, with a name:

Python 3.8+

    class Person:
        def __init__(self, name: str):
            self.name = name

    def get_person_name(one_person: Person):
        return one_person.name

Then you can declare a variable to be of type `Person`:

Python 3.8+

    class Person:
        def __init__(self, name: str):
            self.name = name

    def get_person_name(one_person: Person):
        return one_person.name

And then, again, you get all the editor support:

Notice that this means "`one_person` is an **instance** of the class `Person`".

It doesn't mean "`one_person` is the **class** called `Person`".

## Pydantic models¶

[Pydantic](https://docs.pydantic.dev/) is a Python library to perform data validation.

You declare the "shape" of the data as classes with attributes.

And each attribute has a type.

Then you create an instance of that class with some values and it will validate the values, convert them to the appropriate type (if that's the case) and give you an object with all the data.

And you get all the editor support with that resulting object.

An example from the official Pydantic docs:

Python 3.10+Python 3.9+Python 3.8+

    from datetime import datetime

    from pydantic import BaseModel

    class User(BaseModel):
        id: int
        name: str = "John Doe"
        signup_ts: datetime | None = None
        friends: list[int] = []

    external_data = {
        "id": "123",
        "signup_ts": "2017-06-01 12:22",
        "friends": [1, "2", b"3"],
    }
    user = User(**external_data)
    print(user)
    # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]
    print(user.id)
    # > 123

    from datetime import datetime
    from typing import Union

    from pydantic import BaseModel

    class User(BaseModel):
        id: int
        name: str = "John Doe"
        signup_ts: Union[datetime, None] = None
        friends: list[int] = []

    external_data = {
        "id": "123",
        "signup_ts": "2017-06-01 12:22",
        "friends": [1, "2", b"3"],
    }
    user = User(**external_data)
    print(user)
    # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]
    print(user.id)
    # > 123

    from datetime import datetime
    from typing import List, Union

    from pydantic import BaseModel

    class User(BaseModel):
        id: int
        name: str = "John Doe"
        signup_ts: Union[datetime, None] = None
        friends: List[int] = []

    external_data = {
        "id": "123",
        "signup_ts": "2017-06-01 12:22",
        "friends": [1, "2", b"3"],
    }
    user = User(**external_data)
    print(user)
    # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]
    print(user.id)
    # > 123

Info

To

**FastAPI** is all based on Pydantic.

You will see a lot more of all this in practice in the [Tutorial - User Guide](../tutorial/).

Tip

Pydantic has a special behavior when you use `Optional` or `Union[Something, None]` without a default value, you can

## Type Hints with Metadata Annotations¶

Python also has a feature that allows putting **additional metadata** in these type hints using `Annotated`.

Python 3.9+Python 3.8+

In Python 3.9, `Annotated` is part of the standard library, so you can import it from `typing`.

    from typing import Annotated

    def say_hello(name: Annotated[str, "this is just metadata"]) -> str:
        return f"Hello {name}"

In versions below Python 3.9, you import `Annotated` from `typing_extensions`.

It will already be installed with **FastAPI**.

    from typing_extensions import Annotated

    def say_hello(name: Annotated[str, "this is just metadata"]) -> str:
        return f"Hello {name}"

Python itself doesn't do anything with this `Annotated`. And for editors and other tools, the type is still `str`.

But you can use this space in `Annotated` to provide **FastAPI** with additional metadata about how you want your application to behave.

The important thing to remember is that **the first _type parameter_** you pass to `Annotated` is the **actual type**. The rest, is just metadata for other tools.

For now, you just need to know that `Annotated` exists, and that it's standard Python. 😎

Later you will see how **powerful** it can be.

Tip

The fact that this is **standard Python** means that you will still get the **best possible developer experience** in your editor, with the tools you use to analyze and refactor your code, etc. ✨

And also that your code will be very compatible with many other Python tools and libraries. 🚀

## Type hints in **FastAPI**¶

**FastAPI** takes advantage of these type hints to do several things.

With **FastAPI** you declare parameters with type hints and you get:

  * **Editor support**.
  * **Type checks**.

...and **FastAPI** uses the same declarations to:

  * **Define requirements** : from request path parameters, query parameters, headers, bodies, dependencies, etc.
  * **Convert data** : from the request to the required type.
  * **Validate data** : coming from each request:
    * Generating **automatic errors** returned to the client when the data is invalid.
  * **Document** the API using OpenAPI:
    * which is then used by the automatic interactive documentation user interfaces.

This might all sound abstract. Don't worry. You'll see all this in action in the [Tutorial - User Guide](../tutorial/).

The important thing is that by using standard Python types, in a single place (instead of adding more classes, decorators, etc), **FastAPI** will do a lot of the work for you.

Info

If you already went through all the tutorial and came back to see more about types, a good resource is [the "cheat sheet" from `mypy`](https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.

## Advanced Security - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/security/
**Depth**: 2

# Advanced Security¶

## Additional Features¶

There are some extra features to handle security apart from the ones covered in the [Tutorial - User Guide: Security](../../tutorial/security/).

Tip

The next sections are **not necessarily "advanced"**.

And it's possible that for your use case, the solution is in one of them.

## Read the Tutorial first¶

The next sections assume you already read the main [Tutorial - User Guide: Security](../../tutorial/security/).

They are all based on the same concepts, but allow some extra functionalities.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Alternatives, Inspiration and Comparisons - FastAPI

**URL**: https://fastapi.tiangolo.com/alternatives/
**Depth**: 1

# Alternatives, Inspiration and Comparisons¶

What inspired **FastAPI** , how it compares to alternatives and what it learned from them.

## Intro¶

**FastAPI** wouldn't exist if not for the previous work of others.

There have been many tools created before that have helped inspire its creation.

I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by **FastAPI** using many different frameworks, plug-ins, and tools.

But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).

## Previous tools¶

### [Django](https://www.djangoproject.com/)¶

It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram.

It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy.

It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it.

### [Django REST Framework](https://www.django-rest-framework.org/)¶

Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities.

It is used by many companies including Mozilla, Red Hat and Eventbrite.

It was one of the first examples of **automatic API documentation** , and this was specifically one of the first ideas that inspired "the search for" **FastAPI**.

Note

Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which **FastAPI** is based.

Inspired **FastAPI** to

Have an automatic API documentation web user interface.

### [Flask](https://flask.palletsprojects.com)¶

Flask is a "microframework", it doesn't include database integrations nor many of the things that come by default in Django.

This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system.

As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points.

It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins.

This decoupling of parts, and being a "microframework" that could be extended to cover exactly what is needed was a key feature that I wanted to keep.

Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a "Django REST Framework" for Flask.

Inspired **FastAPI** to

Be a micro-framework. Making it easy to mix and match the tools and parts needed.

Have a simple and easy to use routing system.

### [Requests](https://requests.readthedocs.io)¶

**FastAPI** is not actually an alternative to **Requests**. Their scope is very different.

It would actually be common to use Requests _inside_ of a FastAPI application.

But still, FastAPI got quite some inspiration from Requests.

**Requests** is a library to _interact_ with APIs (as a client), while **FastAPI** is a library to _build_ APIs (as a server).

They are, more or less, at opposite ends, complementing each other.

Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable.

That's why, as said in the official website:

> Requests is one of the most downloaded Python packages of all time

The way you use it is very simple. For example, to do a `GET` request, you would write:

    response = requests.get("http://example.com/some/url")

The FastAPI counterpart API _path operation_ could look like:

    @app.get("/some/url")
    def read_url():
        return {"message": "Hello World"}

See the similarities in `requests.get(...)` and `@app.get(...)`.

Inspired **FastAPI** to

  * Have a simple and intuitive API.
  * Use HTTP method names (operations) directly, in a straightforward and intuitive way.
  * Have sensible defaults, but powerful customizations.

### [Swagger](https://swagger.io/) / [OpenAPI](https://github.com/OAI/OpenAPI-Specification/)¶

The main feature I wanted from Django REST Framework was the automatic API documentation.

Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger.

And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically.

At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI.

That's why when talking about version 2.0 it's common to say "Swagger", and for version 3+ "OpenAPI".

Inspired **FastAPI** to

Adopt and use an open standard for API specifications, instead of a custom schema.

And integrate standards-based user interface tools:

  * [Swagger UI](https://github.com/swagger-api/swagger-ui)
  * [ReDoc](https://github.com/Rebilly/ReDoc)

These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of alternative user interfaces for OpenAPI (that you can use with **FastAPI**).

### Flask REST frameworks¶

There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.

### [Marshmallow](https://marshmallow.readthedocs.io/en/stable/)¶

One of the main features needed by API systems is data "serialization" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting `datetime` objects into strings, etc.

Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an `int`, and not some random string. This is especially useful for incoming data.

Without a data validation system, you would have to do all the checks by hand, in code.

These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before.

But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow.

Inspired **FastAPI** to

Use code to define "schemas" that provide data types and validation, automatically.

### [Webargs](https://webargs.readthedocs.io/en/latest/)¶

Another big feature required by APIs is parsing data from incoming requests.

Webargs is a tool that was made to provide that on top of several frameworks, including Flask.

It uses Marshmallow underneath to do the data validation. And it was created by the same developers.

It's a great tool and I have used it a lot too, before having **FastAPI**.

Info

Webargs was created by the same Marshmallow developers.

Inspired **FastAPI** to

Have automatic validation of incoming request data.

### [APISpec](https://apispec.readthedocs.io/en/stable/)¶

Marshmallow and Webargs provide validation, parsing and serialization as plug-ins.

But documentation is still missing. Then APISpec was created.

It is a plug-in for many frameworks (and there's a plug-in for Starlette too).

The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route.

And it generates OpenAPI schemas.

That's how it works in Flask, Starlette, Responder, etc.

But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML).

The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete.

Info

APISpec was created by the same Marshmallow developers.

Inspired **FastAPI** to

Support the open standard for APIs, OpenAPI.

### [Flask-apispec](https://flask-apispec.readthedocs.io/en/latest/)¶

It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec.

It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec.

It's a great tool, very underrated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract.

This solved having to write YAML (another syntax) inside of Python docstrings.

This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building **FastAPI**.

Using it led to the creation of several Flask full-stack generators. These are the main stacks I (and several external teams) have been using up to now:

  *
  *
  *

And these same full-stack generators were the base of the [**FastAPI** Project Generators](../project-generation/).

Info

Flask-apispec was created by the same Marshmallow developers.

Inspired **FastAPI** to

Generate the OpenAPI schema automatically, from the same code that defines serialization and validation.

### [NestJS](https://nestjs.com/) (and [Angular](https://angular.io/))¶

This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular.

It achieves something somewhat similar to what can be done with Flask-apispec.

It has an integrated dependency injection system, inspired by Angular 2. It requires pre-registering the "injectables" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition.

As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good.

But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose.

It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated.

Inspired **FastAPI** to

Use Python types to have great editor support.

Have a powerful dependency injection system. Find a way to minimize code repetition.

### [Sanic](https://sanic.readthedocs.io/en/latest/)¶

It was one of the first extremely fast Python frameworks based on `asyncio`. It was made to be very similar to Flask.

Technical Details

It used [`uvloop`](https://github.com/MagicStack/uvloop) instead of the default Python `asyncio` loop. That's what made it so fast.

It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks.

Inspired **FastAPI** to

Find a way to have a crazy performance.

That's why **FastAPI** is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks).

### [Falcon](https://falconframework.org/)¶

Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug.

It is designed to have functions that receive two parameters, one "request" and one "response". Then you "read" parts from the request, and "write" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters.

So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters.

Inspired **FastAPI** to

Find ways to get great performance.

Along with Hug (as Hug is based on Falcon) inspired **FastAPI** to declare a `response` parameter in functions.

Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes.

### [Molten](https://moltenframework.com/)¶

I discovered Molten in the first stages of building **FastAPI**. And it has quite similar ideas:

  * Based on Python type hints.
  * Validation and documentation from these types.
  * Dependency Injection system.

It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily.

It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high performance provided by tools like Uvicorn, Starlette and Sanic.

The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one "component" that provides a certain type.

Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled.

Inspired **FastAPI** to

Define extra validations for data types using the "default" value of model attributes. This improves editor support, and it was not available in Pydantic before.

This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic).

### [Hug](https://github.com/hugapi/hug)¶

Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same.

It used custom types in its declarations instead of standard Python types, but it was still a huge step forward.

It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON.

It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea.

It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs.

As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too.

Info

Hug was created by Timothy Crosley, the same creator of [`isort`](https://github.com/timothycrosley/isort), a great tool to automatically sort imports in Python files.

Ideas inspiring **FastAPI**

Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar.

Hug helped inspiring **FastAPI** to use Python type hints to declare parameters, and to generate a schema defining the API automatically.

Hug inspired **FastAPI** to declare a `response` parameter in functions to set headers and cookies.

### [APIStar](https://github.com/encode/apistar) (<= 0.5)¶

Right before deciding to build **FastAPI** I found **APIStar** server. It had almost everything I was looking for and had a great design.

It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard.

It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places.

Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option.

It had the best performance benchmarks at the time (only surpassed by Starlette).

At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it.

It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature.

I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality.

But then, the project's focus shifted.

It was no longer an API web framework, as the creator needed to focus on Starlette.

Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework.

Info

APIStar was created by Tom Christie. The same guy that created:

  * Django REST Framework
  * Starlette (in which **FastAPI** is based)
  * Uvicorn (used by Starlette and **FastAPI**)

Inspired **FastAPI** to

Exist.

The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea.

And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available.

Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build **FastAPI**.

I consider **FastAPI** a "spiritual successor" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools.

## Used by **FastAPI**¶

### [Pydantic](https://docs.pydantic.dev/)¶

Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints.

That makes it extremely intuitive.

It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great.

**FastAPI** uses it to

Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema).

**FastAPI** then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does.

### [Starlette](https://www.starlette.io/)¶

Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services.

It is very simple and intuitive. It's designed to be easily extensible, and have modular components.

It has:

  * Seriously impressive performance.
  * WebSocket support.
  * In-process background tasks.
  * Startup and shutdown events.
  * Test client built on HTTPX.
  * CORS, GZip, Static Files, Streaming responses.
  * Session and Cookie support.
  * 100% test coverage.
  * 100% type annotated codebase.
  * Few hard dependencies.

Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server.

Starlette provides all the basic web microframework functionality.

But it doesn't provide automatic data validation, serialization or documentation.

That's one of the main things that **FastAPI** adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc.

Technical Details

ASGI is a new "standard" being developed by Django core team members. It is still not a "Python standard" (a PEP), although they are in the process of doing that.

Nevertheless, it is already being used as a "standard" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like `python-socketio`.

**FastAPI** uses it to

Handle all the core web parts. Adding features on top.

The class `FastAPI` itself inherits directly from the class `Starlette`.

So, anything that you can do with Starlette, you can do it directly with **FastAPI** , as it is basically Starlette on steroids.

### [Uvicorn](https://www.uvicorn.org/)¶

Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools.

It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or **FastAPI**) would provide on top.

It is the recommended server for Starlette and **FastAPI**.

**FastAPI** recommends it as

The main web server to run **FastAPI** applications.

You can also use the `--workers` command line option to have an asynchronous multi-process server.

Check more details in the [Deployment](../deployment/) section.

## Benchmarks and speed¶

To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about [Benchmarks](../benchmarks/).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications

## Concurrency and async / await - FastAPI

**URL**: https://fastapi.tiangolo.com/async/
**Depth**: 1

# Concurrency and async / await¶

Details about the `async def` syntax for _path operation functions_ and some background about asynchronous code, concurrency, and parallelism.

## In a hurry?¶

**TL;DR:**

If you are using third party libraries that tell you to call them with `await`, like:

    results = await some_library()

Then, declare your _path operation functions_ with `async def` like:

    @app.get('/')
    async def read_results():
        results = await some_library()
        return results

Note

You can only use `await` inside of functions created with `async def`.

* * *

If you are using a third party library that communicates with something (a database, an API, the file system, etc.) and doesn't have support for using `await`, (this is currently the case for most database libraries), then declare your _path operation functions_ as normally, with just `def`, like:

    @app.get('/')
    def results():
        results = some_library()
        return results

* * *

If your application (somehow) doesn't have to communicate with anything else and wait for it to respond, use `async def`, even if you don't need to use `await` inside.

* * *

If you just don't know, use normal `def`.

* * *

**Note** : You can mix `def` and `async def` in your _path operation functions_ as much as you need and define each one using the best option for you. FastAPI will do the right thing with them.

Anyway, in any of the cases above, FastAPI will still work asynchronously and be extremely fast.

But by following the steps above, it will be able to do some performance optimizations.

## Technical Details¶

Modern versions of Python have support for **"asynchronous code"** using something called **"coroutines"** , with **`async` and `await`** syntax.

Let's see that phrase by parts in the sections below:

  * **Asynchronous Code**
  * **`async` and `await`**
  * **Coroutines**

## Asynchronous Code¶

Asynchronous code just means that the language 💬 has a way to tell the computer / program 🤖 that at some point in the code, it 🤖 will have to wait for _something else_ to finish somewhere else. Let's say that _something else_ is called "slow-file" 📝.

So, during that time, the computer can go and do some other work, while "slow-file" 📝 finishes.

Then the computer / program 🤖 will come back every time it has a chance because it's waiting again, or whenever it 🤖 finished all the work it had at that point. And it 🤖 will see if any of the tasks it was waiting for have already finished, doing whatever it had to do.

Next, it 🤖 takes the first task to finish (let's say, our "slow-file" 📝) and continues whatever it had to do with it.

That "wait for something else" normally refers to I/O operations that are relatively "slow" (compared to the speed of the processor and the RAM memory), like waiting for:

  * the data from the client to be sent through the network
  * the data sent by your program to be received by the client through the network
  * the contents of a file in the disk to be read by the system and given to your program
  * the contents your program gave to the system to be written to disk
  * a remote API operation
  * a database operation to finish
  * a database query to return the results
  * etc.

As the execution time is consumed mostly by waiting for I/O operations, they call them "I/O bound" operations.

It's called "asynchronous" because the computer / program doesn't have to be "synchronized" with the slow task, waiting for the exact moment that the task finishes, while doing nothing, to be able to take the task result and continue the work.

Instead of that, by being an "asynchronous" system, once finished, the task can wait in line a little bit (some microseconds) for the computer / program to finish whatever it went to do, and then come back to take the results and continue working with them.

For "synchronous" (contrary to "asynchronous") they commonly also use the term "sequential", because the computer / program follows all the steps in sequence before switching to a different task, even if those steps involve waiting.

### Concurrency and Burgers¶

This idea of **asynchronous** code described above is also sometimes called **"concurrency"**. It is different from **"parallelism"**.

**Concurrency** and **parallelism** both relate to "different things happening more or less at the same time".

But the details between _concurrency_ and _parallelism_ are quite different.

To see the difference, imagine the following story about burgers:

### Concurrent Burgers¶

You go with your crush to get fast food, you stand in line while the cashier takes the orders from the people in front of you. 😍

Then it's your turn, you place your order of 2 very fancy burgers for your crush and you. 🍔🍔

The cashier says something to the cook in the kitchen so they know they have to prepare your burgers (even though they are currently preparing the ones for the previous clients).

You pay. 💸

The cashier gives you the number of your turn.

While you are waiting, you go with your crush and pick a table, you sit and talk with your crush for a long time (as your burgers are very fancy and take some time to prepare).

As you are sitting at the table with your crush, while you wait for the burgers, you can spend that time admiring how awesome, cute and smart your crush is ✨😍✨.

While waiting and talking to your crush, from time to time, you check the number displayed on the counter to see if it's your turn already.

Then at some point, it finally is your turn. You go to the counter, get your burgers and come back to the table.

You and your crush eat the burgers and have a nice time. ✨

Info

Beautiful illustrations by [Ketrina Thompson](https://www.instagram.com/ketrinadrawsalot). 🎨

* * *

Imagine you are the computer / program 🤖 in that story.

While you are at the line, you are just idle 😴, waiting for your turn, not doing anything very "productive". But the line is fast because the cashier is only taking the orders (not preparing them), so that's fine.

Then, when it's your turn, you do actual "productive" work, you process the menu, decide what you want, get your crush's choice, pay, check that you give the correct bill or card, check that you are charged correctly, check that the order has the correct items, etc.

But then, even though you still don't have your burgers, your work with the cashier is "on pause" ⏸, because you have to wait 🕙 for your burgers to be ready.

But as you go away from the counter and sit at the table with a number for your turn, you can switch 🔀 your attention to your crush, and "work" ⏯ 🤓 on that. Then you are again doing something very "productive" as is flirting with your crush 😍.

Then the cashier 💁 says "I'm finished with doing the burgers" by putting your number on the counter's display, but you don't jump like crazy immediately when the displayed number changes to your turn number. You know no one will steal your burgers because you have the number of your turn, and they have theirs.

So you wait for your crush to finish the story (finish the current work ⏯ / task being processed 🤓), smile gently and say that you are going for the burgers ⏸.

Then you go to the counter 🔀, to the initial task that is now finished ⏯, pick the burgers, say thanks and take them to the table. That finishes that step / task of interaction with the counter ⏹. That in turn, creates a new task, of "eating burgers" 🔀 ⏯, but the previous one of "getting burgers" is finished ⏹.

### Parallel Burgers¶

Now let's imagine these aren't "Concurrent Burgers", but "Parallel Burgers".

You go with your crush to get parallel fast food.

You stand in line while several (let's say 8) cashiers that at the same time are cooks take the orders from the people in front of you.

Everyone before you is waiting for their burgers to be ready before leaving the counter because each of the 8 cashiers goes and prepares the burger right away before getting the next order.

Then it's finally your turn, you place your order of 2 very fancy burgers for your crush and you.

You pay 💸.

The cashier goes to the kitchen.

You wait, standing in front of the counter 🕙, so that no one else takes your burgers before you do, as there are no numbers for turns.

As you and your crush are busy not letting anyone get in front of you and take your burgers whenever they arrive, you cannot pay attention to your crush. 😞

This is "synchronous" work, you are "synchronized" with the cashier/cook 👨‍🍳. You have to wait 🕙 and be there at the exact moment that the cashier/cook 👨‍🍳 finishes the burgers and gives them to you, or otherwise, someone else might take them.

Then your cashier/cook 👨‍🍳 finally comes back with your burgers, after a long time waiting 🕙 there in front of the counter.

You take your burgers and go to the table with your crush.

You just eat them, and you are done. ⏹

There was not much talk or flirting as most of the time was spent waiting 🕙 in front of the counter. 😞

Info

Beautiful illustrations by [Ketrina Thompson](https://www.instagram.com/ketrinadrawsalot). 🎨

* * *

In this scenario of the parallel burgers, you are a computer / program 🤖 with two processors (you and your crush), both waiting 🕙 and dedicating their attention ⏯ to be "waiting on the counter" 🕙 for a long time.

The fast food store has 8 processors (cashiers/cooks). While the concurrent burgers store might have had only 2 (one cashier and one cook).

But still, the final experience is not the best. 😞

* * *

This would be the parallel equivalent story for burgers. 🍔

For a more "real life" example of this, imagine a bank.

Up to recently, most of the banks had multiple cashiers 👨‍💼👨‍💼👨‍💼👨‍💼 and a big line 🕙🕙🕙🕙🕙🕙🕙🕙.

All of the cashiers doing all the work with one client after the other 👨‍💼⏯.

And you have to wait 🕙 in the line for a long time or you lose your turn.

You probably wouldn't want to take your crush 😍 with you to run errands at the bank 🏦.

### Burger Conclusion¶

In this scenario of "fast food burgers with your crush", as there is a lot of waiting 🕙, it makes a lot more sense to have a concurrent system ⏸🔀⏯.

This is the case for most of the web applications.

Many, many users, but your server is waiting 🕙 for their not-so-good connection to send their requests.

And then waiting 🕙 again for the responses to come back.

This "waiting" 🕙 is measured in microseconds, but still, summing it all, it's a lot of waiting in the end.

That's why it makes a lot of sense to use asynchronous ⏸🔀⏯ code for web APIs.

This kind of asynchronicity is what made NodeJS popular (even though NodeJS is not parallel) and that's the strength of Go as a programming language.

And that's the same level of performance you get with **FastAPI**.

And as you can have parallelism and asynchronicity at the same time, you get higher performance than most of the tested NodeJS frameworks and on par with Go, which is a compiled language closer to C [(all thanks to Starlette)](https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=query&l=zijmkf-1).

### Is concurrency better than parallelism?¶

Nope! That's not the moral of the story.

Concurrency is different than parallelism. And it is better on **specific** scenarios that involve a lot of waiting. Because of that, it generally is a lot better than parallelism for web application development. But not for everything.

So, to balance that out, imagine the following short story:

> You have to clean a big, dirty house.

_Yep, that's the whole story_.

* * *

There's no waiting 🕙 anywhere, just a lot of work to be done, on multiple places of the house.

You could have turns as in the burgers example, first the living room, then the kitchen, but as you are not waiting 🕙 for anything, just cleaning and cleaning, the turns wouldn't affect anything.

It would take the same amount of time to finish with or without turns (concurrency) and you would have done the same amount of work.

But in this case, if you could bring the 8 ex-cashier/cooks/now-cleaners, and each one of them (plus you) could take a zone of the house to clean it, you could do all the work in **parallel** , with the extra help, and finish much sooner.

In this scenario, each one of the cleaners (including you) would be a processor, doing their part of the job.

And as most of the execution time is taken by actual work (instead of waiting), and the work in a computer is done by a CPU, they call these problems "CPU bound".

* * *

Common examples of CPU bound operations are things that require complex math processing.

For example:

  * **Audio** or **image processing**.
  * **Computer vision** : an image is composed of millions of pixels, each pixel has 3 values / colors, processing that normally requires computing something on those pixels, all at the same time.
  * **Machine Learning** : it normally requires lots of "matrix" and "vector" multiplications. Think of a huge spreadsheet with numbers and multiplying all of them together at the same time.
  * **Deep Learning** : this is a sub-field of Machine Learning, so, the same applies. It's just that there is not a single spreadsheet of numbers to multiply, but a huge set of them, and in many cases, you use a special processor to build and / or use those models.

### Concurrency + Parallelism: Web + Machine Learning¶

With **FastAPI** you can take advantage of concurrency that is very common for web development (the same main attraction of NodeJS).

But you can also exploit the benefits of parallelism and multiprocessing (having multiple processes running in parallel) for **CPU bound** workloads like those in Machine Learning systems.

That, plus the simple fact that Python is the main language for **Data Science** , Machine Learning and especially Deep Learning, make FastAPI a very good match for Data Science / Machine Learning web APIs and applications (among many others).

To see how to achieve this parallelism in production see the section about [Deployment](../deployment/).

## `async` and `await`¶

Modern versions of Python have a very intuitive way to define asynchronous code. This makes it look just like normal "sequential" code and do the "awaiting" for you at the right moments.

When there is an operation that will require waiting before giving the results and has support for these new Python features, you can code it like:

    burgers = await get_burgers(2)

The key here is the `await`. It tells Python that it has to wait ⏸ for `get_burgers(2)` to finish doing its thing 🕙 before storing the results in `burgers`. With that, Python will know that it can go and do something else 🔀 ⏯ in the meanwhile (like receiving another request).

For `await` to work, it has to be inside a function that supports this asynchronicity. To do that, you just declare it with `async def`:

    async def get_burgers(number: int):
        # Do some asynchronous stuff to create the burgers
        return burgers

...instead of `def`:

    # This is not asynchronous
    def get_sequential_burgers(number: int):
        # Do some sequential stuff to create the burgers
        return burgers

With `async def`, Python knows that, inside that function, it has to be aware of `await` expressions, and that it can "pause" ⏸ the execution of that function and go do something else 🔀 before coming back.

When you want to call an `async def` function, you have to "await" it. So, this won't work:

    # This won't work, because get_burgers was defined with: async def
    burgers = get_burgers(2)

* * *

So, if you are using a library that tells you that you can call it with `await`, you need to create the _path operation functions_ that uses it with `async def`, like in:

    @app.get('/burgers')
    async def read_burgers():
        burgers = await get_burgers(2)
        return burgers

### More technical details¶

You might have noticed that `await` can only be used inside of functions defined with `async def`.

But at the same time, functions defined with `async def` have to be "awaited". So, functions with `async def` can only be called inside of functions defined with `async def` too.

So, about the egg and the chicken, how do you call the first `async` function?

If you are working with **FastAPI** you don't have to worry about that, because that "first" function will be your _path operation function_ , and FastAPI will know how to do the right thing.

But if you want to use `async` / `await` without FastAPI, you can do it as well.

### Write your own async code¶

Starlette (and **FastAPI**) are based on [AnyIO](https://anyio.readthedocs.io/en/stable/), which makes it compatible with both Python's standard library [asyncio](https://docs.python.org/3/library/asyncio-task.html) and [Trio](https://trio.readthedocs.io/en/stable/).

In particular, you can directly use [AnyIO](https://anyio.readthedocs.io/en/stable/) for your advanced concurrency use cases that require more advanced patterns in your own code.

And even if you were not using FastAPI, you could also write your own async applications with [AnyIO](https://anyio.readthedocs.io/en/stable/) to be highly compatible and get its benefits (e.g. _structured concurrency_).

I created another library on top of AnyIO, as a thin layer on top, to improve a bit the type annotations and get better **autocompletion** , **inline errors** , etc. It also has a friendly introduction and tutorial to help you **understand** and write **your own async code** : [Asyncer](https://asyncer.tiangolo.com/). It would be particularly useful if you need to **combine async code with regular** (blocking/synchronous) code.

### Other forms of asynchronous code¶

This style of using `async` and `await` is relatively new in the language.

But it makes working with asynchronous code a lot easier.

This same syntax (or almost identical) was also included recently in modern versions of JavaScript (in Browser and NodeJS).

But before that, handling asynchronous code was quite more complex and difficult.

In previous versions of Python, you could have used threads or [Gevent](https://www.gevent.org/). But the code is way more complex to understand, debug, and think about.

In previous versions of NodeJS / Browser JavaScript, you would have used "callbacks". Which leads to "callback hell".

## Coroutines¶

**Coroutine** is just the very fancy term for the thing returned by an `async def` function. Python knows that it is something like a function, that it can start and that it will end at some point, but that it might be paused ⏸ internally too, whenever there is an `await` inside of it.

But all this functionality of using asynchronous code with `async` and `await` is many times summarized as using "coroutines". It is comparable to the main key feature of Go, the "Goroutines".

## Conclusion¶

Let's see the same phrase from above:

> Modern versions of Python have support for **"asynchronous code"** using something called **"coroutines"** , with **`async` and `await`** syntax.

That should make more sense now. ✨

All that is what powers FastAPI (through Starlette) and what makes it have such an impressive performance.

## Very Technical Details¶

Warning

You can probably skip this.

These are very technical details of how **FastAPI** works underneath.

If you have quite some technical knowledge (coroutines, threads, blocking, etc.) and are curious about how FastAPI handles `async def` vs normal `def`, go ahead.

### Path operation functions¶

When you declare a _path operation function_ with normal `def` instead of `async def`, it is run in an external threadpool that is then awaited, instead of being called directly (as it would block the server).

If you are coming from another async framework that does not work in the way described above and you are used to defining trivial compute-only _path operation functions_ with plain `def` for a tiny performance gain (about 100 nanoseconds), please note that in **FastAPI** the effect would be quite opposite. In these cases, it's better to use `async def` unless your _path operation functions_ use code that performs blocking I/O.

Still, in both situations, chances are that **FastAPI** will [still be faster](../#performance) than (or at least comparable to) your previous framework.

### Dependencies¶

The same applies for [dependencies](../tutorial/dependencies/). If a dependency is a standard `def` function instead of `async def`, it is run in the external threadpool.

### Sub-dependencies¶

You can have multiple dependencies and [sub-dependencies](../tutorial/dependencies/sub-dependencies/) requiring each other (as parameters of the function definitions), some of them might be created with `async def` and some with normal `def`. It would still work, and the ones created with normal `def` would be called on an external thread (from the threadpool) instead of being "awaited".

### Other utility functions¶

Any other utility function that you call directly can be created with normal `def` or `async def` and FastAPI won't affect the way you call it.

This is in contrast to the functions that FastAPI calls for you: _path operation functions_ and dependencies.

If your utility function is a normal function with `def`, it will be called directly (as you write it in your code), not in a threadpool, if the function is created with `async def` then you should `await` for that function when you call it in your code.

* * *

Again, these are very technical details that would probably be useful if you came searching for them.

Otherwise, you should be good with the guidelines from the section above: In a hurry?.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## Repository Management Tasks - FastAPI

**URL**: https://fastapi.tiangolo.com/management-tasks/
**Depth**: 1

# Repository Management Tasks¶

These are the tasks that can be performed to manage the FastAPI repository by [team members](../fastapi-people/#team).

Tip

This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. 😉

...so, you are a [team member of FastAPI](../fastapi-people/#team)? Wow, you are so cool! 😎

You can help with everything on [Help FastAPI - Get Help](../help-fastapi/) the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.

Here are the general instructions for the tasks you can perform.

Thanks a lot for your help. 🙇

## Be Nice¶

First of all, be nice. 😊

You probably are super nice if you were added to the team, but it's worth mentioning it. 🤓

### When Things are Difficult¶

When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.

Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.

It's difficult to convey emotion in text, use emojis to help. 😅

In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.

Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.

Try to be as specific and objective as possible, avoid generalizations.

For conversations that are more difficult, for example to reject a PR, you can ask me (@tiangolo) to handle it directly.

## Edit PR Titles¶

  * Edit the PR title to start with an emoji from [gitmoji](https://gitmoji.dev/).
    * Use the emoji character, not the GitHub code. So, use `🐛` instead of `:bug:`. This is so that it shows up correctly outside of GitHub, for example in the release notes.
    * For translations use the `🌐` emoji ("globe with meridians").
  * Start the title with a verb. For example `Add`, `Refactor`, `Fix`, etc. This way the title will say the action that the PR does. Like `Add support for teleporting`, instead of `Teleporting wasn't working, so this PR fixes it`.
  * Edit the text of the PR title to start in "imperative", like giving an order. So, instead of `Adding support for teleporting` use `Add support for teleporting`.
  * Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example `Add support for teleporting` instead of `Create TeleportAdapter class`.
  * Do not finish the title with a period (`.`).
  * When the PR is for a translation, start with the `🌐` and then `Add {language} translation for` and then the translated file path. For example:

    🌐 Add Spanish translation for `docs/es/docs/teleporting.md`

Once the PR is merged, a GitHub Action ([latest-changes](https://github.com/tiangolo/latest-changes)) will use the PR title to update the latest changes automatically.

So, having a nice PR title will not only look nice in GitHub, but also in the release notes. 📝

## Add Labels to PRs¶

The same GitHub Action [latest-changes](https://github.com/tiangolo/latest-changes) uses one label in the PR to decide the section in the release notes to put this PR in.

Make sure you use a supported label from the [latest-changes list of labels](https://github.com/tiangolo/latest-changes#using-labels):

  * `breaking`: Breaking Changes
    * Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.
  * `security`: Security Fixes
    * This is for security fixes, like vulnerabilities. It would almost never be used.
  * `feature`: Features
    * New features, adding support for things that didn't exist before.
  * `bug`: Fixes
    * Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.
  * `refactor`: Refactors
    * This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.
  * `upgrade`: Upgrades
    * This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in `pyproject.toml`. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in `requirements.txt` files or GitHub Action versions should be marked as `internal`, not `upgrade`.
  * `docs`: Docs
    * Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.
    * You can normally quickly detect it by going to the "Files changed" tab in the PR and checking if the updated file(s) starts with `docs/en/docs`. The original version of the docs is always in English, so in `docs/en/docs`.
  * `lang-all`: Translations
    * Use this for translations. You can normally quickly detect it by going to the "Files changed" tab in the PR and checking if the updated file(s) starts with `docs/{some lang}/docs` but not `docs/en/docs`. For example, `docs/es/docs`.
  * `internal`: Internal
    * Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.

Tip

Some tools like Dependabot, will add some labels, like `dependencies`, but have in mind that this label is not used by the `latest-changes` GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.

## Add Labels to Translation PRs¶

When there's a PR for a translation, apart from adding the `lang-all` label, also add a label for the language.

There will be a label for each language using the language code, like `lang-{lang code}`, for example, `lang-es` for Spanish, `lang-fr` for French, etc.

  * Add the specific language label.
  * Add the label `awaiting-review`.

The label `awaiting-review` is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.

Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the `awaiting-review` label, and add the `approved-1` label.

This way, we can notice when there are new translations ready, because they have the `approved-1` label.

## Merge Translation PRs¶

For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.

For the other languages, confirm that:

  * The title is correct following the instructions above.
  * It has the labels `lang-all` and `lang-{lang code}`.
  * The PR changes only one Markdown file adding a translation.
    * Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.
    * If it's the first translation for that language, it will have additional `mkdocs.yml` files, for those cases follow the instructions below.
  * The PR doesn't add any additional or extraneous files.
  * The translation seems to have a similar structure as the original English file.
  * The translation doesn't seem to change the original content, for example with obvious additional documentation sections.
  * The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.
  * The "admonition" sections, like `tip`, `info`, etc. are not changed or translated. For example:

    /// tip

    This is a tip.

    ///

looks like this:

Tip

This is a tip.

...it could be translated as:

    /// tip

    Esto es un consejo.

    ///

...but needs to keep the exact `tip` keyword. If it was translated to `consejo`, like:

    /// consejo

    Esto es un consejo.

    ///

it would change the style to the default one, it would look like:

/// consejo

Esto es un consejo.

///

Those don't have to be translated, but if they are, they need to be written as:

    /// tip | consejo

    Esto es un consejo.

    ///

Which looks like:

consejo

Esto es un consejo.

## First Translation PR¶

When there's a first translation for a language, it will have a `docs/{lang code}/docs/index.md` translated file and a `docs/{lang code}/mkdocs.yml`.

For example, for Bosnian, it would be:

  * `docs/bs/docs/index.md`
  * `docs/bs/mkdocs.yml`

The `mkdocs.yml` file will have only the following content:

    INHERIT: ../en/mkdocs.yml

The language code would normally be in the [ISO 639-1 list of language codes](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).

In any case, the language code should be in the file [docs/language_names.yml](https://github.com/fastapi/fastapi/blob/master/docs/language_names.yml).

There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a `lang-bs`. Before creating the label and adding it to the PR, create the GitHub Discussion:

  * Go to the [Translations GitHub Discussions](https://github.com/fastapi/fastapi/discussions/categories/translations)
  * Create a new discussion with the title `Bosnian Translations` (or the language name in English)
  * A description of:

    ## Bosnian translations

    This is the issue to track translations of the docs to Bosnian. 🚀

    Here are the [PRs to review with the label `lang-bs`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓

Update "Bosnian" with the new language.

And update the search link to point to the new language label that will be created, like `lang-bs`.

Create and add the label to that new Discussion just created, like `lang-bs`.

Then go back to the PR, and add the label, like `lang-bs`, and `lang-all` and `awaiting-review`.

Now the GitHub action will automatically detect the label `lang-bs` and will post in that Discussion that this PR is waiting to be reviewed.

## Review PRs¶

If a PR doesn't explain what it does or why, ask for more information.

A PR should have a specific use case that it is solving.

  * If the PR is for a feature, it should have docs.
    * Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.
  * The docs should include a source example file, not write Python directly in Markdown.
  * If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.
  * There should be tests testing the source example.
  * Before the PR is applied, the new tests should fail.
  * After applying the PR, the new tests should pass.
  * Coverage should stay at 100%.
  * If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.
  * Feel free to comment in the PR to ask for more information, to suggest changes, etc.
  * Once you think the PR is ready, move it in the internal GitHub project for me to review it.

## FastAPI People PRs¶

Every month, a GitHub Action updates the FastAPI People data. Those PRs look like this one: [👥 Update FastAPI People](https://github.com/fastapi/fastapi/pull/11669).

If the tests are passing, you can merge it right away.

## External Links PRs¶

When people add external links they edit this file [external_links.yml](https://github.com/fastapi/fastapi/blob/master/docs/en/data/external_links.yml).

  * Make sure the new link is in the correct category (e.g. "Podcasts") and language (e.g. "Japanese").
  * A new link should be at the top of its list.
  * The link URL should work (it should not return a 404).
  * The content of the link should be about FastAPI.
  * The new addition should have these fields:
    * `author`: The name of the author.
    * `link`: The URL with the content.
    * `title`: The title of the link (the title of the article, podcast, etc).

After checking all these things and ensuring the PR has the right labels, you can merge it.

## Dependabot PRs¶

Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.

  * If the PR is for a direct dependency, so, Dependabot is modifying `pyproject.toml`, **don't merge it**. 😱 Let me check it first. There's a good chance that some additional tweaks or updates are needed.
  * If the PR updates one of the internal dependencies, for example it's modifying `requirements.txt` files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. 😎

## Mark GitHub Discussions Answers¶

When a question in GitHub Discussions has been answered, mark the answer by clicking "Mark as answer".

You can filter discussions by [`Questions` that are `Unanswered`](https://github.com/tiangolo/fastapi/discussions/categories/questions?discussions_q=category:Questions+is:open+is:unanswered).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## LLM test file - FastAPI

**URL**: https://fastapi.tiangolo.com/_llm-test/
**Depth**: 1

# LLM test file¶

This document tests if the LLM, which translates the documentation, understands the `general_prompt` in `scripts/translate.py` and the language specific prompt in `docs/{language code}/llm-prompt.md`. The language specific prompt is appended to `general_prompt`.

Tests added here will be seen by all designers of language specific prompts.

Use as follows:

  * Have a language specific prompt – `docs/{language code}/llm-prompt.md`.
  * Do a fresh translation of this document into your desired target language (see e.g. the `translate-page` command of the `translate.py`). This will create the translation under `docs/{language code}/docs/_llm-test.md`.
  * Check if things are okay in the translation.
  * If necessary, improve your language specific prompt, the general prompt, or the English document.
  * Then manually fix the remaining issues in the translation, so that it is a good translation.
  * Retranslate, having the good translation in place. The ideal result would be that the LLM makes no changes anymore to the translation. That means that the general prompt and your language specific prompt are as good as they can be (It will sometimes make a few seemingly random changes, the reason is that [LLMs are not deterministic algorithms](https://doublespeak.chat/#/handbook#deterministic-output)).

The tests:

## Code snippets¶

TestInfo

This is a code snippet: `foo`. And this is another code snippet: `bar`. And another one: `baz quux`.

Content of code snippets should be left as is.

See section `### Content of code snippets` in the general prompt in `scripts/translate.py`.

## Quotes¶

TestInfo

Yesterday, my friend wrote: "If you spell incorrectly correctly, you have spelled it incorrectly". To which I answered: "Correct, but 'incorrectly' is incorrectly not '"incorrectly"'".

Note

The LLM will probably translate this wrong. Interesting is only if it keeps the fixed translation when retranslating.

The prompt designer may choose if they want to convert neutral quotes to typographic quotes. It is okay to leave them as is.

See for example section `### Quotes` in `docs/de/llm-prompt.md`.

## Quotes in code snippets¶

TestInfo

`pip install "foo[bar]"`

Examples for string literals in code snippets: `"this"`, `'that'`.

A difficult example for string literals in code snippets: `f"I like {'oranges' if orange else "apples"}"`

Hardcore: `Yesterday, my friend wrote: "If you spell incorrectly correctly, you have spelled it incorrectly". To which I answered: "Correct, but 'incorrectly' is incorrectly not '"incorrectly"'"`

... However, quotes inside code snippets must stay as is.

## code blocks¶

TestInfo

A Bash code example...

    # Print a greeting to the universe
    echo "Hello universe"

...and a console code example...

    $ fastapi run main.py
     FastAPI   Starting server
            Searching for package file structure

...and another console code example...

    // Create a directory "Code"
    $ mkdir code
    // Switch into that directory
    $ cd code

...and a Python code example...

    wont_work()  # This won't work 😱
    works(foo="bar")  # This works 🎉

...and that's it.

Code in code blocks should not be modified, with the exception of comments.

See section `### Content of code blocks` in the general prompt in `scripts/translate.py`.

## Tabs and colored boxes¶

TestInfo

Info

Some text

Note

Some text

Technical details

Some text

Check

Some text

Tip

Some text

Warning

Some text

Danger

Some text

Tabs and `Info`/`Note`/`Warning`/etc. blocks should have the translation of their title added after a vertical bar (`|`).

See sections `### Special blocks` and `### Tab blocks` in the general prompt in `scripts/translate.py`.

## Web- and internal links¶

TestInfo

The link text should get translated, the link address should remain unchaged:

  * Link to heading above
  * [Internal link](../#installation)
  * [External link](https://sqlmodel.tiangolo.com/)
  * [Link to a style](https://fastapi.tiangolo.com/css/styles.css)
  * [Link to a script](https://fastapi.tiangolo.com/js/logic.js)
  * [Link to an image](https://fastapi.tiangolo.com/img/foo.jpg)

The link text should get translated, the link address should point to the translation:

  * [FastAPI link](https://fastapi.tiangolo.com/)

Links should be translated, but their address shall remain unchanged. An exception are absolute links to pages of the FastAPI documentation. In that case it should link to the translation.

See section `### Links` in the general prompt in `scripts/translate.py`.

## HTML "abbr" elements¶

TestInfo

Here some things wrapped in HTML "abbr" elements (Some are invented):

### The abbr gives a full phrase¶

  * GTD
  * `lt`
  * XWT
  * PSGI

### The abbr gives an explanation¶

  * cluster
  * Deep Learning

### The abbr gives a full phrase and an explanation¶

  * MDN
  * I/O.

"title" attributes of "abbr" elements are translated following some specific instructions.

Translations can add their own "abbr" elements which the LLM should not remove. E.g. to explain English words.

See section `### HTML abbr elements` in the general prompt in `scripts/translate.py`.

## Headings¶

TestInfo

### Develop a webapp - a tutorial¶

Hello.

### Type hints and -annotations¶

Hello again.

### Super- and subclasses¶

Hello again.

The only hard rule for headings is that the LLM leaves the hash part inside curly brackets unchanged, which ensures that links do not break.

See section `### Headings` in the general prompt in `scripts/translate.py`.

For some language specific instructions, see e.g. section `### Headings` in `docs/de/llm-prompt.md`.

## Terms used in the docs¶

TestInfo

  * you
  * your

  * e.g.

  * etc.

  * `foo` as an `int`

  * `bar` as a `str`
  * `baz` as a `list`

  * the Tutorial - User guide

  * the Advanced User Guide
  * the SQLModel docs
  * the API docs
  * the automatic docs

  * Data Science

  * Deep Learning
  * Machine Learning
  * Dependency Injection
  * HTTP Basic authentication
  * HTTP Digest
  * ISO format
  * the JSON Schema standard
  * the JSON schema
  * the schema definition
  * Password Flow
  * Mobile

  * deprecated

  * designed
  * invalid
  * on the fly
  * standard
  * default
  * case-sensitive
  * case-insensitive

  * to serve the application

  * to serve the page

  * the app

  * the application

  * the request

  * the response
  * the error response

  * the path operation

  * the path operation decorator
  * the path operation function

  * the body

  * the request body
  * the response body
  * the JSON body
  * the form body
  * the file body
  * the function body

  * the parameter

  * the body parameter
  * the path parameter
  * the query parameter
  * the cookie parameter
  * the header parameter
  * the form parameter
  * the function parameter

  * the event

  * the startup event
  * the startup of the server
  * the shutdown event
  * the lifespan event

  * the handler

  * the event handler
  * the exception handler
  * to handle

  * the model

  * the Pydantic model
  * the data model
  * the database model
  * the form model
  * the model object

  * the class

  * the base class
  * the parent class
  * the subclass
  * the child class
  * the sibling class
  * the class method

  * the header

  * the headers
  * the authorization header
  * the `Authorization` header
  * the forwarded header

  * the dependency injection system

  * the dependency
  * the dependable
  * the dependant

  * I/O bound

  * CPU bound
  * concurrency
  * parallelism
  * multiprocessing

  * the env var

  * the environment variable
  * the `PATH`
  * the `PATH` variable

  * the authentication

  * the authentication provider
  * the authorization
  * the authorization form
  * the authorization provider
  * the user authenticates
  * the system authenticates the user

  * the CLI

  * the command line interface

  * the server

  * the client

  * the cloud provider

  * the cloud service

  * the development

  * the development stages

  * the dict

  * the dictionary
  * the enumeration
  * the enum
  * the enum member

  * the encoder

  * the decoder
  * to encode
  * to decode

  * the exception

  * to raise

  * the expression

  * the statement

  * the frontend

  * the backend

  * the GitHub discussion

  * the GitHub issue

  * the performance

  * the performance optimization

  * the return type

  * the return value

  * the security

  * the security scheme

  * the task

  * the background task
  * the task function

  * the template

  * the template engine

  * the type annotation

  * the type hint

  * the server worker

  * the Uvicorn worker
  * the Gunicorn Worker
  * the worker process
  * the worker class
  * the workload

  * the deployment

  * to deploy

  * the SDK

  * the software development kit

  * the `APIRouter`

  * the `requirements.txt`
  * the Bearer Token
  * the breaking change
  * the bug
  * the button
  * the callable
  * the code
  * the commit
  * the context manager
  * the coroutine
  * the database session
  * the disk
  * the domain
  * the engine
  * the fake X
  * the HTTP GET method
  * the item
  * the library
  * the lifespan
  * the lock
  * the middleware
  * the mobile application
  * the module
  * the mounting
  * the network
  * the origin
  * the override
  * the payload
  * the processor
  * the property
  * the proxy
  * the pull request
  * the query
  * the RAM
  * the remote machine
  * the status code
  * the string
  * the tag
  * the web framework
  * the wildcard
  * to return
  * to validate

This is a not complete and not normative list of (mostly) technical terms seen in the docs. It may be helpful for the prompt designer to figure out for which terms the LLM needs a helping hand. For example when it keeps reverting a good translation to a suboptimal translation. Or when it has problems conjugating/declinating a term in your language.

See e.g. section `### List of English terms and their preferred German translations` in `docs/de/llm-prompt.md`.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.

## Benchmarks - FastAPI

**URL**: https://fastapi.tiangolo.com/benchmarks/
**Depth**: 1

# Benchmarks¶

Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as [one of the fastest Python frameworks available](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7), only below Starlette and Uvicorn themselves (used internally by FastAPI).

But when checking benchmarks and comparisons you should keep the following in mind.

## Benchmarks and speed¶

When you check the benchmarks, it is common to see several tools of different types compared as equivalent.

Specifically, to see Uvicorn, Starlette and FastAPI compared together (among many other tools).

The simpler the problem solved by the tool, the better performance it will get. And most of the benchmarks don't test the additional features provided by the tool.

The hierarchy is like:

  * **Uvicorn** : an ASGI server

    * **Starlette** : (uses Uvicorn) a web microframework
      * **FastAPI** : (uses Starlette) an API microframework with several additional features for building APIs, with data validation, etc.
  * **Uvicorn** :

    * Will have the best performance, as it doesn't have much extra code apart from the server itself.
    * You wouldn't write an application in Uvicorn directly. That would mean that your code would have to include more or less, at least, all the code provided by Starlette (or **FastAPI**). And if you did that, your final application would have the same overhead as having used a framework and minimizing your app code and bugs.
    * If you are comparing Uvicorn, compare it against Daphne, Hypercorn, uWSGI, etc. Application servers.
  * **Starlette** :
    * Will have the next best performance, after Uvicorn. In fact, Starlette uses Uvicorn to run. So, it probably can only get "slower" than Uvicorn by having to execute more code.
    * But it provides you the tools to build simple web applications, with routing based on paths, etc.
    * If you are comparing Starlette, compare it against Sanic, Flask, Django, etc. Web frameworks (or microframeworks).
  * **FastAPI** :
    * The same way that Starlette uses Uvicorn and cannot be faster than it, **FastAPI** uses Starlette, so it cannot be faster than it.
    * FastAPI provides more features on top of Starlette. Features that you almost always need when building APIs, like data validation and serialization. And by using it, you get automatic documentation for free (the automatic documentation doesn't even add overhead to running applications, it is generated on startup).
    * If you didn't use FastAPI and used Starlette directly (or another tool, like Sanic, Flask, Responder, etc) you would have to implement all the data validation and serialization yourself. So, your final application would still have the same overhead as if it was built using FastAPI. And in many cases, this data validation and serialization is the biggest amount of code written in applications.
    * So, by using FastAPI you are saving development time, bugs, lines of code, and you would probably get the same performance (or better) you would if you didn't use it (as you would have to implement it all in your code).
    * If you are comparing FastAPI, compare it against a web application framework (or set of tools) that provides data validation, serialization and documentation, like Flask-apispec, NestJS, Molten, etc. Frameworks with integrated automatic data validation, serialization and documentation.

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## External Links and Articles - FastAPI

**URL**: https://fastapi.tiangolo.com/external-links/
**Depth**: 1

# External Links and Articles¶

**FastAPI** has a great community constantly growing.

There are many posts, articles, tools, and projects, related to **FastAPI**.

Here's an incomplete list of some of them.

Tip

If you have an article, project, tool, or anything related to **FastAPI** that is not yet listed here, create a [Pull Request adding it](https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml).

## Articles¶

### English¶

  * [How to profile a FastAPI asynchronous request](https://blog.balthazar-rouberol.com/how-to-profile-a-fastapi-asynchronous-request) by [Balthazar Rouberol](https://balthazar-rouberol.com).

  * [Deploy a Serverless FastAPI App with Neon Postgres and AWS App Runner at any scale](https://neon.tech/blog/deploy-a-serverless-fastapi-app-with-neon-postgres-and-aws-app-runner-at-any-scale) by [Stephen Siegert - Neon]().

  * [Building a Machine Learning Microservice with FastAPI](https://developer.nvidia.com/blog/building-a-machine-learning-microservice-with-fastapi/) by [Kurtis Pykes - NVIDIA]().

  * [Booking Appointments with Twilio, Notion, and FastAPI](https://www.twilio.com/en-us/blog/booking-appointments-twilio-notion-fastapi) by [Ravgeet Dhillon - Twilio]().

  * [Write a Python data layer with Azure Cosmos DB and FastAPI](https://devblogs.microsoft.com/cosmosdb/azure-cosmos-db-python-and-fastapi/) by [Abhinav Tripathi - Microsoft Blogs]().

  * [10 Tips for adding SQLAlchemy to FastAPI](https://bitestreams.com/blog/fastapi-sqlalchemy/) by [Donny Peeters](https://github.com/Donnype).

  * [Tips on migrating from Flask to FastAPI and vice-versa](https://jtemporal.com/tips-on-migrating-from-flask-to-fastapi-and-vice-versa/) by [Jessica Temporal](https://jtemporal.com/socials).

  * [Explore How to Effectively Use JWT With FastAPI](https://hackernoon.com/explore-how-to-effectively-use-jwt-with-fastapi) by [Ankit Anchlia](https://linkedin.com/in/aanchlia21).

  * [Instrument FastAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo.](https://github.com/softwarebloat/python-tracing-demo) by [Nicoló Lino](https://www.nlino.com).

  * [ML serving and monitoring with FastAPI and Evidently](https://www.evidentlyai.com/blog/fastapi-tutorial) by [Mikhail Rozhkov, Elena Samuylova](https://www.linkedin.com/in/mnrozhkov/).

  * [FastAPI Tutorial in Visual Studio Code](https://code.visualstudio.com/docs/python/tutorial-fastapi) by [Visual Studio Code Team](https://code.visualstudio.com/).

  * [FastAPI application monitoring made easy](https://blog.apitally.io/fastapi-application-monitoring-made-easy) by [Apitally](https://apitally.io).

  * [Building a RESTful API with FastAPI: Secure Signup and Login Functionality Included](https://python.plainenglish.io/building-a-restful-api-with-fastapi-secure-signup-and-login-functionality-included-45cdbcb36106) by [John Philip](https://medium.com/@amjohnphilip).

  * [Building a CRUD API with FastAPI and Supabase](https://blog.theinfosecguy.xyz/building-a-crud-api-with-fastapi-and-supabase-a-step-by-step-guide) by [Keshav Malik](https://theinfosecguy.xyz/).

  * [Build an SMS Spam Classifier Serverless Database with FaunaDB and FastAPI](https://medium.com/python-in-plain-english/build-an-sms-spam-classifier-serverless-database-with-faunadb-and-fastapi-23dbb275bc5b) by [Adejumo Ridwan Suleiman](https://www.linkedin.com/in/adejumoridwan/).

  * [FastAPI lambda container: serverless simplified](https://rafrasenberg.com/fastapi-lambda/) by [Raf Rasenberg](https://rafrasenberg.com/about/).

  * [Authorization on FastAPI with Casbin](https://dev.to/teresafds/authorization-on-fastapi-with-casbin-41og) by [Teresa N. Fontanella De Santis](https://dev.to/).

  * [How to monitor FastAPI application performance using Python agent](https://newrelic.com/instant-observability/fastapi/e559ec64-f765-4470-a15f-1901fcebb468) by [New Relic](https://newrelic.com).

  * [Building the Poll App From Django Tutorial With FastAPI And React](https://dev.indooroutdoor.io/series/fastapi-react-poll-app) by [Jean-Baptiste Rocher](https://hashnode.com/@jibrocher).

  * [Seamless FastAPI Configuration with ConfZ](https://blog.devgenius.io/seamless-fastapi-configuration-with-confz-90949c14ea12) by [Silvan Melchior](https://github.com/silvanmelchior).

  * [5 Advanced Features of FastAPI You Should Try](https://levelup.gitconnected.com/5-advance-features-of-fastapi-you-should-try-7c0ac7eebb3e) by [Kaustubh Gupta](https://medium.com/@kaustubhgupta1828/).

  * [Deploying ML Models as API Using FastAPI and Heroku](https://www.analyticsvidhya.com/blog/2021/06/deploying-ml-models-as-api-using-fastapi-and-heroku/) by [Kaustubh Gupta](https://medium.com/@kaustubhgupta1828/).

  * [Using GitHub Actions to Deploy a FastAPI Project to Heroku](https://jarmos.netlify.app/posts/using-github-actions-to-deploy-a-fastapi-project-to-heroku/) by [Somraj Saha](https://jarmos.netlify.app/).

  * [How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI](https://pystar.substack.com/p/how-to-create-a-fake-certificate) by [@pystar](https://pystar.substack.com/).

  * [Building a realtime ticket booking solution with Kafka, FastAPI, and Ably](https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably) by [Ben Gamble](https://uk.linkedin.com/in/bengamble7).

  * [Building simple E-Commerce with NuxtJS and FastAPI](https://www.azepug.az/posts/fastapi/#building-simple-e-commerce-with-nuxtjs-and-fastapi-series) by [Shahriyar(Shako) Rzayev](https://www.linkedin.com/in/shahriyar-rzayev/).

  * [Serve a machine learning model using Sklearn, FastAPI and Docker](https://medium.com/analytics-vidhya/serve-a-machine-learning-model-using-sklearn-fastapi-and-docker-85aabf96729b) by [Rodrigo Arenas](https://rodrigo-arenas.medium.com/).

  * [Building an API with FastAPI and Supabase and Deploying on Deta](https://aunicorndev.hashnode.dev/series/supafast-api) by [Yashasvi Singh](https://hashnode.com/@aUnicornDev).

  * [Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server](https://www.tutlinks.com/deploy-fastapi-on-ubuntu-gunicorn-caddy-2/) by [Navule Pavan Kumar Rao](https://www.linkedin.com/in/navule/).

  * [Python Facebook messenger webhook with FastAPI on Glitch](https://dev.to/factorlive/python-facebook-messenger-webhook-with-fastapi-on-glitch-4n90) by [Patrick Ladon](https://dev.to/factorlive).

  * [Deploy a dockerized FastAPI application to AWS](https://valonjanuzaj.medium.com/deploy-a-dockerized-fastapi-application-to-aws-cc757830ba1b) by [Valon Januzaj](https://www.linkedin.com/in/valon-januzaj-b02692187/).

  * [FastAPI for Flask Users](https://amitness.com/2020/06/fastapi-vs-flask/) by [Amit Chaudhary](https://x.com/amitness).

  * [How to monitor your FastAPI service](https://guitton.co/posts/fastapi-monitoring/) by [Louis Guitton](https://x.com/louis_guitton).

  * [Creating a CRUD App with FastAPI (Part one)](https://medium.com/@gabbyprecious2000/creating-a-crud-app-with-fastapi-part-one-7c049292ad37) by [Precious Ndubueze](https://medium.com/@gabbyprecious2000).

  * [Build And Host Fast Data Science Applications Using FastAPI](https://towardsdatascience.com/build-and-host-fast-data-science-applications-using-fastapi-823be8a1d6a0) by [Farhad Malik](https://medium.com/@farhadmalik).

  * [Deploy FastAPI on Azure App Service](https://www.tutlinks.com/deploy-fastapi-on-azure/) by [Navule Pavan Kumar Rao](https://www.linkedin.com/in/navule/).

  * [Machine learning model serving in Python using FastAPI and streamlit](https://davidefiocco.github.io/streamlit-fastapi-ml-serving/) by [Davide Fiocco](https://github.com/davidefiocco).

  * [Introducing Dispatch](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072) by [Netflix](https://netflixtechblog.com/).

  * [Using FastAPI with Django](https://www.stavros.io/posts/fastapi-with-django/) by [Stavros Korokithakis](https://x.com/Stavros).

  * [Build a Secure Twilio Webhook with Python and FastAPI](https://www.twilio.com/blog/build-secure-twilio-webhook-python-fastapi) by [Twilio](https://www.twilio.com).

  * [Build a web API from scratch with FastAPI - the workshop](https://dev.to/tiangolo/build-a-web-api-from-scratch-with-fastapi-the-workshop-2ehe) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).

  * [FastAPI + Zeit.co = 🚀](https://paulsec.github.io/posts/fastapi_plus_zeit_serverless_fu/) by [Paul Sec](https://x.com/PaulWebSec).

  * [Build simple API service with Python FastAPI — Part 1](https://dev.to/cuongld2/build-simple-api-service-with-python-fastapi-part-1-581o) by [cuongld2](https://dev.to/cuongld2).

  * [Microservice in Python using FastAPI](https://dev.to/paurakhsharma/microservice-in-python-using-fastapi-24cc) by [Paurakh Sharma Humagain](https://x.com/PaurakhSharma).

  * [Real-time Notifications with Python and Postgres](https://wuilly.com/2019/10/real-time-notifications-with-python-and-postgres/) by [Guillermo Cruz](https://wuilly.com/).

  * [Create and Deploy FastAPI app to Heroku without using Docker](https://www.tutlinks.com/create-and-deploy-fastapi-app-to-heroku/) by [Navule Pavan Kumar Rao](https://www.linkedin.com/in/navule/).

  * [Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest](https://medium.com/@arthur393/another-boilerplate-to-fastapi-azure-pipeline-ci-pytest-3c8d9a4be0bb) by [Arthur Henrique](https://x.com/arthurheinrique).

  * [Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker](https://medium.com/analytics-vidhya/deploy-machine-learning-models-with-keras-fastapi-redis-and-docker-4940df614ece) by [Shane Soh](https://medium.com/@shane.soh).

  * [Towards Data Science: Deploying Iris Classifications with FastAPI and Docker](https://towardsdatascience.com/deploying-iris-classifications-with-fastapi-and-docker-7c9b83fdec3a) by [Mandy Gu](https://towardsdatascience.com/@mandygu).

  * [TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest](https://testdriven.io/blog/fastapi-crud/) by [Michael Herman](https://testdriven.io/authors/herman).

  * [How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker](https://medium.com/python-data/how-to-deploy-tensorflow-2-0-models-as-an-api-service-with-fastapi-docker-128b177e81f3) by [Bernard Brenyah](https://medium.com/@bbrenyah).

  * [Why I'm Leaving Flask](https://dev.to/dbanty/why-i-m-leaving-flask-3ki6) by [Dylan Anthony](https://dev.to/dbanty).

  * [Using Docker Compose to deploy a lightweight Python REST API with a job queue](https://medium.com/@mike.p.moritz/using-docker-compose-to-deploy-a-lightweight-python-rest-api-with-a-job-queue-37e6072a209b) by [Mike Moritz](https://medium.com/@mike.p.moritz).

  * [A FastAPI and Swagger UI visual cheatsheet](https://gitlab.com/euri10/fastapi_cheatsheet) by [@euri10](https://gitlab.com/euri10).

  * [Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server]](https://eng.uber.com/ludwig-v0-2/) by [Uber Engineering](https://eng.uber.com).

  * [How to Deploy a Machine Learning Model](https://towardsdatascience.com/how-to-deploy-a-machine-learning-model-dc51200fe8cf) by [Maarten Grootendorst](https://www.linkedin.com/in/mgrootendorst/).

  * [JWT Authentication with FastAPI and AWS Cognito](https://medium.com/@gntrm/jwt-authentication-with-fastapi-and-aws-cognito-1333f7f2729e) by [Johannes Gontrum](https://x.com/gntrm).

  * [Top 5 Asynchronous Web Frameworks for Python](https://geekflare.com/python-asynchronous-web-frameworks/) by [Ankush Thakur](https://geekflare.com/author/ankush/).

  * [Deploying a scikit-learn model with ONNX and FastAPI](https://medium.com/@nico.axtmann95/deploying-a-scikit-learn-model-with-onnx-und-fastapi-1af398268915) by [Nico Axtmann](https://www.linkedin.com/in/nico-axtmann).

  * [FastAPI authentication revisited: Enabling API key authentication](https://medium.com/data-rebels/fastapi-authentication-revisited-enabling-api-key-authentication-122dc5975680) by [Nils de Bruin](https://medium.com/@nilsdebruin).

  * [FastAPI and Scikit-Learn: Easily Deploy Models](https://nickc1.github.io/api,/scikit-learn/2019/01/10/scikit-fastapi.html) by [Nick Cortale](https://nickc1.github.io/).

  * [Introduction to the fastapi python framework](https://dev.to/errietta/introduction-to-the-fastapi-python-framework-2n10) by [Errieta Kostala](https://dev.to/errietta).

  * [FastAPI — How to add basic and cookie authentication](https://medium.com/data-rebels/fastapi-how-to-add-basic-and-cookie-authentication-a45c85ef47d3) by [Nils de Bruin](https://medium.com/@nilsdebruin).

  * [FastAPI — Google as an external authentication provider](https://medium.com/data-rebels/fastapi-google-as-an-external-authentication-provider-3a527672cf33) by [Nils de Bruin](https://medium.com/@nilsdebruin).

  * [FastAPI/Starlette debug vs prod](https://medium.com/@williamhayes/fastapi-starlette-debug-vs-prod-5f7561db3a59) by [William Hayes](https://medium.com/@williamhayes).

  * [Developing FastAPI Application using K8s & AWS](https://www.jetbrains.com/pycharm/guide/tutorials/fastapi-aws-kubernetes/) by [Mukul Mantosh](https://x.com/MantoshMukul).

  * [Fastapi, Docker(Docker compose) and Postgres](https://medium.com/@krishnardt365/fastapi-docker-and-postgres-91943e71be92) by [KrishNa](https://medium.com/@krishnardt365).

  * [Deployment using Docker, Lambda, Aurora, CDK & GH Actions](https://devonray.com/blog/deploying-a-fastapi-project-using-aws-lambda-aurora-cdk) by [Devon Ray](https://devonray.com).

  * [Mastering Soft Delete: Advanced SQLAlchemy Techniques](https://theshubhendra.medium.com/mastering-soft-delete-advanced-sqlalchemy-techniques-4678f4738947) by [Shubhendra Kushwaha](https://www.linkedin.com/in/theshubhendra/).

  * [Role based row filtering: Advanced SQLAlchemy Techniques](https://theshubhendra.medium.com/role-based-row-filtering-advanced-sqlalchemy-techniques-733e6b1328f6) by [Shubhendra Kushwaha](https://www.linkedin.com/in/theshubhendra/).

### German¶

  * [Domain-driven Design mit Python und FastAPI](https://www.actidoo.com/de/blog/python-fastapi-domain-driven-design) by [Marcel Sander (actidoo)](https://www.actidoo.com).

  * [Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI](https://blog.codecentric.de/2019/08/inbetriebnahme-eines-scikit-learn-modells-mit-onnx-und-fastapi/) by [Nico Axtmann](https://x.com/_nicoax).

  * [REST-API Programmieren mittels Python und dem FastAPI Modul](https://hellocoding.de/blog/coding-language/python/fastapi) by [Felix Schürmeyer](https://hellocoding.de/autor/felix-schuermeyer/).

### Japanese¶

  * [[FastAPI] Python製のASGI Web フレームワーク FastAPIに入門する](https://qiita.com/bee2/items/75d9c0d7ba20e7a4a0e9) by [@bee2](https://qiita.com/bee2).

  * [PythonのWeb frameworkのパフォーマンス比較 (Django, Flask, responder, FastAPI, japronto)](https://qiita.com/bee2/items/0ad260ab9835a2087dae) by [@bee2](https://qiita.com/bee2).

  * [【第4回】FastAPIチュートリアル: toDoアプリを作ってみよう【管理者ページ改良編】](https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-admin-page-improvement) by [ライトコードメディア編集部](https://rightcode.co.jp/author/jun).

  * [【第3回】FastAPIチュートリアル: toDoアプリを作ってみよう【認証・ユーザ登録編】](https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-authentication-user-registration) by [ライトコードメディア編集部](https://rightcode.co.jp/author/jun).

  * [【第2回】FastAPIチュートリアル: ToDoアプリを作ってみよう【モデル構築編】](https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-model-building) by [ライトコードメディア編集部](https://rightcode.co.jp/author/jun).

  * [【第1回】FastAPIチュートリアル: ToDoアプリを作ってみよう【環境構築編】](https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-environment) by [ライトコードメディア編集部](https://rightcode.co.jp/author/jun).

  * [フロントエンド開発者向けのDockerによるPython開発環境構築](https://qiita.com/hikarut/items/b178af2e2440c67c6ac4) by [Hikaru Takahashi](https://qiita.com/hikarut).

  * [FastAPIでPOSTされたJSONのレスポンスbodyを受け取る](https://qiita.com/angel_katayoku/items/8a458a8952f50b73f420) by [@angel_katayoku](https://qiita.com/angel_katayoku).

  * [FastAPIをMySQLと接続してDockerで管理してみる](https://qiita.com/angel_katayoku/items/4fbc1a4e2b33fa2237d2) by [@angel_katayoku](https://qiita.com/angel_katayoku).

  * [FastAPIでCORSを回避](https://qiita.com/angel_katayoku/items/0e1f5dbbe62efc612a78) by [@angel_katayoku](https://qiita.com/angel_katayoku).

  * [python製の最新APIフレームワーク FastAPI を触ってみた](https://qiita.com/ryoryomaru/items/59958ed385b3571d50de) by [@ryoryomaru](https://qiita.com/ryoryomaru).

  * [FastAPI｜DB接続してCRUDするPython製APIサーバーを構築](https://qiita.com/mtitg/items/47770e9a562dd150631d) by [@mtitg](https://qiita.com/mtitg).

### Portuguese¶

  * [FastAPI do ZERO](https://fastapidozero.dunossauro.com/) by [Eduardo Mendes](https://bolha.us/@dunossauro).

  * [Dicas para migrar uma aplicação de Flask para FastAPI e vice-versa](https://jtemporal.com/dicas-para-migrar-de-flask-para-fastapi-e-vice-versa/) by [Jessica Temporal](https://jtemporal.com/socials).

### Russian¶

  * [FastAPI: знакомимся с фреймворком](https://trkohler.com/fast-api-introduction-to-framework) by [Troy Köhler](https://www.linkedin.com/in/trkohler/).

  * [Почему Вы должны попробовать FastAPI?](https://habr.com/ru/post/478620/) by [prostomarkeloff](https://github.com/prostomarkeloff).

  * [Мелкая питонячая радость #2: Starlette - Солидная примочка – FastAPI](https://habr.com/ru/post/454440/) by [Andrey Korchak](https://habr.com/ru/users/57uff3r/).

### Vietnamese¶

  * [FASTAPI: TRIỂN KHAI BẰNG DOCKER](https://fullstackstation.com/fastapi-trien-khai-bang-docker/) by [Nguyễn Nhân](https://fullstackstation.com/author/figonking/).

### Taiwanese¶

  * [Tortoise ORM / FastAPI 整合快速筆記](https://editor.leonh.space/2022/tortoise/) by [Leon](http://editor.leonh.space/).

### Spanish¶

  * [Tutorial de FastAPI, ¿el mejor framework de Python?](https://coffeebytes.dev/es/python-fastapi-el-mejor-framework-de-python/) by [Eduardo Zepeda](https://coffeebytes.dev/en/authors/eduardo-zepeda/).

## Podcasts¶

### English¶

  * [Starting With FastAPI and Examining Python's Import System - Episode 72](https://realpython.com/podcasts/rpp/72/) by [Real Python](https://realpython.com/).

  * [Do you dare to press "."? - Episode 247 - Dan #6: SQLModel - use the same models for SQL and FastAPI](https://www.pythonpodcast.com/fastapi-web-application-framework-episode-259/) by [Python Bytes FM](https://pythonbytes.fm/).

  * [Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebastían Ramírez (tiangolo)](https://www.pythonpodcast.com/fastapi-web-application-framework-episode-259/) by [Podcast.`__init__`](https://www.pythonpodcast.com/).

  * [FastAPI on PythonBytes](https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855) by [Python Bytes FM](https://pythonbytes.fm/).

## Talks¶

### English¶

  * [PyCon AU 2023: Testing asynchronous applications with FastAPI and pytest](https://www.youtube.com/watch?v=uZdTe8_Z6BQ) by [Jeny Sadadia](https://github.com/JenySadadia).

  * [[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI](https://www.youtube.com/watch?v=PnpTY1f4k2U) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).

  * [PyConBY 2020: Serve ML models easily with FastAPI](https://www.youtube.com/watch?v=z9K5pwb0rt8) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).

  * [PyCon UK 2019: FastAPI from the ground up](https://www.youtube.com/watch?v=3DLwPcrE5mA) by [Chris Withers](https://x.com/chriswithers13).

### Taiwanese¶

  * [PyCon TW 2024: 全方位強化 Python 服務可觀測性：以 FastAPI 和 Grafana Stack 為例](https://www.youtube.com/watch?v=y3sumuoDq4w) by [Blueswen](https://github.com/blueswen).

## GitHub Repositories¶

Most starred GitHub repositories with the topic `fastapi`:

[★ 37341 - full-stack-fastapi-template](https://github.com/fastapi/full-stack-fastapi-template) by [@fastapi](https://github.com/fastapi).

[★ 31799 - Hello-Python](https://github.com/mouredev/Hello-Python) by [@mouredev](https://github.com/mouredev).

[★ 21721 - serve](https://github.com/jina-ai/serve) by [@jina-ai](https://github.com/jina-ai).

[★ 19114 - HivisionIDPhotos](https://github.com/Zeyi-Lin/HivisionIDPhotos) by [@Zeyi-Lin](https://github.com/Zeyi-Lin).

[★ 16678 - sqlmodel](https://github.com/fastapi/sqlmodel) by [@fastapi](https://github.com/fastapi).

[★ 14126 - Douyin_TikTok_Download_API](https://github.com/Evil0ctal/Douyin_TikTok_Download_API) by [@Evil0ctal](https://github.com/Evil0ctal).

[★ 13189 - fastapi-best-practices](https://github.com/zhanymkanov/fastapi-best-practices) by [@zhanymkanov](https://github.com/zhanymkanov).

[★ 10264 - awesome-fastapi](https://github.com/mjhea0/awesome-fastapi) by [@mjhea0](https://github.com/mjhea0).

[★ 9964 - fastapi_mcp](https://github.com/tadata-org/fastapi_mcp) by [@tadata-org](https://github.com/tadata-org).

[★ 8861 - FastUI](https://github.com/pydantic/FastUI) by [@pydantic](https://github.com/pydantic).

[★ 8576 - XHS-Downloader](https://github.com/JoeanAmier/XHS-Downloader) by [@JoeanAmier](https://github.com/JoeanAmier).

[★ 7421 - SurfSense](https://github.com/MODSetter/SurfSense) by [@MODSetter](https://github.com/MODSetter).

[★ 7179 - FileCodeBox](https://github.com/vastsa/FileCodeBox) by [@vastsa](https://github.com/vastsa).

[★ 7106 - polar](https://github.com/polarsource/polar) by [@polarsource](https://github.com/polarsource).

[★ 6998 - nonebot2](https://github.com/nonebot/nonebot2) by [@nonebot](https://github.com/nonebot).

[★ 5978 - hatchet](https://github.com/hatchet-dev/hatchet) by [@hatchet-dev](https://github.com/hatchet-dev).

[★ 5751 - serge](https://github.com/serge-chat/serge) by [@serge-chat](https://github.com/serge-chat).

[★ 5517 - fastapi-users](https://github.com/fastapi-users/fastapi-users) by [@fastapi-users](https://github.com/fastapi-users).

[★ 4392 - strawberry](https://github.com/strawberry-graphql/strawberry) by [@strawberry-graphql](https://github.com/strawberry-graphql).

[★ 4305 - chatgpt-web-share](https://github.com/chatpire/chatgpt-web-share) by [@chatpire](https://github.com/chatpire).

[★ 4157 - poem](https://github.com/poem-web/poem) by [@poem-web](https://github.com/poem-web).

[★ 4112 - dynaconf](https://github.com/dynaconf/dynaconf) by [@dynaconf](https://github.com/dynaconf).

[★ 4104 - atrilabs-engine](https://github.com/Atri-Labs/atrilabs-engine) by [@Atri-Labs](https://github.com/Atri-Labs).

[★ 3569 - Kokoro-FastAPI](https://github.com/remsky/Kokoro-FastAPI) by [@remsky](https://github.com/remsky).

[★ 3531 - LitServe](https://github.com/Lightning-AI/LitServe) by [@Lightning-AI](https://github.com/Lightning-AI).

[★ 3510 - logfire](https://github.com/pydantic/logfire) by [@pydantic](https://github.com/pydantic).

[★ 3425 - datamodel-code-generator](https://github.com/koxudaxi/datamodel-code-generator) by [@koxudaxi](https://github.com/koxudaxi).

[★ 3420 - farfalle](https://github.com/rashadphz/farfalle) by [@rashadphz](https://github.com/rashadphz).

[★ 3417 - fastapi-admin](https://github.com/fastapi-admin/fastapi-admin) by [@fastapi-admin](https://github.com/fastapi-admin).

[★ 3351 - huma](https://github.com/danielgtaylor/huma) by [@danielgtaylor](https://github.com/danielgtaylor).

[★ 3213 - tracecat](https://github.com/TracecatHQ/tracecat) by [@TracecatHQ](https://github.com/TracecatHQ).

[★ 3131 - opyrator](https://github.com/ml-tooling/opyrator) by [@ml-tooling](https://github.com/ml-tooling).

[★ 3098 - docarray](https://github.com/docarray/docarray) by [@docarray](https://github.com/docarray).

[★ 2925 - fastapi-realworld-example-app](https://github.com/nsidnev/fastapi-realworld-example-app) by [@nsidnev](https://github.com/nsidnev).

[★ 2796 - uvicorn-gunicorn-fastapi-docker](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker) by [@tiangolo](https://github.com/tiangolo).

[★ 2583 - best-of-web-python](https://github.com/ml-tooling/best-of-web-python) by [@ml-tooling](https://github.com/ml-tooling).

[★ 2438 - RasaGPT](https://github.com/paulpierre/RasaGPT) by [@paulpierre](https://github.com/paulpierre).

[★ 2432 - fastapi-react](https://github.com/Buuntu/fastapi-react) by [@Buuntu](https://github.com/Buuntu).

[★ 2388 - FastAPI-template](https://github.com/s3rius/FastAPI-template) by [@s3rius](https://github.com/s3rius).

[★ 2323 - sqladmin](https://github.com/aminalaee/sqladmin) by [@aminalaee](https://github.com/aminalaee).

[★ 2314 - nextpy](https://github.com/dot-agent/nextpy) by [@dot-agent](https://github.com/dot-agent).

[★ 2236 - mcp-context-forge](https://github.com/IBM/mcp-context-forge) by [@IBM](https://github.com/IBM).

[★ 2196 - 30-Days-of-Python](https://github.com/codingforentrepreneurs/30-Days-of-Python) by [@codingforentrepreneurs](https://github.com/codingforentrepreneurs).

[★ 2194 - supabase-py](https://github.com/supabase/supabase-py) by [@supabase](https://github.com/supabase).

[★ 2157 - langserve](https://github.com/langchain-ai/langserve) by [@langchain-ai](https://github.com/langchain-ai).

[★ 2155 - fastapi-utils](https://github.com/fastapiutils/fastapi-utils) by [@fastapiutils](https://github.com/fastapiutils).

[★ 2083 - solara](https://github.com/widgetti/solara) by [@widgetti](https://github.com/widgetti).

[★ 1969 - mangum](https://github.com/Kludex/mangum) by [@Kludex](https://github.com/Kludex).

[★ 1849 - Yuxi-Know](https://github.com/xerrors/Yuxi-Know) by [@xerrors](https://github.com/xerrors).

[★ 1817 - python-week-2022](https://github.com/rochacbruno/python-week-2022) by [@rochacbruno](https://github.com/rochacbruno).

[★ 1779 - agentkit](https://github.com/BCG-X-Official/agentkit) by [@BCG-X-Official](https://github.com/BCG-X-Official).

[★ 1770 - manage-fastapi](https://github.com/ycd/manage-fastapi) by [@ycd](https://github.com/ycd).

[★ 1766 - ormar](https://github.com/collerek/ormar) by [@collerek](https://github.com/collerek).

[★ 1673 - piccolo](https://github.com/piccolo-orm/piccolo) by [@piccolo-orm](https://github.com/piccolo-orm).

[★ 1667 - openapi-python-client](https://github.com/openapi-generators/openapi-python-client) by [@openapi-generators](https://github.com/openapi-generators).

[★ 1632 - langchain-serve](https://github.com/jina-ai/langchain-serve) by [@jina-ai](https://github.com/jina-ai).

[★ 1628 - fastapi-cache](https://github.com/long2ice/fastapi-cache) by [@long2ice](https://github.com/long2ice).

[★ 1622 - termpair](https://github.com/cs01/termpair) by [@cs01](https://github.com/cs01).

[★ 1591 - vue-fastapi-admin](https://github.com/mizhexiaoxiao/vue-fastapi-admin) by [@mizhexiaoxiao](https://github.com/mizhexiaoxiao).

[★ 1580 - slowapi](https://github.com/laurentS/slowapi) by [@laurentS](https://github.com/laurentS).

[★ 1578 - coronavirus-tracker-api](https://github.com/ExpDev07/coronavirus-tracker-api) by [@ExpDev07](https://github.com/ExpDev07).

[★ 1531 - fastapi-crudrouter](https://github.com/awtkns/fastapi-crudrouter) by [@awtkns](https://github.com/awtkns).

[★ 1473 - awesome-fastapi-projects](https://github.com/Kludex/awesome-fastapi-projects) by [@Kludex](https://github.com/Kludex).

[★ 1432 - FastAPI-boilerplate](https://github.com/benavlabs/FastAPI-boilerplate) by [@benavlabs](https://github.com/benavlabs).

[★ 1428 - fastapi-pagination](https://github.com/uriyyo/fastapi-pagination) by [@uriyyo](https://github.com/uriyyo).

[★ 1413 - awesome-python-resources](https://github.com/DjangoEx/awesome-python-resources) by [@DjangoEx](https://github.com/DjangoEx).

[★ 1393 - bracket](https://github.com/evroon/bracket) by [@evroon](https://github.com/evroon).

[★ 1385 - fastapi-boilerplate](https://github.com/teamhide/fastapi-boilerplate) by [@teamhide](https://github.com/teamhide).

[★ 1345 - budgetml](https://github.com/ebhy/budgetml) by [@ebhy](https://github.com/ebhy).

[★ 1327 - fastapi-amis-admin](https://github.com/amisadmin/fastapi-amis-admin) by [@amisadmin](https://github.com/amisadmin).

[★ 1297 - fastapi-tutorial](https://github.com/liaogx/fastapi-tutorial) by [@liaogx](https://github.com/liaogx).

[★ 1242 - fastapi_best_architecture](https://github.com/fastapi-practices/fastapi_best_architecture) by [@fastapi-practices](https://github.com/fastapi-practices).

[★ 1241 - fastapi-code-generator](https://github.com/koxudaxi/fastapi-code-generator) by [@koxudaxi](https://github.com/koxudaxi).

[★ 1236 - fastcrud](https://github.com/benavlabs/fastcrud) by [@benavlabs](https://github.com/benavlabs).

[★ 1217 - prometheus-fastapi-instrumentator](https://github.com/trallnag/prometheus-fastapi-instrumentator) by [@trallnag](https://github.com/trallnag).

[★ 1209 - bolt-python](https://github.com/slackapi/bolt-python) by [@slackapi](https://github.com/slackapi).

[★ 1199 - bedrock-chat](https://github.com/aws-samples/bedrock-chat) by [@aws-samples](https://github.com/aws-samples).

[★ 1182 - fastapi_production_template](https://github.com/zhanymkanov/fastapi_production_template) by [@zhanymkanov](https://github.com/zhanymkanov).

[★ 1162 - langchain-extract](https://github.com/langchain-ai/langchain-extract) by [@langchain-ai](https://github.com/langchain-ai).

[★ 1150 - fastapi-langgraph-agent-production-ready-template](https://github.com/wassim249/fastapi-langgraph-agent-production-ready-template) by [@wassim249](https://github.com/wassim249).

[★ 1145 - fastapi-alembic-sqlmodel-async](https://github.com/jonra1993/fastapi-alembic-sqlmodel-async) by [@jonra1993](https://github.com/jonra1993).

[★ 1130 - odmantic](https://github.com/art049/odmantic) by [@art049](https://github.com/art049).

[★ 1107 - restish](https://github.com/rest-sh/restish) by [@rest-sh](https://github.com/rest-sh).

[★ 1052 - fastapi-scaff](https://github.com/atpuxiner/fastapi-scaff) by [@atpuxiner](https://github.com/atpuxiner).

[★ 1043 - runhouse](https://github.com/run-house/runhouse) by [@run-house](https://github.com/run-house).

[★ 1010 - flock](https://github.com/Onelevenvy/flock) by [@Onelevenvy](https://github.com/Onelevenvy).

[★ 995 - autollm](https://github.com/viddexa/autollm) by [@viddexa](https://github.com/viddexa).

[★ 994 - lanarky](https://github.com/ajndkr/lanarky) by [@ajndkr](https://github.com/ajndkr).

[★ 978 - authx](https://github.com/yezz123/authx) by [@yezz123](https://github.com/yezz123).

[★ 942 - secure](https://github.com/TypeError/secure) by [@TypeError](https://github.com/TypeError).

[★ 940 - titiler](https://github.com/developmentseed/titiler) by [@developmentseed](https://github.com/developmentseed).

[★ 937 - energy-forecasting](https://github.com/iusztinpaul/energy-forecasting) by [@iusztinpaul](https://github.com/iusztinpaul).

[★ 933 - langcorn](https://github.com/msoedov/langcorn) by [@msoedov](https://github.com/msoedov).

[★ 892 - fastapi-do-zero](https://github.com/dunossauro/fastapi-do-zero) by [@dunossauro](https://github.com/dunossauro).

[★ 890 - marker-api](https://github.com/adithya-s-k/marker-api) by [@adithya-s-k](https://github.com/adithya-s-k).

[★ 884 - RuoYi-Vue3-FastAPI](https://github.com/insistence/RuoYi-Vue3-FastAPI) by [@insistence](https://github.com/insistence).

[★ 880 - aktools](https://github.com/akfamily/aktools) by [@akfamily](https://github.com/akfamily).

[★ 880 - fastapi-observability](https://github.com/blueswen/fastapi-observability) by [@blueswen](https://github.com/blueswen).

[★ 876 - httpdbg](https://github.com/cle-b/httpdbg) by [@cle-b](https://github.com/cle-b).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## FastAPI People - FastAPI

**URL**: https://fastapi.tiangolo.com/fastapi-people/
**Depth**: 1

# FastAPI People¶

FastAPI has an amazing community that welcomes people from all backgrounds.

## Creator¶

Hey! 👋

This is me:

[@tiangolo](https://github.com/tiangolo)

Answers: 1900

Pull Requests: 776

I'm the creator of **FastAPI**. You can

...But here I want to show you the community.

* * *

**FastAPI** receives a lot of support from the community. And I want to highlight their contributions.

These are the people that:

  * [Help others with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github).
  * [Create Pull Requests](../help-fastapi/#create-a-pull-request).
  * Review Pull Requests, [especially important for translations](../contributing/#translations).
  * Help [manage the repository](../management-tasks/) (team members).

All these tasks help maintain the repository.

A round of applause to them. 👏 🙇

## Team¶

This is the current list of team members. 😎

They have different levels of involvement and permissions, they can perform [repository management tasks](../management-tasks/) and together we [manage the FastAPI repository](../management/).

[@tiangolo](https://github.com/tiangolo)

[@Kludex](https://github.com/Kludex)

[@alejsdev](https://github.com/alejsdev)

[@svlandeg](https://github.com/svlandeg)

[@YuriiMotov](https://github.com/YuriiMotov)

[@patrick91](https://github.com/patrick91)

[@luzzodev](https://github.com/luzzodev)

Although the team members have the permissions to perform privileged tasks, all the [help from others maintaining FastAPI](../help-fastapi/#help-maintain-fastapi) is very much appreciated! 🙇‍♂️

## FastAPI Experts¶

These are the users that have been [helping others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github). 🙇

They have proven to be **FastAPI Experts** by helping many others. ✨

Tip

You could become an official FastAPI Expert too!

Just [help others with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github). 🤓

You can see the **FastAPI Experts** for:

  * Last Month 🤓
  * 3 Months 😎
  * 6 Months 🧐
  * 1 Year 🧑‍🔬
  * **All Time** 🧙

### FastAPI Experts - Last Month¶

These are the users that have been [helping others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github) during the last month. 🤓

[@YuriiMotov](https://github.com/YuriiMotov)

Questions replied: 17

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Questions replied: 5

[@yinziyan1206](https://github.com/yinziyan1206)

Questions replied: 4

[@luzzodev](https://github.com/luzzodev)

Questions replied: 2

### FastAPI Experts - 3 Months¶

These are the users that have been [helping others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github) during the last 3 months. 😎

[@YuriiMotov](https://github.com/YuriiMotov)

Questions replied: 397

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Questions replied: 24

[@luzzodev](https://github.com/luzzodev)

Questions replied: 17

[@raceychan](https://github.com/raceychan)

Questions replied: 6

[@yinziyan1206](https://github.com/yinziyan1206)

Questions replied: 5

[@DoctorJohn](https://github.com/DoctorJohn)

Questions replied: 5

[@sachinh35](https://github.com/sachinh35)

Questions replied: 4

[@eqsdxr](https://github.com/eqsdxr)

Questions replied: 4

[@Jelle-tenB](https://github.com/Jelle-tenB)

Questions replied: 3

### FastAPI Experts - 6 Months¶

These are the users that have been [helping others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github) during the last 6 months. 🧐

[@YuriiMotov](https://github.com/YuriiMotov)

Questions replied: 763

[@luzzodev](https://github.com/luzzodev)

Questions replied: 45

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Questions replied: 24

[@alv2017](https://github.com/alv2017)

Questions replied: 16

[@sachinh35](https://github.com/sachinh35)

Questions replied: 9

[@yauhen-sobaleu](https://github.com/yauhen-sobaleu)

Questions replied: 9

[@JavierSanchezCastro](https://github.com/JavierSanchezCastro)

Questions replied: 6

[@raceychan](https://github.com/raceychan)

Questions replied: 6

[@yinziyan1206](https://github.com/yinziyan1206)

Questions replied: 5

### FastAPI Experts - 1 Year¶

These are the users that have been [helping others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github) during the last year. 🧑‍🔬

[@YuriiMotov](https://github.com/YuriiMotov)

Questions replied: 824

[@luzzodev](https://github.com/luzzodev)

Questions replied: 89

[@Kludex](https://github.com/Kludex)

Questions replied: 50

[@sinisaos](https://github.com/sinisaos)

Questions replied: 33

[@alv2017](https://github.com/alv2017)

Questions replied: 26

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Questions replied: 24

[@JavierSanchezCastro](https://github.com/JavierSanchezCastro)

Questions replied: 24

[@jgould22](https://github.com/jgould22)

Questions replied: 17

[@Kfir-G](https://github.com/Kfir-G)

Questions replied: 13

[@sehraramiz](https://github.com/sehraramiz)

Questions replied: 11

[@sachinh35](https://github.com/sachinh35)

Questions replied: 9

[@yauhen-sobaleu](https://github.com/yauhen-sobaleu)

Questions replied: 9

[@estebanx64](https://github.com/estebanx64)

Questions replied: 7

[@ceb10n](https://github.com/ceb10n)

Questions replied: 7

[@yvallois](https://github.com/yvallois)

Questions replied: 7

[@raceychan](https://github.com/raceychan)

Questions replied: 6

[@yinziyan1206](https://github.com/yinziyan1206)

Questions replied: 5

[@DoctorJohn](https://github.com/DoctorJohn)

Questions replied: 5

[@n8sty](https://github.com/n8sty)

Questions replied: 5

### FastAPI Experts - All Time¶

Here are the all time **FastAPI Experts**. 🤓🤯

These are the users that have [helped others the most with questions in GitHub](../help-fastapi/#help-others-with-questions-in-github) through _all time_. 🧙

[@YuriiMotov](https://github.com/YuriiMotov)

Questions replied: 971

[@Kludex](https://github.com/Kludex)

Questions replied: 654

[@jgould22](https://github.com/jgould22)

Questions replied: 263

[@dmontagu](https://github.com/dmontagu)

Questions replied: 240

[@Mause](https://github.com/Mause)

Questions replied: 219

[@ycd](https://github.com/ycd)

Questions replied: 216

[@JarroVGIT](https://github.com/JarroVGIT)

Questions replied: 190

[@euri10](https://github.com/euri10)

Questions replied: 153

[@iudeen](https://github.com/iudeen)

Questions replied: 128

[@phy25](https://github.com/phy25)

Questions replied: 126

[@JavierSanchezCastro](https://github.com/JavierSanchezCastro)

Questions replied: 94

[@luzzodev](https://github.com/luzzodev)

Questions replied: 89

[@raphaelauv](https://github.com/raphaelauv)

Questions replied: 83

[@ArcLightSlavik](https://github.com/ArcLightSlavik)

Questions replied: 71

[@ghandic](https://github.com/ghandic)

Questions replied: 71

[@n8sty](https://github.com/n8sty)

Questions replied: 67

[@falkben](https://github.com/falkben)

Questions replied: 59

[@yinziyan1206](https://github.com/yinziyan1206)

Questions replied: 54

[@sm-Fifteen](https://github.com/sm-Fifteen)

Questions replied: 49

[@acidjunk](https://github.com/acidjunk)

Questions replied: 49

[@adriangb](https://github.com/adriangb)

Questions replied: 46

[@Dustyposa](https://github.com/Dustyposa)

Questions replied: 45

[@insomnes](https://github.com/insomnes)

Questions replied: 45

[@frankie567](https://github.com/frankie567)

Questions replied: 43

[@odiseo0](https://github.com/odiseo0)

Questions replied: 43

[@sinisaos](https://github.com/sinisaos)

Questions replied: 41

[@includeamin](https://github.com/includeamin)

Questions replied: 40

[@STeveShary](https://github.com/STeveShary)

Questions replied: 37

[@chbndrhnns](https://github.com/chbndrhnns)

Questions replied: 37

[@krishnardt](https://github.com/krishnardt)

Questions replied: 35

[@panla](https://github.com/panla)

Questions replied: 32

[@prostomarkeloff](https://github.com/prostomarkeloff)

Questions replied: 28

[@hasansezertasan](https://github.com/hasansezertasan)

Questions replied: 27

[@alv2017](https://github.com/alv2017)

Questions replied: 26

[@dbanty](https://github.com/dbanty)

Questions replied: 26

[@wshayes](https://github.com/wshayes)

Questions replied: 25

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Questions replied: 24

[@SirTelemak](https://github.com/SirTelemak)

Questions replied: 23

[@connebs](https://github.com/connebs)

Questions replied: 22

[@nymous](https://github.com/nymous)

Questions replied: 22

[@chrisK824](https://github.com/chrisK824)

Questions replied: 22

[@rafsaf](https://github.com/rafsaf)

Questions replied: 21

[@nsidnev](https://github.com/nsidnev)

Questions replied: 20

[@chris-allnutt](https://github.com/chris-allnutt)

Questions replied: 20

[@ebottos94](https://github.com/ebottos94)

Questions replied: 20

[@estebanx64](https://github.com/estebanx64)

Questions replied: 19

[@sehraramiz](https://github.com/sehraramiz)

Questions replied: 18

[@retnikt](https://github.com/retnikt)

Questions replied: 18

## Top Contributors¶

Here are the **Top Contributors**. 👷

These users have [created the most Pull Requests](../help-fastapi/#create-a-pull-request) that have been _merged_.

They have contributed source code, documentation, etc. 📦

[@alejsdev](https://github.com/alejsdev)

Pull Requests: 48

[@Kludex](https://github.com/Kludex)

Pull Requests: 23

[@dmontagu](https://github.com/dmontagu)

Pull Requests: 17

[@euri10](https://github.com/euri10)

Pull Requests: 13

[@kantandane](https://github.com/kantandane)

Pull Requests: 13

[@nilslindemann](https://github.com/nilslindemann)

Pull Requests: 11

[@zhaohan-dong](https://github.com/zhaohan-dong)

Pull Requests: 11

[@mariacamilagl](https://github.com/mariacamilagl)

Pull Requests: 9

[@handabaldeep](https://github.com/handabaldeep)

Pull Requests: 9

[@vishnuvskvkl](https://github.com/vishnuvskvkl)

Pull Requests: 8

[@svlandeg](https://github.com/svlandeg)

Pull Requests: 7

[@alissadb](https://github.com/alissadb)

Pull Requests: 6

[@YuriiMotov](https://github.com/YuriiMotov)

Pull Requests: 6

[@wshayes](https://github.com/wshayes)

Pull Requests: 5

[@samuelcolvin](https://github.com/samuelcolvin)

Pull Requests: 5

[@waynerv](https://github.com/waynerv)

Pull Requests: 5

[@krishnamadhavan](https://github.com/krishnamadhavan)

Pull Requests: 5

[@alv2017](https://github.com/alv2017)

Pull Requests: 5

[@jekirl](https://github.com/jekirl)

Pull Requests: 4

[@hitrust](https://github.com/hitrust)

Pull Requests: 4

[@ShahriyarR](https://github.com/ShahriyarR)

Pull Requests: 4

[@adriangb](https://github.com/adriangb)

Pull Requests: 4

[@iudeen](https://github.com/iudeen)

Pull Requests: 4

[@philipokiokio](https://github.com/philipokiokio)

Pull Requests: 4

[@AlexWendland](https://github.com/AlexWendland)

Pull Requests: 4

[@divums](https://github.com/divums)

Pull Requests: 3

[@prostomarkeloff](https://github.com/prostomarkeloff)

Pull Requests: 3

[@nsidnev](https://github.com/nsidnev)

Pull Requests: 3

[@pawamoy](https://github.com/pawamoy)

Pull Requests: 3

[@patrickmckenna](https://github.com/patrickmckenna)

Pull Requests: 3

[@hukkin](https://github.com/hukkin)

Pull Requests: 3

[@marcosmmb](https://github.com/marcosmmb)

Pull Requests: 3

[@Serrones](https://github.com/Serrones)

Pull Requests: 3

[@uriyyo](https://github.com/uriyyo)

Pull Requests: 3

[@andrew222651](https://github.com/andrew222651)

Pull Requests: 3

[@rkbeatss](https://github.com/rkbeatss)

Pull Requests: 3

[@asheux](https://github.com/asheux)

Pull Requests: 3

[@blkst8](https://github.com/blkst8)

Pull Requests: 3

[@ghandic](https://github.com/ghandic)

Pull Requests: 3

[@TeoZosa](https://github.com/TeoZosa)

Pull Requests: 3

[@graingert](https://github.com/graingert)

Pull Requests: 3

[@jaystone776](https://github.com/jaystone776)

Pull Requests: 3

[@zanieb](https://github.com/zanieb)

Pull Requests: 3

[@MicaelJarniac](https://github.com/MicaelJarniac)

Pull Requests: 3

[@papb](https://github.com/papb)

Pull Requests: 3

[@musicinmybrain](https://github.com/musicinmybrain)

Pull Requests: 3

There are hundreds of other contributors, you can see them all in the [FastAPI GitHub Contributors page](https://github.com/fastapi/fastapi/graphs/contributors). 👷

## Top Translators¶

These are the **Top Translators**. 🌐

These users have created the most Pull Requests with [translations to other languages](../contributing/#translations) that have been _merged_.

[@nilslindemann](https://github.com/nilslindemann)

Translations: 120

[@jaystone776](https://github.com/jaystone776)

Translations: 46

[@valentinDruzhinin](https://github.com/valentinDruzhinin)

Translations: 29

[@ceb10n](https://github.com/ceb10n)

Translations: 27

[@tokusumi](https://github.com/tokusumi)

Translations: 23

[@SwftAlpc](https://github.com/SwftAlpc)

Translations: 23

[@hasansezertasan](https://github.com/hasansezertasan)

Translations: 22

[@waynerv](https://github.com/waynerv)

Translations: 20

[@AlertRED](https://github.com/AlertRED)

Translations: 16

[@hard-coders](https://github.com/hard-coders)

Translations: 15

[@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda)

Translations: 14

[@codingjenny](https://github.com/codingjenny)

Translations: 14

[@Xewus](https://github.com/Xewus)

Translations: 13

[@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng)

Translations: 13

[@Smlep](https://github.com/Smlep)

Translations: 11

[@marcelomarkus](https://github.com/marcelomarkus)

Translations: 11

[@KaniKim](https://github.com/KaniKim)

Translations: 10

[@Vincy1230](https://github.com/Vincy1230)

Translations: 9

[@rjNemo](https://github.com/rjNemo)

Translations: 8

[@xzmeng](https://github.com/xzmeng)

Translations: 8

[@pablocm83](https://github.com/pablocm83)

Translations: 8

[@ptt3199](https://github.com/ptt3199)

Translations: 7

[@NinaHwang](https://github.com/NinaHwang)

Translations: 6

[@batlopes](https://github.com/batlopes)

Translations: 6

[@lucasbalieiro](https://github.com/lucasbalieiro)

Translations: 6

[@Alexandrhub](https://github.com/Alexandrhub)

Translations: 6

[@Serrones](https://github.com/Serrones)

Translations: 5

[@RunningIkkyu](https://github.com/RunningIkkyu)

Translations: 5

[@Attsun1031](https://github.com/Attsun1031)

Translations: 5

[@rostik1410](https://github.com/rostik1410)

Translations: 5

[@alv2017](https://github.com/alv2017)

Translations: 5

[@komtaki](https://github.com/komtaki)

Translations: 4

[@JulianMaurin](https://github.com/JulianMaurin)

Translations: 4

[@stlucasgarcia](https://github.com/stlucasgarcia)

Translations: 4

[@ComicShrimp](https://github.com/ComicShrimp)

Translations: 4

[@BilalAlpaslan](https://github.com/BilalAlpaslan)

Translations: 4

[@axel584](https://github.com/axel584)

Translations: 4

[@tamtam-fitness](https://github.com/tamtam-fitness)

Translations: 4

[@Limsunoh](https://github.com/Limsunoh)

Translations: 4

[@kwang1215](https://github.com/kwang1215)

Translations: 4

[@k94-ishi](https://github.com/k94-ishi)

Translations: 4

[@Mohammad222PR](https://github.com/Mohammad222PR)

Translations: 4

[@NavesSapnis](https://github.com/NavesSapnis)

Translations: 4

[@jfunez](https://github.com/jfunez)

Translations: 3

[@ycd](https://github.com/ycd)

Translations: 3

[@mariacamilagl](https://github.com/mariacamilagl)

Translations: 3

[@maoyibo](https://github.com/maoyibo)

Translations: 3

[@blt232018](https://github.com/blt232018)

Translations: 3

[@magiskboy](https://github.com/magiskboy)

Translations: 3

## Top Translation Reviewers¶

These users are the **Top Translation Reviewers**. 🕵️

I only speak a few languages (and not very well 😅). So, the reviewers are the ones that have the [**power to approve translations**](../contributing/#translations) of the documentation. Without them, there wouldn't be documentation in several other languages.

[@s111d](https://github.com/s111d)

Reviews: 147

[@Xewus](https://github.com/Xewus)

Reviews: 140

[@sodaMelon](https://github.com/sodaMelon)

Reviews: 127

[@ceb10n](https://github.com/ceb10n)

Reviews: 116

[@tokusumi](https://github.com/tokusumi)

Reviews: 104

[@hasansezertasan](https://github.com/hasansezertasan)

Reviews: 95

[@hard-coders](https://github.com/hard-coders)

Reviews: 93

[@alv2017](https://github.com/alv2017)

Reviews: 88

[@nazarepiedady](https://github.com/nazarepiedady)

Reviews: 86

[@AlertRED](https://github.com/AlertRED)

Reviews: 81

[@Alexandrhub](https://github.com/Alexandrhub)

Reviews: 68

[@waynerv](https://github.com/waynerv)

Reviews: 63

[@cassiobotaro](https://github.com/cassiobotaro)

Reviews: 62

[@mattwang44](https://github.com/mattwang44)

Reviews: 59

[@Laineyzhang55](https://github.com/Laineyzhang55)

Reviews: 48

[@Kludex](https://github.com/Kludex)

Reviews: 47

[@komtaki](https://github.com/komtaki)

Reviews: 45

[@rostik1410](https://github.com/rostik1410)

Reviews: 42

[@svlandeg](https://github.com/svlandeg)

Reviews: 42

[@alperiox](https://github.com/alperiox)

Reviews: 42

[@Rishat-F](https://github.com/Rishat-F)

Reviews: 42

[@nilslindemann](https://github.com/nilslindemann)

Reviews: 41

[@Winand](https://github.com/Winand)

Reviews: 40

[@solomein-sv](https://github.com/solomein-sv)

Reviews: 38

[@JavierSanchezCastro](https://github.com/JavierSanchezCastro)

Reviews: 38

[@alejsdev](https://github.com/alejsdev)

Reviews: 37

[@stlucasgarcia](https://github.com/stlucasgarcia)

Reviews: 36

[@SwftAlpc](https://github.com/SwftAlpc)

Reviews: 36

[@timothy-jeong](https://github.com/timothy-jeong)

Reviews: 36

[@mezgoodle](https://github.com/mezgoodle)

Reviews: 35

[@rjNemo](https://github.com/rjNemo)

Reviews: 34

[@codingjenny](https://github.com/codingjenny)

Reviews: 34

[@akarev0](https://github.com/akarev0)

Reviews: 33

[@romashevchenko](https://github.com/romashevchenko)

Reviews: 32

[@YuriiMotov](https://github.com/YuriiMotov)

Reviews: 31

[@LorhanSohaky](https://github.com/LorhanSohaky)

Reviews: 30

[@Vincy1230](https://github.com/Vincy1230)

Reviews: 30

[@black-redoc](https://github.com/black-redoc)

Reviews: 29

[@pedabraham](https://github.com/pedabraham)

Reviews: 28

[@Smlep](https://github.com/Smlep)

Reviews: 28

[@dedkot01](https://github.com/dedkot01)

Reviews: 28

[@hsuanchi](https://github.com/hsuanchi)

Reviews: 28

[@dpinezich](https://github.com/dpinezich)

Reviews: 28

[@maoyibo](https://github.com/maoyibo)

Reviews: 27

[@0417taehyun](https://github.com/0417taehyun)

Reviews: 27

[@BilalAlpaslan](https://github.com/BilalAlpaslan)

Reviews: 26

[@junah201](https://github.com/junah201)

Reviews: 26

[@zy7y](https://github.com/zy7y)

Reviews: 25

[@mycaule](https://github.com/mycaule)

Reviews: 25

## Sponsors¶

These are the **Sponsors**. 😎

They are supporting my work with **FastAPI** (and others), mainly through [GitHub Sponsors](https://github.com/sponsors/tiangolo).

### Gold Sponsors¶

[](https://blockbee.io?ref=fastapi "BlockBee Cryptocurrency Payment Gateway") [](https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge "Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files") [](https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge "Auth, user management and more for your B2B product") [](https://zuplo.link/fastapi-gh "Zuplo: Deploy, Secure, Document, and Monetize your FastAPI") [](https://liblab.com?utm_source=fastapi "liblab - Generate SDKs from FastAPI") [](https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi "Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.") [](https://www.coderabbit.ai/?utm_source=fastapi&utm_medium=badge&utm_campaign=fastapi "Cut Code Review Time & Bugs in Half with CodeRabbit") [](https://subtotal.com/?utm_source=fastapi&utm_medium=sponsorship&utm_campaign=open-source "The Gold Standard in Retail Account Linking") [](https://docs.railway.com/guides/fastapi?utm_medium=integration&utm_source=docs&utm_campaign=fastapi "Deploy enterprise applications at startup speed")

### Silver Sponsors¶

[](https://databento.com/?utm_source=fastapi&utm_medium=sponsor&utm_content=display "Pay as you go for market data") [](https://speakeasy.com/editor?utm_source=fastapi+repo&utm_medium=github+sponsorship "SDKs for your API | Speakeasy") [](https://www.svix.com/ "Svix - Webhooks as a service") [](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral "Stainless | Generate best-in-class SDKs") [](https://www.permit.io/blog/implement-authorization-in-fastapi?utm_source=github&utm_medium=referral&utm_campaign=fastapi "Fine-Grained Authorization for FastAPI") [](https://www.interviewpal.com/?utm_source=fastapi&utm_medium=open-source&utm_campaign=dev-hiring "InterviewPal - AI Interview Coach for Engineers and Devs") [](https://dribia.com/en/ "Dribia - Data Science within your reach")

### Bronze Sponsors¶

[](https://www.exoflare.com/open-source/?utm_source=FastAPI&utm_campaign=open_source "Biosecurity risk assessments made easy.") [](https://lambdatest.com/?utm_source=fastapi&utm_medium=partner&utm_campaign=sponsor&utm_term=opensource&utm_content=webpage "LambdaTest, AI-Powered Cloud-based Test Orchestration Platform")

### Individual Sponsors¶

[@marvin-robot](https://github.com/marvin-robot)

[@mercedes-benz](https://github.com/mercedes-benz)

[@Ponte-Energy-Partners](https://github.com/Ponte-Energy-Partners)

[@BoostryJP](https://github.com/BoostryJP)

[@acsone](https://github.com/acsone)

[@Trivie](https://github.com/Trivie)

[@takashi-yoneya](https://github.com/takashi-yoneya)

[@mainframeindustries](https://github.com/mainframeindustries)

[@yasyf](https://github.com/yasyf)

[@alixlahuec](https://github.com/alixlahuec)

[@primer-io](https://github.com/primer-io)

[@upciti](https://github.com/upciti)

[@giunio-prc](https://github.com/giunio-prc)

[@samuelcolvin](https://github.com/samuelcolvin)

[@vincentkoc](https://github.com/vincentkoc)

[@otosky](https://github.com/otosky)

[@ramonalmeidam](https://github.com/ramonalmeidam)

[@roboflow](https://github.com/roboflow)

[@RaamEEIL](https://github.com/RaamEEIL)

[@ehaca](https://github.com/ehaca)

[@raphaellaude](https://github.com/raphaellaude)

[@timlrx](https://github.com/timlrx)

[@Leay15](https://github.com/Leay15)

[@chickenandstats](https://github.com/chickenandstats)

[@kaoru0310](https://github.com/kaoru0310)

[@DelfinaCare](https://github.com/DelfinaCare)

[@Karine-Bauch](https://github.com/Karine-Bauch)

[@jugeeem](https://github.com/jugeeem)

[@dudikbender](https://github.com/dudikbender)

[@patsatsia](https://github.com/patsatsia)

[@secrett2633](https://github.com/secrett2633)

[@anthonycepeda](https://github.com/anthonycepeda)

[@patricioperezv](https://github.com/patricioperezv)

[@dodo5522](https://github.com/dodo5522)

[@knallgelb](https://github.com/knallgelb)

[@dblackrun](https://github.com/dblackrun)

[@zsinx6](https://github.com/zsinx6)

[@kennywakeland](https://github.com/kennywakeland)

[@aacayaco](https://github.com/aacayaco)

[@anomaly](https://github.com/anomaly)

[@mj0331](https://github.com/mj0331)

[@gorhack](https://github.com/gorhack)

[@Ryandaydev](https://github.com/Ryandaydev)

[@jaredtrog](https://github.com/jaredtrog)

[@jstanden](https://github.com/jstanden)

[@paulcwatts](https://github.com/paulcwatts)

[@andreaso](https://github.com/andreaso)

[@robintw](https://github.com/robintw)

[@pamelafox](https://github.com/pamelafox)

[@wshayes](https://github.com/wshayes)

[@koxudaxi](https://github.com/koxudaxi)

[@falkben](https://github.com/falkben)

[@mintuhouse](https://github.com/mintuhouse)

[@wdwinslow](https://github.com/wdwinslow)

[@jsoques](https://github.com/jsoques)

[@joeds13](https://github.com/joeds13)

[@dannywade](https://github.com/dannywade)

[@khadrawy](https://github.com/khadrawy)

[@mjohnsey](https://github.com/mjohnsey)

[@ashi-agrawal](https://github.com/ashi-agrawal)

[@oliverxchen](https://github.com/oliverxchen)

[@ternaus](https://github.com/ternaus)

[@eseglem](https://github.com/eseglem)

[@FernandoCelmer](https://github.com/FernandoCelmer)

[@Rehket](https://github.com/Rehket)

[@hiancdtrsnm](https://github.com/hiancdtrsnm)

[@manoelpqueiroz](https://github.com/manoelpqueiroz)

[@pawamoy](https://github.com/pawamoy)

[@petercool](https://github.com/petercool)

[@siavashyj](https://github.com/siavashyj)

[@mobyw](https://github.com/mobyw)

[@ArtyomVancyan](https://github.com/ArtyomVancyan)

[@caviri](https://github.com/caviri)

[@hgalytoby](https://github.com/hgalytoby)

[@joshuatz](https://github.com/joshuatz)

[@nisutec](https://github.com/nisutec)

[@hoenie-ams](https://github.com/hoenie-ams)

[@joerambo](https://github.com/joerambo)

[@engineerjoe440](https://github.com/engineerjoe440)

[@bnkc](https://github.com/bnkc)

[@johnl28](https://github.com/johnl28)

[@PunRabbit](https://github.com/PunRabbit)

[@PelicanQ](https://github.com/PelicanQ)

[@miguelgr](https://github.com/miguelgr)

[@WillHogan](https://github.com/WillHogan)

[@my3](https://github.com/my3)

[@Alisa-lisa](https://github.com/Alisa-lisa)

[@ddanier](https://github.com/ddanier)

[@bryanculbertson](https://github.com/bryanculbertson)

[@slafs](https://github.com/slafs)

[@ceb10n](https://github.com/ceb10n)

[@tochikuji](https://github.com/tochikuji)

[@moonape1226](https://github.com/moonape1226)

[@xncbf](https://github.com/xncbf)

[@DMantis](https://github.com/DMantis)

[@hard-coders](https://github.com/hard-coders)

[@supdann](https://github.com/supdann)

[@mntolia](https://github.com/mntolia)

[@pheanex](https://github.com/pheanex)

[@Zuzah](https://github.com/Zuzah)

[@TheR1D](https://github.com/TheR1D)

[@danielunderwood](https://github.com/danielunderwood)

[@rangulvers](https://github.com/rangulvers)

[@sdevkota](https://github.com/sdevkota)

[@brizzbuzz](https://github.com/brizzbuzz)

[@Baghdady92](https://github.com/Baghdady92)

[@KentShikama](https://github.com/KentShikama)

[@katnoria](https://github.com/katnoria)

[@harsh183](https://github.com/harsh183)

[@andrecorumba](https://github.com/andrecorumba)

[@KOZ39](https://github.com/KOZ39)

[@rwxd](https://github.com/rwxd)

[@morzan1001](https://github.com/morzan1001)

[@Olegt0rr](https://github.com/Olegt0rr)

[@larsyngvelundin](https://github.com/larsyngvelundin)

[@henriquesebastiao](https://github.com/henriquesebastiao)

[@olexkram](https://github.com/olexkram)

[@0ne-stone](https://github.com/0ne-stone)

[@nayasinghania](https://github.com/nayasinghania)

[@Toothwitch](https://github.com/Toothwitch)

[@andreagrandi](https://github.com/andreagrandi)

[@roboman-tech](https://github.com/roboman-tech)

[@msserpa](https://github.com/msserpa)

## About the data - technical details¶

The main intention of this page is to highlight the effort of the community to help others.

Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.

The data is calculated each month, you can read the [source code here](https://github.com/fastapi/fastapi/blob/master/scripts/).

Here I'm also highlighting contributions from sponsors.

I also reserve the right to update the algorithm, sections, thresholds, etc (just in case 🤷).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## Help FastAPI - Get Help - FastAPI

**URL**: https://fastapi.tiangolo.com/help-fastapi/
**Depth**: 1

# Help FastAPI - Get Help¶

Do you like **FastAPI**?

Would you like to help FastAPI, other users, and the author?

Or would you like to get help with **FastAPI**?

There are very simple ways to help (several involve just one or two clicks).

And there are several ways to get help too.

## Subscribe to the newsletter¶

You can subscribe to the (infrequent) [**FastAPI and friends** newsletter](../newsletter/) to stay updated about:

  * News about FastAPI and friends 🚀
  * Guides 📝
  * Features ✨
  * Breaking changes 🚨
  * Tips and tricks ✅

## Follow FastAPI on X (Twitter)¶

[Follow @fastapi on **X (Twitter)**](https://x.com/fastapi) to get the latest news about **FastAPI**. 🐦

## Star **FastAPI** in GitHub¶

You can "star" FastAPI in GitHub (clicking the star button at the top right): . ⭐️

By adding a star, other users will be able to find it more easily and see that it has been already useful for others.

## Watch the GitHub repository for releases¶

You can "watch" FastAPI in GitHub (clicking the "watch" button at the top right): . 👀

There you can select "Releases only".

By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of **FastAPI** with bug fixes and new features.

## Connect with the author¶

You can connect with [me (Sebastián Ramírez / `tiangolo`)](https://tiangolo.com), the author.

You can:

  * [Follow me on **GitHub**](https://github.com/tiangolo).
    * See other Open Source projects I have created that could help you.
    * Follow me to see when I create a new Open Source project.
  * [Follow me on **X (Twitter)**](https://x.com/tiangolo) or [Mastodon](https://fosstodon.org/@tiangolo).
    * Tell me how you use FastAPI (I love to hear that).
    * Hear when I make announcements or release new tools.
    * You can also [follow @fastapi on X (Twitter)](https://x.com/fastapi) (a separate account).
  * [Follow me on **LinkedIn**](https://www.linkedin.com/in/tiangolo/).
    * Hear when I make announcements or release new tools (although I use X (Twitter) more often 🤷‍♂).
  * Read what I write (or follow me) on [**Dev.to**](https://dev.to/tiangolo) or [**Medium**](https://medium.com/@tiangolo).
    * Read other ideas, articles, and read about tools I have created.
    * Follow me to read when I publish something new.

## Tweet about **FastAPI**¶

[Tweet about **FastAPI**](https://x.com/compose/tweet?text=I'm loving @fastapi because... https://github.com/fastapi/fastapi) and let me and others know why you like it. 🎉

I love to hear about how **FastAPI** is being used, what you have liked in it, in which project/company are you using it, etc.

## Vote for FastAPI¶

  * [Vote for **FastAPI** in Slant](https://www.slant.co/options/34241/~fastapi-review).
  * [Vote for **FastAPI** in AlternativeTo](https://alternativeto.net/software/fastapi/about/).
  * [Say you use **FastAPI** on StackShare](https://stackshare.io/pypi-fastapi).

## Help others with questions in GitHub¶

You can try and help others with their questions in:

  * [GitHub Discussions](https://github.com/fastapi/fastapi/discussions/categories/questions?discussions_q=category%3AQuestions+is%3Aunanswered)
  * [GitHub Issues](https://github.com/fastapi/fastapi/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aquestion+-label%3Aanswered+)

In many cases you might already know the answer for those questions. 🤓

If you are helping a lot of people with their questions, you will become an official [FastAPI Expert](../fastapi-people/#fastapi-experts). 🎉

Just remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. 🤗

The idea is for the **FastAPI** community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.

* * *

Here's how to help others with questions (in discussions or issues):

### Understand the question¶

  * Check if you can understand what is the **purpose** and use case of the person asking.

  * Then check if the question (the vast majority are questions) is **clear**.

  * In many cases the question asked is about an imaginary solution from the user, but there might be a **better** one. If you can understand the problem and use case better, you might be able to suggest a better **alternative solution**.

  * If you can't understand the question, ask for more **details**.

### Reproduce the problem¶

For most of the cases and most of the questions there's something related to the person's **original code**.

In many cases they will only copy a fragment of the code, but that's not enough to **reproduce the problem**.

  * You can ask them to provide a [minimal, reproducible, example](https://stackoverflow.com/help/minimal-reproducible-example), that you can **copy-paste** and run locally to see the same error or behavior they are seeing, or to understand their use case better.

  * If you are feeling too generous, you can try to **create an example** like that yourself, just based on the description of the problem. Just keep in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.

### Suggest solutions¶

  * After being able to understand the question, you can give them a possible **answer**.

  * In many cases, it's better to understand their **underlying problem or use case** , because there might be a better way to solve it than what they are trying to do.

### Ask to close¶

If they reply, there's a high chance you would have solved their problem, congrats, **you're a hero**! 🦸

  * Now, if that solved their problem, you can ask them to:

    * In GitHub Discussions: mark the comment as the **answer**.
    * In GitHub Issues: **close** the issue.

## Watch the GitHub repository¶

You can "watch" FastAPI in GitHub (clicking the "watch" button at the top right): . 👀

If you select "Watching" instead of "Releases only" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.

Then you can try and help them solve those questions.

## Ask Questions¶

You can [create a new question](https://github.com/fastapi/fastapi/discussions/new?category=questions) in the GitHub repository, for example to:

  * Ask a **question** or ask about a **problem**.
  * Suggest a new **feature**.

**Note** : if you do it, then I'm going to ask you to also help others. 😉

## Review Pull Requests¶

You can help me review pull requests from others.

Again, please try your best to be kind. 🤗

* * *

Here's what to keep in mind and how to review a pull request:

### Understand the problem¶

  * First, make sure you **understand the problem** that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.

  * There's also a good chance that the pull request is not actually needed because the problem can be solved in a **different way**. Then you can suggest or ask about that.

### Don't worry about style¶

  * Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.

  * Also don't worry about style rules, there are already automatized tools checking that.

And if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.

### Check the code¶

  * Check and read the code, see if it makes sense, **run it locally** and see if it actually solves the problem.

  * Then **comment** saying that you did that, that's how I will know you really checked it.

Info

Unfortunately, I can't simply trust PRs that just have several approvals.

Several times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. 😅

So, it's really important that you actually read and run the code, and let me know in the comments that you did. 🤓

  * If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well 🙈), so it's better if you can focus on the fundamental things.

### Tests¶

  * Help me check that the PR has **tests**.

  * Check that the tests **fail** before the PR. 🚨

  * Then check that the tests **pass** after the PR. ✅

  * Many PRs don't have tests, you can **remind** them to add tests, or you can even **suggest** some tests yourself. That's one of the things that consume most time and you can help a lot with that.

  * Then also comment what you tried, that way I'll know that you checked it. 🤓

## Create a Pull Request¶

You can [contribute](../contributing/) to the source code with Pull Requests, for example:

  * To fix a typo you found on the documentation.
  * To share an article, video, or podcast you created or found about FastAPI by [editing this file](https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml).
    * Make sure you add your link to the start of the corresponding section.
  * To help [translate the documentation](../contributing/#translations) to your language.
    * You can also help to review the translations created by others.
  * To propose new documentation sections.
  * To fix an existing issue/bug.
    * Make sure to add tests.
  * To add a new feature.
    * Make sure to add tests.
    * Make sure to add documentation if it's relevant.

## Help Maintain FastAPI¶

Help me maintain **FastAPI**! 🤓

There's a lot of work to do, and for most of it, **YOU** can do it.

The main tasks that you can do right now are:

  * Help others with questions in GitHub (see the section above).
  * Review Pull Requests (see the section above).

Those two tasks are what **consume time the most**. That's the main work of maintaining FastAPI.

If you can help me with that, **you are helping me maintain FastAPI** and making sure it keeps **advancing faster and better**. 🚀

## Join the chat¶

Join the 👥 [Discord chat server](https://discord.gg/VQjSZaeJmf) 👥 and hang out with others in the FastAPI community.

Tip

For questions, ask them in [GitHub Discussions](https://github.com/fastapi/fastapi/discussions/new?category=questions), there's a much better chance you will receive help by the [FastAPI Experts](../fastapi-people/#fastapi-experts).

Use the chat only for other general conversations.

### Don't use the chat for questions¶

Keep in mind that as chats allow more "free conversation", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.

In GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat systems. 😅

Conversations in the chat systems are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation. And only the ones in GitHub count to become a [FastAPI Expert](../fastapi-people/#fastapi-experts), so you will most probably receive more attention in GitHub.

On the other side, there are thousands of users in the chat systems, so there's a high chance you'll find someone to talk to there, almost all the time. 😄

## Sponsor the author¶

If your **product/company** depends on or is related to **FastAPI** and you want to reach its users, you can sponsor the author (me) through [GitHub sponsors](https://github.com/sponsors/tiangolo). Depending on the tier, you could get some extra benefits, like a badge in the docs. 🎁

* * *

Thanks! 🚀

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## Deployment - FastAPI

**URL**: https://fastapi.tiangolo.com/deployment/
**Depth**: 1

# Deployment¶

Deploying a **FastAPI** application is relatively easy.

## What Does Deployment Mean¶

To **deploy** an application means to perform the necessary steps to make it **available to the users**.

For a **web API** , it normally involves putting it in a **remote machine** , with a **server program** that provides good performance, stability, etc, so that your **users** can **access** the application efficiently and without interruptions or problems.

This is in contrast to the **development** stages, where you are constantly changing the code, breaking it and fixing it, stopping and restarting the development server, etc.

## Deployment Strategies¶

There are several ways to do it depending on your specific use case and the tools that you use.

You could **deploy a server** yourself using a combination of tools, you could use a **cloud service** that does part of the work for you, or other possible options.

I will show you some of the main concepts you should probably keep in mind when deploying a **FastAPI** application (although most of it applies to any other type of web application).

You will see more details to keep in mind and some of the techniques to do it in the next sections. ✨

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit

## Repository Management - FastAPI

**URL**: https://fastapi.tiangolo.com/management/
**Depth**: 1

# Repository Management¶

Here's a short description of how the FastAPI repository is managed and maintained.

## Owner¶

I, [@tiangolo](https://github.com/tiangolo), am the creator and owner of the FastAPI repository. 🤓

I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the [BDFL](https://en.wikipedia.org/wiki/Benevolent_dictator_for_life). 😅

## Team¶

There's a team of people that help manage and maintain the project. 😎

They have different levels of permissions and [specific instructions](../management-tasks/).

Some of the tasks they can perform include:

  * Adding labels to PRs.
  * Editing PR titles.
  * Adding commits on top of PRs to tweak them.
  * Mark answers in GitHub Discussions questions, etc.
  * Merge some specific types of PRs.

You can see the current team members in [FastAPI People - Team](../fastapi-people/#team).

Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.

## FastAPI Experts¶

The people that help others the most in GitHub Discussions can become [**FastAPI Experts**](../fastapi-people/#fastapi-experts).

This is normally the best way to contribute to the project.

## External Contributions¶

External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. 🙇‍♂️

There are many ways to [help maintain FastAPI](../help-fastapi/#help-maintain-fastapi).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life

## Learn - FastAPI

**URL**: https://fastapi.tiangolo.com/learn/
**Depth**: 1

# Learn¶

Here are the introductory sections and the tutorials to learn **FastAPI**.

You could consider this a **book** , a **course** , the **official** and recommended way to learn FastAPI. 😎

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors

## Resources - FastAPI

**URL**: https://fastapi.tiangolo.com/resources/
**Depth**: 1

# Resources¶

Additional resources, external links, articles and more. ✈️

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.

## Response Cookies - FastAPI

**URL**: https://fastapi.tiangolo.com/advanced/response-cookies/
**Depth**: 2

# Response Cookies¶

## Use a `Response` parameter¶

You can declare a parameter of type `Response` in your _path operation function_.

And then you can set cookies in that _temporal_ response object.

Python 3.8+

    from fastapi import FastAPI, Response

    app = FastAPI()

    @app.post("/cookie-and-object/")
    def create_cookie(response: Response):
        response.set_cookie(key="fakesession", value="fake-cookie-session-value")
        return {"message": "Come to the dark side, we have cookies"}

And then you can return any object you need, as you normally would (a `dict`, a database model, etc).

And if you declared a `response_model`, it will still be used to filter and convert the object you returned.

**FastAPI** will use that _temporal_ response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any `response_model`.

You can also declare the `Response` parameter in dependencies, and set cookies (and headers) in them.

## Return a `Response` directly¶

You can also create cookies when returning a `Response` directly in your code.

To do that, you can create a response as described in [Return a Response Directly](../response-directly/).

Then set Cookies in it, and then return it:

Python 3.8+

    from fastapi import FastAPI
    from fastapi.responses import JSONResponse

    app = FastAPI()

    @app.post("/cookie/")
    def create_cookie():
        content = {"message": "Come to the dark side, we have cookies"}
        response = JSONResponse(content=content)
        response.set_cookie(key="fakesession", value="fake-cookie-session-value")
        return response

Tip

Keep in mind that if you return a response directly instead of using the `Response` parameter, FastAPI will return it directly.

So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a `JSONResponse`.

And also that you are not sending any data that should have been filtered by a `response_model`.

### More info¶

Technical Details

You could also use `from starlette.responses import Response` or `from starlette.responses import JSONResponse`.

**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette.

And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.

To see all the available parameters and options, check the [documentation in Starlette](https://www.starlette.io/responses/#set-cookie).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: Asynchronous Server Gateway Interface
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.
  *[inside your project]: there are other options, this is a simple guideline
  *[ CLI]: command line interface
  *[serializing]: converting the data to a format that can be transmitted
  *[**SDKs**]: Software Development Kits
  *[parsed]: converted from some plain format, like bytes, into Python objects

## Release Notes - FastAPI

**URL**: https://fastapi.tiangolo.com/release-notes/
**Depth**: 1

# Release Notes¶

## Latest Changes¶

### Docs¶

  * 📝 Update contributing guidelines for installing requirements. PR [#14095](https://github.com/fastapi/fastapi/pull/14095) by [@alejsdev](https://github.com/alejsdev).

### Internal¶

  * 🐛 Fix sponsor display issue by hiding element on image error. PR [#14097](https://github.com/fastapi/fastapi/pull/14097) by [@alejsdev](https://github.com/alejsdev).
  * 🐛 Hide sponsor badge when sponsor image is not displayed. PR [#14096](https://github.com/fastapi/fastapi/pull/14096) by [@alejsdev](https://github.com/alejsdev).

## 0.117.1¶

### Fixes¶

  * 🐛 Fix validation error when `File` is declared after `Form` parameter. PR [#11194](https://github.com/fastapi/fastapi/pull/11194) by [@thomasleveil](https://github.com/thomasleveil).

## 0.117.0¶

### Features¶

  * ✨ Allow `None` as return type for bodiless responses. PR [#9425](https://github.com/fastapi/fastapi/pull/9425) by [@hofrob](https://github.com/hofrob).
  * ✨ Allow array values for OpenAPI schema `type` field. PR [#13639](https://github.com/fastapi/fastapi/pull/13639) by [@sammasak](https://github.com/sammasak).
  * ✨ Add OpenAPI `external_docs` parameter to `FastAPI`. PR [#13713](https://github.com/fastapi/fastapi/pull/13713) by [@cmtoro](https://github.com/cmtoro).

### Fixes¶

  * ⚡️ Fix `default_factory` for response model field with Pydantic V1. PR [#9704](https://github.com/fastapi/fastapi/pull/9704) by [@vvanglro](https://github.com/vvanglro).
  * 🐛 Fix inconsistent processing of model docstring formfeed char with Pydantic V1. PR [#6039](https://github.com/fastapi/fastapi/pull/6039) by [@MaxwellPayne](https://github.com/MaxwellPayne).
  * 🐛 Fix `jsonable_encoder` alters `json_encoders` of Pydantic v1 objects. PR [#4972](https://github.com/fastapi/fastapi/pull/4972) by [@aboubacs](https://github.com/aboubacs).
  * 🐛 Reenable `allow_arbitrary_types` when only 1 argument is used on the API endpoint. PR [#13694](https://github.com/fastapi/fastapi/pull/13694) by [@rmawatson](https://github.com/rmawatson).
  * 🐛 Fix `inspect.getcoroutinefunction()` can break testing with `unittest.mock.patch()`. PR [#14022](https://github.com/fastapi/fastapi/pull/14022) by [@secrett2633](https://github.com/secrett2633).

### Refactors¶

  * ♻️ Create `dependency-cache` dict in `solve_dependencies` only if `None` (don't re-create if empty). PR [#13689](https://github.com/fastapi/fastapi/pull/13689) by [@bokshitsky](https://github.com/bokshitsky).
  * ✅ Enable test case for duplicated headers in `test_tutorial/test_header_params/test_tutorial003.py`. PR [#13864](https://github.com/fastapi/fastapi/pull/13864) by [@Amogha-ark](https://github.com/Amogha-ark).
  * 📌 Pin `httpx` to `>=0.23.0,=0.40.0,=0.23.0,=0.40.0,=0.40.0,=3.2.1,=0.0.18. PR [#13219](https://github.com/fastapi/fastapi/pull/13219) by [@DanielKusyDev](https://github.com/DanielKusyDev).
  * ⬆️ Bump Starlette to allow up to 0.45.0: `>=0.40.0,=3.1.5. PR [#13194](https://github.com/fastapi/fastapi/pull/13194) by [@DanielKusyDev](https://github.com/DanielKusyDev).

### Refactors¶

  * ✅ Simplify tests for websockets. PR [#13202](https://github.com/fastapi/fastapi/pull/13202) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for request_form_models . PR [#13183](https://github.com/fastapi/fastapi/pull/13183) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for separate_openapi_schemas. PR [#13201](https://github.com/fastapi/fastapi/pull/13201) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for security. PR [#13200](https://github.com/fastapi/fastapi/pull/13200) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for schema_extra_example. PR [#13197](https://github.com/fastapi/fastapi/pull/13197) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for request_model. PR [#13195](https://github.com/fastapi/fastapi/pull/13195) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for request_forms_and_files. PR [#13185](https://github.com/fastapi/fastapi/pull/13185) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for request_forms. PR [#13184](https://github.com/fastapi/fastapi/pull/13184) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for path_query_params. PR [#13181](https://github.com/fastapi/fastapi/pull/13181) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for path_operation_configurations. PR [#13180](https://github.com/fastapi/fastapi/pull/13180) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for header_params. PR [#13179](https://github.com/fastapi/fastapi/pull/13179) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for extra_models. PR [#13178](https://github.com/fastapi/fastapi/pull/13178) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for extra_data_types. PR [#13177](https://github.com/fastapi/fastapi/pull/13177) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for cookie_params. PR [#13176](https://github.com/fastapi/fastapi/pull/13176) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for dependencies. PR [#13174](https://github.com/fastapi/fastapi/pull/13174) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for body_updates. PR [#13172](https://github.com/fastapi/fastapi/pull/13172) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for body_nested_models. PR [#13171](https://github.com/fastapi/fastapi/pull/13171) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for body_multiple_params. PR [#13170](https://github.com/fastapi/fastapi/pull/13170) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for body_fields. PR [#13169](https://github.com/fastapi/fastapi/pull/13169) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for body. PR [#13168](https://github.com/fastapi/fastapi/pull/13168) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for bigger_applications. PR [#13167](https://github.com/fastapi/fastapi/pull/13167) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for background_tasks. PR [#13166](https://github.com/fastapi/fastapi/pull/13166) by [@alejsdev](https://github.com/alejsdev).
  * ✅ Simplify tests for additional_status_codes. PR [#13149](https://github.com/fastapi/fastapi/pull/13149) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * ✏️ Update Strawberry integration docs. PR [#13155](https://github.com/fastapi/fastapi/pull/13155) by [@kinuax](https://github.com/kinuax).
  * 🔥 Remove unused Peewee tutorial files. PR [#13158](https://github.com/fastapi/fastapi/pull/13158) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update image in body-nested-model docs. PR [#11063](https://github.com/fastapi/fastapi/pull/11063) by [@untilhamza](https://github.com/untilhamza).
  * 📝 Update `fastapi-cli` UI examples in docs. PR [#13107](https://github.com/fastapi/fastapi/pull/13107) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 👷 Add new GitHub Action to update contributors, translators, and translation reviewers. PR [#13136](https://github.com/fastapi/fastapi/pull/13136) by [@tiangolo](https://github.com/tiangolo).
  * ✏️ Fix typo in `docs/en/docs/virtual-environments.md`. PR [#13124](https://github.com/fastapi/fastapi/pull/13124) by [@tiangolo](https://github.com/tiangolo).
  * ✏️ Fix error in `docs/en/docs/contributing.md`. PR [#12899](https://github.com/fastapi/fastapi/pull/12899) by [@kingsubin](https://github.com/kingsubin).
  * 📝 Minor corrections in `docs/en/docs/tutorial/sql-databases.md`. PR [#13081](https://github.com/fastapi/fastapi/pull/13081) by [@alv2017](https://github.com/alv2017).
  * 📝 Update includes in `docs/ru/docs/tutorial/query-param-models.md`. PR [#12994](https://github.com/fastapi/fastapi/pull/12994) by [@alejsdev](https://github.com/alejsdev).
  * ✏️ Fix typo in README installation instructions. PR [#13011](https://github.com/fastapi/fastapi/pull/13011) by [@dave-hay](https://github.com/dave-hay).
  * 📝 Update docs for `fastapi-cli`. PR [#13031](https://github.com/fastapi/fastapi/pull/13031) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Update Portuguese Translation for `docs/pt/docs/tutorial/request-forms.md`. PR [#13216](https://github.com/fastapi/fastapi/pull/13216) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Update Portuguese translation for `docs/pt/docs/advanced/settings.md`. PR [#13209](https://github.com/fastapi/fastapi/pull/13209) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/security/oauth2-jwt.md`. PR [#13205](https://github.com/fastapi/fastapi/pull/13205) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Indonesian translation for `docs/id/docs/index.md`. PR [#13191](https://github.com/fastapi/fastapi/pull/13191) by [@gerry-sabar](https://github.com/gerry-sabar).
  * 🌐 Add Indonesian translation for `docs/id/docs/tutorial/static-files.md`. PR [#13092](https://github.com/fastapi/fastapi/pull/13092) by [@guspan-tanadi](https://github.com/guspan-tanadi).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/security/get-current-user.md`. PR [#13188](https://github.com/fastapi/fastapi/pull/13188) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Remove Wrong Portuguese translations location for `docs/pt/docs/advanced/benchmarks.md`. PR [#13187](https://github.com/fastapi/fastapi/pull/13187) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Update Portuguese translations. PR [#13156](https://github.com/fastapi/fastapi/pull/13156) by [@nillvitor](https://github.com/nillvitor).
  * 🌐 Update Russian translation for `docs/ru/docs/tutorial/security/first-steps.md`. PR [#13159](https://github.com/fastapi/fastapi/pull/13159) by [@Yarous](https://github.com/Yarous).
  * ✏️ Delete unnecessary backspace in `docs/ja/docs/tutorial/path-params-numeric-validations.md`. PR [#12238](https://github.com/fastapi/fastapi/pull/12238) by [@FakeDocument](https://github.com/FakeDocument).
  * 🌐 Update Chinese translation for `docs/zh/docs/fastapi-cli.md`. PR [#13102](https://github.com/fastapi/fastapi/pull/13102) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add new Spanish translations for all docs with new LLM-assisted system using PydanticAI. PR [#13122](https://github.com/fastapi/fastapi/pull/13122) by [@tiangolo](https://github.com/tiangolo).
  * 🌐 Update existing Spanish translations using the new LLM-assisted system using PydanticAI. PR [#13118](https://github.com/fastapi/fastapi/pull/13118) by [@tiangolo](https://github.com/tiangolo).
  * 🌐 Update Chinese translation for `docs/zh/docs/advanced/security/oauth2-scopes.md`. PR [#13110](https://github.com/fastapi/fastapi/pull/13110) by [@ChenPu2002](https://github.com/ChenPu2002).
  * 🌐 Add Indonesian translation for `docs/id/docs/tutorial/path-params.md`. PR [#13086](https://github.com/fastapi/fastapi/pull/13086) by [@gerry-sabar](https://github.com/gerry-sabar).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/sql-databases.md`. PR [#13093](https://github.com/fastapi/fastapi/pull/13093) by [@GeumBinLee](https://github.com/GeumBinLee).
  * 🌐 Update Chinese translation for `docs/zh/docs/async.md`. PR [#13095](https://github.com/fastapi/fastapi/pull/13095) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/openapi-webhooks.md`. PR [#13091](https://github.com/fastapi/fastapi/pull/13091) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/async-tests.md`. PR [#13074](https://github.com/fastapi/fastapi/pull/13074) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add Ukrainian translation for `docs/uk/docs/fastapi-cli.md`. PR [#13020](https://github.com/fastapi/fastapi/pull/13020) by [@ykertytsky](https://github.com/ykertytsky).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/events.md`. PR [#12512](https://github.com/fastapi/fastapi/pull/12512) by [@ZhibangYue](https://github.com/ZhibangYue).
  * 🌐 Add Russian translation for `/docs/ru/docs/tutorial/sql-databases.md`. PR [#13079](https://github.com/fastapi/fastapi/pull/13079) by [@alv2017](https://github.com/alv2017).
  * 🌐 Update Chinese translation for `docs/zh/docs/advanced/testing-dependencies.md`. PR [#13066](https://github.com/fastapi/fastapi/pull/13066) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Update Traditional Chinese translation for `docs/zh-hant/docs/tutorial/index.md`. PR [#13075](https://github.com/fastapi/fastapi/pull/13075) by [@codingjenny](https://github.com/codingjenny).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/sql-databases.md`. PR [#13051](https://github.com/fastapi/fastapi/pull/13051) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Update Chinese translation for `docs/zh/docs/tutorial/query-params-str-validations.md`. PR [#12928](https://github.com/fastapi/fastapi/pull/12928) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/header-param-models.md`. PR [#13040](https://github.com/fastapi/fastapi/pull/13040) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Update Chinese translation for `docs/zh/docs/tutorial/path-params.md`. PR [#12926](https://github.com/fastapi/fastapi/pull/12926) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Update Chinese translation for `docs/zh/docs/tutorial/first-steps.md`. PR [#12923](https://github.com/fastapi/fastapi/pull/12923) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Update Russian translation for `docs/ru/docs/deployment/docker.md`. PR [#13048](https://github.com/fastapi/fastapi/pull/13048) by [@anklav24](https://github.com/anklav24).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/generate-clients.md`. PR [#13030](https://github.com/fastapi/fastapi/pull/13030) by [@vitumenezes](https://github.com/vitumenezes).
  * 🌐 Add Indonesian translation for `docs/id/docs/tutorial/first-steps.md`. PR [#13042](https://github.com/fastapi/fastapi/pull/13042) by [@gerry-sabar](https://github.com/gerry-sabar).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/cookie-param-models.md`. PR [#13038](https://github.com/fastapi/fastapi/pull/13038) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/request-form-models.md`. PR [#13045](https://github.com/fastapi/fastapi/pull/13045) by [@Zhongheng-Cheng](https://github.com/Zhongheng-Cheng).
  * 🌐 Add Russian translation for `docs/ru/docs/virtual-environments.md`. PR [#13026](https://github.com/fastapi/fastapi/pull/13026) by [@alv2017](https://github.com/alv2017).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/testing.md`. PR [#12968](https://github.com/fastapi/fastapi/pull/12968) by [@jts8257](https://github.com/jts8257).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/async-test.md`. PR [#12918](https://github.com/fastapi/fastapi/pull/12918) by [@icehongssii](https://github.com/icehongssii).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/security/oauth2-jwt.md`. PR [#10601](https://github.com/fastapi/fastapi/pull/10601) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/security/simple-oauth2.md`. PR [#10599](https://github.com/fastapi/fastapi/pull/10599) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/security/get-current-user.md`. PR [#10594](https://github.com/fastapi/fastapi/pull/10594) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/features.md`. PR [#12441](https://github.com/fastapi/fastapi/pull/12441) by [@codingjenny](https://github.com/codingjenny).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/virtual-environments.md`. PR [#12791](https://github.com/fastapi/fastapi/pull/12791) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/templates.md`. PR [#12726](https://github.com/fastapi/fastapi/pull/12726) by [@Heumhub](https://github.com/Heumhub).
  * 🌐 Add Russian translation for `docs/ru/docs/fastapi-cli.md`. PR [#13041](https://github.com/fastapi/fastapi/pull/13041) by [@alv2017](https://github.com/alv2017).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/cookie-param-models.md`. PR [#13000](https://github.com/fastapi/fastapi/pull/13000) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/header-param-models.md`. PR [#13001](https://github.com/fastapi/fastapi/pull/13001) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/request-form-models.md`. PR [#13002](https://github.com/fastapi/fastapi/pull/13002) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/request-forms.md`. PR [#13003](https://github.com/fastapi/fastapi/pull/13003) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/resources/index.md`. PR [#13004](https://github.com/fastapi/fastapi/pull/13004) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/how-to/configure-swagger-ui.md`. PR [#12898](https://github.com/fastapi/fastapi/pull/12898) by [@nahyunkeem](https://github.com/nahyunkeem).
  * 🌐 Add Korean translation to `docs/ko/docs/advanced/additional-status-codes.md`. PR [#12715](https://github.com/fastapi/fastapi/pull/12715) by [@nahyunkeem](https://github.com/nahyunkeem).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/tutorial/first-steps.md`. PR [#12467](https://github.com/fastapi/fastapi/pull/12467) by [@codingjenny](https://github.com/codingjenny).

### Internal¶

  * 🔧 Add Pydantic 2 trove classifier. PR [#13199](https://github.com/fastapi/fastapi/pull/13199) by [@johnthagen](https://github.com/johnthagen).
  * 👥 Update FastAPI People - Sponsors. PR [#13231](https://github.com/fastapi/fastapi/pull/13231) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Refactor FastAPI People Sponsors to use 2 tokens. PR [#13228](https://github.com/fastapi/fastapi/pull/13228) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update token for FastAPI People - Sponsors. PR [#13225](https://github.com/fastapi/fastapi/pull/13225) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Add independent CI automation for FastAPI People - Sponsors. PR [#13221](https://github.com/fastapi/fastapi/pull/13221) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Add retries to Smokeshow. PR [#13151](https://github.com/fastapi/fastapi/pull/13151) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update Speakeasy sponsor graphic. PR [#13147](https://github.com/fastapi/fastapi/pull/13147) by [@chailandau](https://github.com/chailandau).
  * 👥 Update FastAPI GitHub topic repositories. PR [#13146](https://github.com/fastapi/fastapi/pull/13146) by [@tiangolo](https://github.com/tiangolo).
  * 👷‍♀️ Add script for GitHub Topic Repositories and update External Links. PR [#13135](https://github.com/fastapi/fastapi/pull/13135) by [@alejsdev](https://github.com/alejsdev).
  * 👥 Update FastAPI People - Contributors and Translators. PR [#13145](https://github.com/fastapi/fastapi/pull/13145) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump markdown-include-variants from 0.0.3 to 0.0.4. PR [#13129](https://github.com/fastapi/fastapi/pull/13129) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump inline-snapshot from 0.14.0 to 0.18.1. PR [#13132](https://github.com/fastapi/fastapi/pull/13132) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump mkdocs-macros-plugin from 1.0.5 to 1.3.7. PR [#13133](https://github.com/fastapi/fastapi/pull/13133) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔨 Add internal scripts to generate language translations with PydanticAI, include Spanish prompt. PR [#13123](https://github.com/fastapi/fastapi/pull/13123) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump astral-sh/setup-uv from 4 to 5. PR [#13096](https://github.com/fastapi/fastapi/pull/13096) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔧 Update sponsors: rename CryptAPI to BlockBee. PR [#13078](https://github.com/fastapi/fastapi/pull/13078) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR [#13055](https://github.com/fastapi/fastapi/pull/13055) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump types-ujson from 5.7.0.1 to 5.10.0.20240515. PR [#13018](https://github.com/fastapi/fastapi/pull/13018) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump black from 24.3.0 to 24.10.0. PR [#13014](https://github.com/fastapi/fastapi/pull/13014) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump inline-snapshot from 0.13.0 to 0.14.0. PR [#13017](https://github.com/fastapi/fastapi/pull/13017) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump dirty-equals from 0.6.0 to 0.8.0. PR [#13015](https://github.com/fastapi/fastapi/pull/13015) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump cloudflare/wrangler-action from 3.12 to 3.13. PR [#12996](https://github.com/fastapi/fastapi/pull/12996) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump astral-sh/setup-uv from 3 to 4. PR [#12982](https://github.com/fastapi/fastapi/pull/12982) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔧 Remove duplicate actions/checkout in `notify-translations.yml`. PR [#12915](https://github.com/fastapi/fastapi/pull/12915) by [@tinyboxvk](https://github.com/tinyboxvk).
  * 🔧 Update team members. PR [#13033](https://github.com/fastapi/fastapi/pull/13033) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update sponsors: remove Codacy. PR [#13032](https://github.com/fastapi/fastapi/pull/13032) by [@tiangolo](https://github.com/tiangolo).

## 0.115.6¶

### Fixes¶

  * 🐛 Preserve traceback when an exception is raised in sync dependency with `yield`. PR [#5823](https://github.com/fastapi/fastapi/pull/5823) by [@sombek](https://github.com/sombek).

### Refactors¶

  * ♻️ Update tests and internals for compatibility with Pydantic >=2.10. PR [#12971](https://github.com/fastapi/fastapi/pull/12971) by [@tamird](https://github.com/tamird).

### Docs¶

  * 📝 Update includes format in docs with an automated script. PR [#12950](https://github.com/fastapi/fastapi/pull/12950) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update includes for `docs/de/docs/advanced/using-request-directly.md`. PR [#12685](https://github.com/fastapi/fastapi/pull/12685) by [@alissadb](https://github.com/alissadb).
  * 📝 Update includes for `docs/de/docs/how-to/conditional-openapi.md`. PR [#12689](https://github.com/fastapi/fastapi/pull/12689) by [@alissadb](https://github.com/alissadb).

### Translations¶

  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/async.md`. PR [#12990](https://github.com/fastapi/fastapi/pull/12990) by [@ILoveSorasakiHina](https://github.com/ILoveSorasakiHina).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/tutorial/query-param-models.md`. PR [#12932](https://github.com/fastapi/fastapi/pull/12932) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/testing-dependencies.md`. PR [#12992](https://github.com/fastapi/fastapi/pull/12992) by [@Limsunoh](https://github.com/Limsunoh).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/websockets.md`. PR [#12991](https://github.com/fastapi/fastapi/pull/12991) by [@kwang1215](https://github.com/kwang1215).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/response-model.md`. PR [#12933](https://github.com/fastapi/fastapi/pull/12933) by [@AndreBBM](https://github.com/AndreBBM).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/middlewares.md`. PR [#12753](https://github.com/fastapi/fastapi/pull/12753) by [@nahyunkeem](https://github.com/nahyunkeem).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/openapi-webhooks.md`. PR [#12752](https://github.com/fastapi/fastapi/pull/12752) by [@saeye](https://github.com/saeye).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/query-param-models.md`. PR [#12931](https://github.com/fastapi/fastapi/pull/12931) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/query-param-models.md`. PR [#12445](https://github.com/fastapi/fastapi/pull/12445) by [@gitgernit](https://github.com/gitgernit).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/query-param-models.md`. PR [#12940](https://github.com/fastapi/fastapi/pull/12940) by [@jts8257](https://github.com/jts8257).
  * 🔥 Remove obsolete tutorial translation to Chinese for `docs/zh/docs/tutorial/sql-databases.md`, it references files that are no longer on the repo. PR [#12949](https://github.com/fastapi/fastapi/pull/12949) by [@tiangolo](https://github.com/tiangolo).

### Internal¶

  * ⬆ [pre-commit.ci] pre-commit autoupdate. PR [#12954](https://github.com/fastapi/fastapi/pull/12954) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).

## 0.115.5¶

### Refactors¶

  * ♻️ Update internal checks to support Pydantic 2.10. PR [#12914](https://github.com/fastapi/fastapi/pull/12914) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * 📝 Update includes for `docs/en/docs/tutorial/body.md`. PR [#12757](https://github.com/fastapi/fastapi/pull/12757) by [@gsheni](https://github.com/gsheni).
  * 📝 Update includes in `docs/en/docs/advanced/testing-dependencies.md`. PR [#12647](https://github.com/fastapi/fastapi/pull/12647) by [@AyushSinghal1794](https://github.com/AyushSinghal1794).
  * 📝 Update includes for `docs/en/docs/tutorial/metadata.md`. PR [#12773](https://github.com/fastapi/fastapi/pull/12773) by [@Nimitha-jagadeesha](https://github.com/Nimitha-jagadeesha).
  * 📝 Update `docs/en/docs/tutorial/dependencies/dependencies-with-yield.md`. PR [#12045](https://github.com/fastapi/fastapi/pull/12045) by [@xuvjso](https://github.com/xuvjso).
  * 📝 Update includes for `docs/en/docs/tutorial/dependencies/global-dependencies.md`. PR [#12653](https://github.com/fastapi/fastapi/pull/12653) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes for `docs/en/docs/tutorial/body-updates.md`. PR [#12712](https://github.com/fastapi/fastapi/pull/12712) by [@davioc](https://github.com/davioc).
  * 📝 Remove mention of Celery in the project generators. PR [#12742](https://github.com/fastapi/fastapi/pull/12742) by [@david-caro](https://github.com/david-caro).
  * 📝 Update includes in `docs/en/docs/tutorial/header-param-models.md`. PR [#12814](https://github.com/fastapi/fastapi/pull/12814) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update `contributing.md` docs, include note to not translate this page. PR [#12841](https://github.com/fastapi/fastapi/pull/12841) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update includes in `docs/en/docs/tutorial/request-forms.md`. PR [#12648](https://github.com/fastapi/fastapi/pull/12648) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes in `docs/en/docs/tutorial/request-form-models.md`. PR [#12649](https://github.com/fastapi/fastapi/pull/12649) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes in `docs/en/docs/tutorial/security/oauth2-jwt.md`. PR [#12650](https://github.com/fastapi/fastapi/pull/12650) by [@OCE1960](https://github.com/OCE1960).
  * 📝 Update includes in `docs/vi/docs/tutorial/first-steps.md`. PR [#12754](https://github.com/fastapi/fastapi/pull/12754) by [@MxPy](https://github.com/MxPy).
  * 📝 Update includes for `docs/pt/docs/advanced/wsgi.md`. PR [#12769](https://github.com/fastapi/fastapi/pull/12769) by [@Nimitha-jagadeesha](https://github.com/Nimitha-jagadeesha).
  * 📝 Update includes for `docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md`. PR [#12815](https://github.com/fastapi/fastapi/pull/12815) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes for `docs/en/docs/tutorial/dependencies/classes-as-dependencies.md`. PR [#12813](https://github.com/fastapi/fastapi/pull/12813) by [@handabaldeep](https://github.com/handabaldeep).
  * ✏️ Fix error in `docs/en/docs/tutorial/middleware.md`. PR [#12819](https://github.com/fastapi/fastapi/pull/12819) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update includes for `docs/en/docs/tutorial/security/get-current-user.md`. PR [#12645](https://github.com/fastapi/fastapi/pull/12645) by [@OCE1960](https://github.com/OCE1960).
  * 📝 Update includes for `docs/en/docs/tutorial/security/first-steps.md`. PR [#12643](https://github.com/fastapi/fastapi/pull/12643) by [@OCE1960](https://github.com/OCE1960).
  * 📝 Update includes in `docs/de/docs/advanced/additional-responses.md`. PR [#12821](https://github.com/fastapi/fastapi/pull/12821) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/en/docs/advanced/generate-clients.md`. PR [#12642](https://github.com/fastapi/fastapi/pull/12642) by [@AyushSinghal1794](https://github.com/AyushSinghal1794).
  * 📝 Fix admonition double quotes with new syntax. PR [#12835](https://github.com/fastapi/fastapi/pull/12835) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update includes in `docs/zh/docs/advanced/additional-responses.md`. PR [#12828](https://github.com/fastapi/fastapi/pull/12828) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/en/docs/tutorial/path-params-numeric-validations.md`. PR [#12825](https://github.com/fastapi/fastapi/pull/12825) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes for `docs/en/docs/advanced/testing-websockets.md`. PR [#12761](https://github.com/fastapi/fastapi/pull/12761) by [@hamidrasti](https://github.com/hamidrasti).
  * 📝 Update includes for `docs/en/docs/advanced/using-request-directly.md`. PR [#12760](https://github.com/fastapi/fastapi/pull/12760) by [@hamidrasti](https://github.com/hamidrasti).
  * 📝 Update includes for `docs/advanced/wsgi.md`. PR [#12758](https://github.com/fastapi/fastapi/pull/12758) by [@hamidrasti](https://github.com/hamidrasti).
  * 📝 Update includes in `docs/de/docs/tutorial/middleware.md`. PR [#12729](https://github.com/fastapi/fastapi/pull/12729) by [@paintdog](https://github.com/paintdog).
  * 📝 Update includes for `docs/en/docs/tutorial/schema-extra-example.md`. PR [#12822](https://github.com/fastapi/fastapi/pull/12822) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update includes in `docs/fr/docs/advanced/additional-responses.md`. PR [#12634](https://github.com/fastapi/fastapi/pull/12634) by [@fegmorte](https://github.com/fegmorte).
  * 📝 Update includes in `docs/fr/docs/advanced/path-operation-advanced-configuration.md`. PR [#12633](https://github.com/fastapi/fastapi/pull/12633) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/fr/docs/advanced/response-directly.md`. PR [#12632](https://github.com/fastapi/fastapi/pull/12632) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes for `docs/en/docs/tutorial/header-params.md`. PR [#12640](https://github.com/fastapi/fastapi/pull/12640) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes in `docs/en/docs/tutorial/cookie-param-models.md`. PR [#12639](https://github.com/fastapi/fastapi/pull/12639) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes for `docs/en/docs/tutorial/extra-models.md`. PR [#12638](https://github.com/fastapi/fastapi/pull/12638) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes for `docs/en/docs/tutorial/cors.md`. PR [#12637](https://github.com/fastapi/fastapi/pull/12637) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Update includes for `docs/en/docs/tutorial/dependencies/sub-dependencies.md`. PR [#12810](https://github.com/fastapi/fastapi/pull/12810) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes in `docs/en/docs/tutorial/body-nested-models.md`. PR [#12812](https://github.com/fastapi/fastapi/pull/12812) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/en/docs/tutorial/path-operation-configuration.md`. PR [#12809](https://github.com/fastapi/fastapi/pull/12809) by [@AlexWendland](https://github.com/AlexWendland).
  * 📝 Update includes in `docs/en/docs/tutorial/request-files.md`. PR [#12818](https://github.com/fastapi/fastapi/pull/12818) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes for `docs/en/docs/tutorial/query-param-models.md`. PR [#12817](https://github.com/fastapi/fastapi/pull/12817) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes in `docs/en/docs/tutorial/path-params.md`. PR [#12811](https://github.com/fastapi/fastapi/pull/12811) by [@AlexWendland](https://github.com/AlexWendland).
  * 📝 Update includes in `docs/en/docs/tutorial/response-model.md`. PR [#12621](https://github.com/fastapi/fastapi/pull/12621) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/en/docs/advanced/websockets.md`. PR [#12606](https://github.com/fastapi/fastapi/pull/12606) by [@vishnuvskvkl](https://github.com/vishnuvskvkl).
  * 📝 Updates include for `docs/en/docs/tutorial/cookie-params.md`. PR [#12808](https://github.com/fastapi/fastapi/pull/12808) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes in `docs/en/docs/tutorial/middleware.md`. PR [#12807](https://github.com/fastapi/fastapi/pull/12807) by [@AlexWendland](https://github.com/AlexWendland).
  * 📝 Update includes in `docs/en/docs/advanced/sub-applications.md`. PR [#12806](https://github.com/fastapi/fastapi/pull/12806) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/en/docs/advanced/response-headers.md`. PR [#12805](https://github.com/fastapi/fastapi/pull/12805) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/fr/docs/tutorial/first-steps.md`. PR [#12594](https://github.com/fastapi/fastapi/pull/12594) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/en/docs/advanced/response-cookies.md`. PR [#12804](https://github.com/fastapi/fastapi/pull/12804) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes in `docs/en/docs/advanced/path-operation-advanced-configuration.md`. PR [#12802](https://github.com/fastapi/fastapi/pull/12802) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes for `docs/en/docs/advanced/response-directly.md`. PR [#12803](https://github.com/fastapi/fastapi/pull/12803) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes in `docs/zh/docs/tutorial/background-tasks.md`. PR [#12798](https://github.com/fastapi/fastapi/pull/12798) by [@zhaohan-dong](https://github.com/zhaohan-dong).
  * 📝 Update includes for `docs/de/docs/tutorial/body-multiple-params.md`. PR [#12699](https://github.com/fastapi/fastapi/pull/12699) by [@alissadb](https://github.com/alissadb).
  * 📝 Update includes in `docs/em/docs/tutorial/body-updates.md`. PR [#12799](https://github.com/fastapi/fastapi/pull/12799) by [@AlexWendland](https://github.com/AlexWendland).
  * 📝 Update includes `docs/en/docs/advanced/response-change-status-code.md`. PR [#12801](https://github.com/fastapi/fastapi/pull/12801) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes `docs/en/docs/advanced/openapi-callbacks.md`. PR [#12800](https://github.com/fastapi/fastapi/pull/12800) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes in `docs/fr/docs/tutorial/body-multiple-params.md`. PR [#12598](https://github.com/fastapi/fastapi/pull/12598) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/en/docs/tutorial/body-multiple-params.md`. PR [#12593](https://github.com/fastapi/fastapi/pull/12593) by [@Tashanam-Shahbaz](https://github.com/Tashanam-Shahbaz).
  * 📝 Update includes in `docs/pt/docs/tutorial/background-tasks.md`. PR [#12736](https://github.com/fastapi/fastapi/pull/12736) by [@bhunao](https://github.com/bhunao).
  * 📝 Update includes for `docs/en/docs/advanced/custom-response.md`. PR [#12797](https://github.com/fastapi/fastapi/pull/12797) by [@handabaldeep](https://github.com/handabaldeep).
  * 📝 Update includes for `docs/pt/docs/python-types.md`. PR [#12671](https://github.com/fastapi/fastapi/pull/12671) by [@ceb10n](https://github.com/ceb10n).
  * 📝 Update includes for `docs/de/docs/python-types.md`. PR [#12660](https://github.com/fastapi/fastapi/pull/12660) by [@alissadb](https://github.com/alissadb).
  * 📝 Update includes for `docs/de/docs/advanced/dataclasses.md`. PR [#12658](https://github.com/fastapi/fastapi/pull/12658) by [@alissadb](https://github.com/alissadb).
  * 📝 Update includes in `docs/fr/docs/tutorial/path-params.md`. PR [#12592](https://github.com/fastapi/fastapi/pull/12592) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes for `docs/de/docs/how-to/configure-swagger-ui.md`. PR [#12690](https://github.com/fastapi/fastapi/pull/12690) by [@alissadb](https://github.com/alissadb).
  * 📝 Update includes in `docs/en/docs/advanced/security/oauth2-scopes.md`. PR [#12572](https://github.com/fastapi/fastapi/pull/12572) by [@krishnamadhavan](https://github.com/krishnamadhavan).
  * 📝 Update includes for `docs/en/docs/how-to/conditional-openapi.md`. PR [#12624](https://github.com/fastapi/fastapi/pull/12624) by [@rabinlamadong](https://github.com/rabinlamadong).
  * 📝 Update includes in `docs/en/docs/tutorial/dependencies/index.md`. PR [#12615](https://github.com/fastapi/fastapi/pull/12615) by [@bharara](https://github.com/bharara).
  * 📝 Update includes in `docs/en/docs/tutorial/response-status-code.md`. PR [#12620](https://github.com/fastapi/fastapi/pull/12620) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/en/docs/how-to/custom-docs-ui-assets.md`. PR [#12623](https://github.com/fastapi/fastapi/pull/12623) by [@rabinlamadong](https://github.com/rabinlamadong).
  * 📝 Update includes in `docs/en/docs/advanced/openapi-webhooks.md`. PR [#12605](https://github.com/fastapi/fastapi/pull/12605) by [@salmantec](https://github.com/salmantec).
  * 📝 Update includes in `docs/en/docs/advanced/events.md`. PR [#12604](https://github.com/fastapi/fastapi/pull/12604) by [@salmantec](https://github.com/salmantec).
  * 📝 Update includes in `docs/en/docs/advanced/dataclasses.md`. PR [#12603](https://github.com/fastapi/fastapi/pull/12603) by [@salmantec](https://github.com/salmantec).
  * 📝 Update includes in `docs/es/docs/tutorial/cookie-params.md`. PR [#12602](https://github.com/fastapi/fastapi/pull/12602) by [@antonyare93](https://github.com/antonyare93).
  * 📝 Update includes in `docs/fr/docs/tutorial/path-params-numeric-validations.md`. PR [#12601](https://github.com/fastapi/fastapi/pull/12601) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/fr/docs/tutorial/background-tasks.md`. PR [#12600](https://github.com/fastapi/fastapi/pull/12600) by [@kantandane](https://github.com/kantandane).
  * 📝 Update includes in `docs/en/docs/tutorial/encoder.md`. PR [#12597](https://github.com/fastapi/fastapi/pull/12597) by [@tonyjly](https://github.com/tonyjly).
  * 📝 Update includes in `docs/en/docs/how-to/custom-docs-ui-assets.md`. PR [#12557](https://github.com/fastapi/fastapi/pull/12557) by [@philipokiokio](https://github.com/philipokiokio).
  * 🎨 Adjust spacing. PR [#12635](https://github.com/fastapi/fastapi/pull/12635) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update includes in `docs/en/docs/how-to/custom-request-and-route.md`. PR [#12560](https://github.com/fastapi/fastapi/pull/12560) by [@philipokiokio](https://github.com/philipokiokio).

### Translations¶

  * 🌐 Add Korean translation for `docs/ko/docs/advanced/testing-websockets.md`. PR [#12739](https://github.com/fastapi/fastapi/pull/12739) by [@Limsunoh](https://github.com/Limsunoh).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/environment-variables.md`. PR [#12785](https://github.com/fastapi/fastapi/pull/12785) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Chinese translation for `docs/zh/docs/environment-variables.md`. PR [#12784](https://github.com/fastapi/fastapi/pull/12784) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Korean translation for `ko/docs/advanced/response-headers.md`. PR [#12740](https://github.com/fastapi/fastapi/pull/12740) by [@kwang1215](https://github.com/kwang1215).
  * 🌐 Add Chinese translation for `docs/zh/docs/virtual-environments.md`. PR [#12790](https://github.com/fastapi/fastapi/pull/12790) by [@Vincy1230](https://github.com/Vincy1230).
  * 🌐 Add Korean translation for `/docs/ko/docs/environment-variables.md`. PR [#12526](https://github.com/fastapi/fastapi/pull/12526) by [@Tolerblanc](https://github.com/Tolerblanc).
  * 🌐 Add Korean translation for `docs/ko/docs/history-design-future.md`. PR [#12646](https://github.com/fastapi/fastapi/pull/12646) by [@saeye](https://github.com/saeye).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/advanced-dependencies.md`. PR [#12675](https://github.com/fastapi/fastapi/pull/12675) by [@kim-sangah](https://github.com/kim-sangah).
  * 🌐 Add Korean translation for `docs/ko/docs/how-to/conditional-openapi.md`. PR [#12731](https://github.com/fastapi/fastapi/pull/12731) by [@sptcnl](https://github.com/sptcnl).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/using_request_directly.md`. PR [#12738](https://github.com/fastapi/fastapi/pull/12738) by [@kwang1215](https://github.com/kwang1215).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/testing-events.md`. PR [#12741](https://github.com/fastapi/fastapi/pull/12741) by [@9zimin9](https://github.com/9zimin9).
  * 🌐 Add Korean translation for `docs/ko/docs/security/index.md`. PR [#12743](https://github.com/fastapi/fastapi/pull/12743) by [@kim-sangah](https://github.com/kim-sangah).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/path-operation-advanced-configuration.md`. PR [#12762](https://github.com/fastapi/fastapi/pull/12762) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/wsgi.md`. PR [#12659](https://github.com/fastapi/fastapi/pull/12659) by [@Limsunoh](https://github.com/Limsunoh).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/websockets.md`. PR [#12703](https://github.com/fastapi/fastapi/pull/12703) by [@devfernandoa](https://github.com/devfernandoa).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/security/simple-oauth2.md`. PR [#12520](https://github.com/fastapi/fastapi/pull/12520) by [@LidiaDomingos](https://github.com/LidiaDomingos).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/response-directly.md`. PR [#12674](https://github.com/fastapi/fastapi/pull/12674) by [@9zimin9](https://github.com/9zimin9).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/middleware.md`. PR [#12704](https://github.com/fastapi/fastapi/pull/12704) by [@devluisrodrigues](https://github.com/devluisrodrigues).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/openapi-callbacks.md`. PR [#12705](https://github.com/fastapi/fastapi/pull/12705) by [@devfernandoa](https://github.com/devfernandoa).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/request-files.md`. PR [#12706](https://github.com/fastapi/fastapi/pull/12706) by [@devluisrodrigues](https://github.com/devluisrodrigues).
  * 🌐 Add Portuguese Translation for `docs/pt/docs/advanced/custom-response.md`. PR [#12631](https://github.com/fastapi/fastapi/pull/12631) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/metadata.md`. PR [#12538](https://github.com/fastapi/fastapi/pull/12538) by [@LinkolnR](https://github.com/LinkolnR).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/metadata.md`. PR [#12541](https://github.com/fastapi/fastapi/pull/12541) by [@kwang1215](https://github.com/kwang1215).
  * 🌐 Add Korean Translation for `docs/ko/docs/advanced/response-cookies.md`. PR [#12546](https://github.com/fastapi/fastapi/pull/12546) by [@kim-sangah](https://github.com/kim-sangah).
  * 🌐 Add Korean translation for `docs/ko/docs/fastapi-cli.md`. PR [#12515](https://github.com/fastapi/fastapi/pull/12515) by [@dhdld](https://github.com/dhdld).
  * 🌐 Add Korean Translation for `docs/ko/docs/advanced/response-change-status-code.md`. PR [#12547](https://github.com/fastapi/fastapi/pull/12547) by [@9zimin9](https://github.com/9zimin9).

### Internal¶

  * ⬆ [pre-commit.ci] pre-commit autoupdate. PR [#12907](https://github.com/fastapi/fastapi/pull/12907) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).
  * 🔨 Update docs preview script to show previous version and English version. PR [#12856](https://github.com/fastapi/fastapi/pull/12856) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump tiangolo/latest-changes from 0.3.1 to 0.3.2. PR [#12794](https://github.com/fastapi/fastapi/pull/12794) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.12.0 to 1.12.2. PR [#12788](https://github.com/fastapi/fastapi/pull/12788) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.0. PR [#12781](https://github.com/fastapi/fastapi/pull/12781) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump cloudflare/wrangler-action from 3.11 to 3.12. PR [#12777](https://github.com/fastapi/fastapi/pull/12777) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ [pre-commit.ci] pre-commit autoupdate. PR [#12766](https://github.com/fastapi/fastapi/pull/12766) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.11.0. PR [#12721](https://github.com/fastapi/fastapi/pull/12721) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Update pre-commit requirement from =2.17.0 to >=2.17.0,=1.1.2 to >=1.1.2,=7.1.3 to >=7.1.3,=0.40.0,=0.23.0 to >=0.23.0,=0.37.2,=1.3.18 to >=1.3.18,=0.37.2,=0.0.5`.

#### Technical Details¶

Before this, `fastapi` would include the standard dependencies, with Uvicorn and the `fastapi-cli`, etc.

And `fastapi-slim` would not include those standard dependencies.

Now `fastapi` doesn't include those standard dependencies unless you install with `pip install "fastapi[standard]"`.

Before, you would install `pip install fastapi`, now you should include the `standard` optional dependencies (unless you want to exclude one of those): `pip install "fastapi[standard]"`.

This change is because having the standard optional dependencies installed by default was being inconvenient to several users, and having to install instead `fastapi-slim` was not being a feasible solution.

Discussed here: [#11522](https://github.com/fastapi/fastapi/pull/11522) and here: [#11525](https://github.com/fastapi/fastapi/discussions/11525)

### Docs¶

  * ✏️ Fix typos in docs. PR [#11926](https://github.com/fastapi/fastapi/pull/11926) by [@jianghuyiyuan](https://github.com/jianghuyiyuan).
  * 📝 Tweak management docs. PR [#11918](https://github.com/fastapi/fastapi/pull/11918) by [@tiangolo](https://github.com/tiangolo).
  * 🚚 Rename GitHub links from tiangolo/fastapi to fastapi/fastapi. PR [#11913](https://github.com/fastapi/fastapi/pull/11913) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Add docs about FastAPI team and project management. PR [#11908](https://github.com/tiangolo/fastapi/pull/11908) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Re-structure docs main menu. PR [#11904](https://github.com/tiangolo/fastapi/pull/11904) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update Speakeasy URL. PR [#11871](https://github.com/tiangolo/fastapi/pull/11871) by [@ndimares](https://github.com/ndimares).

### Translations¶

  * 🌐 Update Portuguese translation for `docs/pt/docs/alternatives.md`. PR [#11931](https://github.com/fastapi/fastapi/pull/11931) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/dependencies/sub-dependencies.md`. PR [#10515](https://github.com/tiangolo/fastapi/pull/10515) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/response-change-status-code.md`. PR [#11863](https://github.com/tiangolo/fastapi/pull/11863) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Portuguese translation for `docs/pt/docs/reference/background.md`. PR [#11849](https://github.com/tiangolo/fastapi/pull/11849) by [@lucasbalieiro](https://github.com/lucasbalieiro).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md`. PR [#11848](https://github.com/tiangolo/fastapi/pull/11848) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Portuguese translation for `docs/pt/docs/reference/apirouter.md`. PR [#11843](https://github.com/tiangolo/fastapi/pull/11843) by [@lucasbalieiro](https://github.com/lucasbalieiro).

### Internal¶

  * 🔧 Update sponsors: add liblab. PR [#11934](https://github.com/fastapi/fastapi/pull/11934) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub Action label-approved permissions. PR [#11933](https://github.com/fastapi/fastapi/pull/11933) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Refactor GitHub Action to comment docs deployment URLs and update token. PR [#11925](https://github.com/fastapi/fastapi/pull/11925) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update tokens for GitHub Actions. PR [#11924](https://github.com/fastapi/fastapi/pull/11924) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update token permissions to comment deployment URL in docs. PR [#11917](https://github.com/fastapi/fastapi/pull/11917) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update token permissions for GitHub Actions. PR [#11915](https://github.com/fastapi/fastapi/pull/11915) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub Actions token usage. PR [#11914](https://github.com/fastapi/fastapi/pull/11914) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub Action to notify translations with label `approved-1`. PR [#11907](https://github.com/tiangolo/fastapi/pull/11907) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, remove Reflex. PR [#11875](https://github.com/tiangolo/fastapi/pull/11875) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors: remove TalkPython. PR [#11861](https://github.com/tiangolo/fastapi/pull/11861) by [@tiangolo](https://github.com/tiangolo).
  * 🔨 Update docs Termynal scripts to not include line nums for local dev. PR [#11854](https://github.com/tiangolo/fastapi/pull/11854) by [@tiangolo](https://github.com/tiangolo).

## 0.111.1¶

### Upgrades¶

  * ➖ Remove `orjson` and `ujson` from default dependencies. PR [#11842](https://github.com/tiangolo/fastapi/pull/11842) by [@tiangolo](https://github.com/tiangolo).
    * These dependencies are still installed when you install with `pip install "fastapi[all]"`. But they are not included in `pip install fastapi`.
  * 📝 Restored Swagger-UI links to use the latest version possible. PR [#11459](https://github.com/tiangolo/fastapi/pull/11459) by [@UltimateLobster](https://github.com/UltimateLobster).

### Docs¶

  * ✏️ Rewording in `docs/en/docs/fastapi-cli.md`. PR [#11716](https://github.com/tiangolo/fastapi/pull/11716) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update Hypercorn links in all the docs. PR [#11744](https://github.com/tiangolo/fastapi/pull/11744) by [@kittydoor](https://github.com/kittydoor).
  * 📝 Update docs with Ariadne reference from Starlette to FastAPI. PR [#11797](https://github.com/tiangolo/fastapi/pull/11797) by [@DamianCzajkowski](https://github.com/DamianCzajkowski).
  * 📝 Update fastapi instrumentation external link. PR [#11317](https://github.com/tiangolo/fastapi/pull/11317) by [@softwarebloat](https://github.com/softwarebloat).
  * ✏️ Fix links to alembic example repo in docs. PR [#11628](https://github.com/tiangolo/fastapi/pull/11628) by [@augiwan](https://github.com/augiwan).
  * ✏️ Update `docs/en/docs/fastapi-cli.md`. PR [#11715](https://github.com/tiangolo/fastapi/pull/11715) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update External Links . PR [#11500](https://github.com/tiangolo/fastapi/pull/11500) by [@devon2018](https://github.com/devon2018).
  * 📝 Add External Link: Tutorial de FastAPI, ¿el mejor framework de Python?. PR [#11618](https://github.com/tiangolo/fastapi/pull/11618) by [@EduardoZepeda](https://github.com/EduardoZepeda).
  * 📝 Fix typo in `docs/en/docs/tutorial/body-multiple-params.md`. PR [#11698](https://github.com/tiangolo/fastapi/pull/11698) by [@mwb-u](https://github.com/mwb-u).
  * 📝 Add External Link: Deploy a Serverless FastAPI App with Neon Postgres and AWS App Runner at any scale. PR [#11633](https://github.com/tiangolo/fastapi/pull/11633) by [@ananis25](https://github.com/ananis25).
  * 📝 Update `security/first-steps.md`. PR [#11674](https://github.com/tiangolo/fastapi/pull/11674) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update `security/first-steps.md`. PR [#11673](https://github.com/tiangolo/fastapi/pull/11673) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Update note in `path-params-numeric-validations.md`. PR [#11672](https://github.com/tiangolo/fastapi/pull/11672) by [@alejsdev](https://github.com/alejsdev).
  * 📝 Tweak intro docs about `Annotated` and `Query()` params. PR [#11664](https://github.com/tiangolo/fastapi/pull/11664) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update JWT auth documentation to use PyJWT instead of pyhon-jose. PR [#11589](https://github.com/tiangolo/fastapi/pull/11589) by [@estebanx64](https://github.com/estebanx64).
  * 📝 Update docs. PR [#11603](https://github.com/tiangolo/fastapi/pull/11603) by [@alejsdev](https://github.com/alejsdev).
  * ✏️ Fix typo: convert every 're-use' to 'reuse'.. PR [#11598](https://github.com/tiangolo/fastapi/pull/11598) by [@hasansezertasan](https://github.com/hasansezertasan).
  * ✏️ Fix typo in `fastapi/applications.py`. PR [#11593](https://github.com/tiangolo/fastapi/pull/11593) by [@petarmaric](https://github.com/petarmaric).
  * ✏️ Fix link in `fastapi-cli.md`. PR [#11524](https://github.com/tiangolo/fastapi/pull/11524) by [@svlandeg](https://github.com/svlandeg).

### Translations¶

  * 🌐 Add Spanish translation for `docs/es/docs/how-to/graphql.md`. PR [#11697](https://github.com/tiangolo/fastapi/pull/11697) by [@camigomezdev](https://github.com/camigomezdev).
  * 🌐 Add Portuguese translation for `docs/pt/docs/reference/index.md`. PR [#11840](https://github.com/tiangolo/fastapi/pull/11840) by [@lucasbalieiro](https://github.com/lucasbalieiro).
  * 🌐 Fix link in German translation. PR [#11836](https://github.com/tiangolo/fastapi/pull/11836) by [@anitahammer](https://github.com/anitahammer).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/sub-dependencies.md`. PR [#11792](https://github.com/tiangolo/fastapi/pull/11792) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Turkish translation for `docs/tr/docs/tutorial/request-forms.md`. PR [#11553](https://github.com/tiangolo/fastapi/pull/11553) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Portuguese translation for `docs/pt/docs/reference/exceptions.md`. PR [#11834](https://github.com/tiangolo/fastapi/pull/11834) by [@lucasbalieiro](https://github.com/lucasbalieiro).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/global-dependencies.md`. PR [#11826](https://github.com/tiangolo/fastapi/pull/11826) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Portuguese translation for `docs/pt/docs/how-to/general.md`. PR [#11825](https://github.com/tiangolo/fastapi/pull/11825) by [@lucasbalieiro](https://github.com/lucasbalieiro).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/async-tests.md`. PR [#11808](https://github.com/tiangolo/fastapi/pull/11808) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Ukrainian translation for `docs/uk/docs/tutorial/first-steps.md`. PR [#11809](https://github.com/tiangolo/fastapi/pull/11809) by [@vkhoroshchak](https://github.com/vkhoroshchak).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-operators.md`. PR [#11804](https://github.com/tiangolo/fastapi/pull/11804) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Chinese translation for `docs/zh/docs/fastapi-cli.md`. PR [#11786](https://github.com/tiangolo/fastapi/pull/11786) by [@logan2d5](https://github.com/logan2d5).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/openapi-webhooks.md`. PR [#11791](https://github.com/tiangolo/fastapi/pull/11791) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Update Chinese translation for `docs/tutorial/security/oauth2-jwt.md`. PR [#11781](https://github.com/tiangolo/fastapi/pull/11781) by [@logan2d5](https://github.com/logan2d5).
  * 📝 Fix image missing in French translation for `docs/fr/docs/async.md` . PR [#11787](https://github.com/tiangolo/fastapi/pull/11787) by [@pe-brian](https://github.com/pe-brian).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/advanced-dependencies.md`. PR [#11775](https://github.com/tiangolo/fastapi/pull/11775) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md`. PR [#11768](https://github.com/tiangolo/fastapi/pull/11768) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/additional-status-codes.md`. PR [#11753](https://github.com/tiangolo/fastapi/pull/11753) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/dependencies/index.md`. PR [#11757](https://github.com/tiangolo/fastapi/pull/11757) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/settings.md`. PR [#11739](https://github.com/tiangolo/fastapi/pull/11739) by [@Joao-Pedro-P-Holanda](https://github.com/Joao-Pedro-P-Holanda).
  * 🌐 Add French translation for `docs/fr/docs/learn/index.md`. PR [#11712](https://github.com/tiangolo/fastapi/pull/11712) by [@benjaminvandammeholberton](https://github.com/benjaminvandammeholberton).
  * 🌐 Add Portuguese translation for `docs/pt/docs/how-to/index.md`. PR [#11731](https://github.com/tiangolo/fastapi/pull/11731) by [@vhsenna](https://github.com/vhsenna).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/additional-responses.md`. PR [#11736](https://github.com/tiangolo/fastapi/pull/11736) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/benchmarks.md`. PR [#11713](https://github.com/tiangolo/fastapi/pull/11713) by [@ceb10n](https://github.com/ceb10n).
  * 🌐 Fix Korean translation for `docs/ko/docs/tutorial/response-status-code.md`. PR [#11718](https://github.com/tiangolo/fastapi/pull/11718) by [@nayeonkinn](https://github.com/nayeonkinn).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/extra-data-types.md`. PR [#11711](https://github.com/tiangolo/fastapi/pull/11711) by [@nayeonkinn](https://github.com/nayeonkinn).
  * 🌐 Fix Korean translation for `docs/ko/docs/tutorial/body-nested-models.md`. PR [#11710](https://github.com/tiangolo/fastapi/pull/11710) by [@nayeonkinn](https://github.com/nayeonkinn).
  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/fastapi-cli.md`. PR [#11641](https://github.com/tiangolo/fastapi/pull/11641) by [@ayr-ton](https://github.com/ayr-ton).
  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/docs/fastapi-people.md`. PR [#11639](https://github.com/tiangolo/fastapi/pull/11639) by [@hsuanchi](https://github.com/hsuanchi).
  * 🌐 Add Turkish translation for `docs/tr/docs/advanced/index.md`. PR [#11606](https://github.com/tiangolo/fastapi/pull/11606) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/deployment/cloud.md`. PR [#11610](https://github.com/tiangolo/fastapi/pull/11610) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/advanced/security/index.md`. PR [#11609](https://github.com/tiangolo/fastapi/pull/11609) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/advanced/testing-websockets.md`. PR [#11608](https://github.com/tiangolo/fastapi/pull/11608) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/how-to/general.md`. PR [#11607](https://github.com/tiangolo/fastapi/pull/11607) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Update Chinese translation for `docs/zh/docs/advanced/templates.md`. PR [#11620](https://github.com/tiangolo/fastapi/pull/11620) by [@chaoless](https://github.com/chaoless).
  * 🌐 Add Turkish translation for `docs/tr/docs/deployment/index.md`. PR [#11605](https://github.com/tiangolo/fastapi/pull/11605) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/tutorial/static-files.md`. PR [#11599](https://github.com/tiangolo/fastapi/pull/11599) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Polish translation for `docs/pl/docs/fastapi-people.md`. PR [#10196](https://github.com/tiangolo/fastapi/pull/10196) by [@isulim](https://github.com/isulim).
  * 🌐 Add Turkish translation for `docs/tr/docs/advanced/wsgi.md`. PR [#11575](https://github.com/tiangolo/fastapi/pull/11575) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/tutorial/cookie-params.md`. PR [#11561](https://github.com/tiangolo/fastapi/pull/11561) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Russian translation for `docs/ru/docs/about/index.md`. PR [#10961](https://github.com/tiangolo/fastapi/pull/10961) by [@s111d](https://github.com/s111d).
  * 🌐 Update Chinese translation for `docs/zh/docs/tutorial/sql-databases.md`. PR [#11539](https://github.com/tiangolo/fastapi/pull/11539) by [@chaoless](https://github.com/chaoless).
  * 🌐 Add Chinese translation for `docs/zh/docs/how-to/configure-swagger-ui.md`. PR [#11501](https://github.com/tiangolo/fastapi/pull/11501) by [@Lucas-lyh](https://github.com/Lucas-lyh).
  * 🌐 Update Chinese translation for `/docs/advanced/security/http-basic-auth.md`. PR [#11512](https://github.com/tiangolo/fastapi/pull/11512) by [@nick-cjyx9](https://github.com/nick-cjyx9).

### Internal¶

  * ♻️ Simplify internal docs script. PR [#11777](https://github.com/tiangolo/fastapi/pull/11777) by [@gitworkflows](https://github.com/gitworkflows).
  * 🔧 Update sponsors: add Fine. PR [#11784](https://github.com/tiangolo/fastapi/pull/11784) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Tweak sponsors: Kong URL. PR [#11765](https://github.com/tiangolo/fastapi/pull/11765) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Tweak sponsors: Kong URL. PR [#11764](https://github.com/tiangolo/fastapi/pull/11764) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add Stainless. PR [#11763](https://github.com/tiangolo/fastapi/pull/11763) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add Zuplo. PR [#11729](https://github.com/tiangolo/fastapi/pull/11729) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update Sponsor link: Coherence. PR [#11730](https://github.com/tiangolo/fastapi/pull/11730) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#11669](https://github.com/tiangolo/fastapi/pull/11669) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add sponsor Kong. PR [#11662](https://github.com/tiangolo/fastapi/pull/11662) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update Smokeshow, fix sync download artifact and smokeshow configs. PR [#11563](https://github.com/tiangolo/fastapi/pull/11563) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update Smokeshow download artifact GitHub Action. PR [#11562](https://github.com/tiangolo/fastapi/pull/11562) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub actions to download and upload artifacts to v4, for docs and coverage. PR [#11550](https://github.com/tiangolo/fastapi/pull/11550) by [@tamird](https://github.com/tamird).
  * 👷 Tweak CI for test-redistribute, add needed env vars for slim. PR [#11549](https://github.com/tiangolo/fastapi/pull/11549) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#11511](https://github.com/tiangolo/fastapi/pull/11511) by [@tiangolo](https://github.com/tiangolo).

## 0.111.0¶

### Features¶

  * ✨ Add FastAPI CLI, the new `fastapi` command. PR [#11522](https://github.com/tiangolo/fastapi/pull/11522) by [@tiangolo](https://github.com/tiangolo).
    * New docs: [FastAPI CLI](https://fastapi.tiangolo.com/fastapi-cli/).

Try it out with:

    $ pip install --upgrade fastapi

    $ fastapi dev main.py

     ╭────────── FastAPI CLI - Development mode ───────────╮
     │                                                     │
     │  Serving at: http://127.0.0.1:8000                  │
     │                                                     │
     │  API docs: http://127.0.0.1:8000/docs               │
     │                                                     │
     │  Running in development mode, for production use:   │
     │                                                     │
     │  fastapi run                                        │
     │                                                     │
     ╰─────────────────────────────────────────────────────╯

    INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
    INFO:     Started reloader process [2248755] using WatchFiles
    INFO:     Started server process [2248757]
    INFO:     Waiting for application startup.
    INFO:     Application startup complete.

### Refactors¶

  * 🔧 Add configs and setup for `fastapi-slim` including optional extras `fastapi-slim[standard]`, and `fastapi` including by default the same `standard` extras. PR [#11503](https://github.com/tiangolo/fastapi/pull/11503) by [@tiangolo](https://github.com/tiangolo).

## 0.110.3¶

### Docs¶

  * 📝 Update references to Python version, FastAPI supports all the current versions, no need to make the version explicit. PR [#11496](https://github.com/tiangolo/fastapi/pull/11496) by [@tiangolo](https://github.com/tiangolo).
  * ✏️ Fix typo in `fastapi/security/api_key.py`. PR [#11481](https://github.com/tiangolo/fastapi/pull/11481) by [@ch33zer](https://github.com/ch33zer).
  * ✏️ Fix typo in `security/http.py`. PR [#11455](https://github.com/tiangolo/fastapi/pull/11455) by [@omarmoo5](https://github.com/omarmoo5).

### Translations¶

  * 🌐 Add Traditional Chinese translation for `docs/zh-hant/benchmarks.md`. PR [#11484](https://github.com/tiangolo/fastapi/pull/11484) by [@KNChiu](https://github.com/KNChiu).
  * 🌐 Update Chinese translation for `docs/zh/docs/fastapi-people.md`. PR [#11476](https://github.com/tiangolo/fastapi/pull/11476) by [@billzhong](https://github.com/billzhong).
  * 🌐 Add Chinese translation for `docs/zh/docs/how-to/index.md` and `docs/zh/docs/how-to/general.md`. PR [#11443](https://github.com/tiangolo/fastapi/pull/11443) by [@billzhong](https://github.com/billzhong).
  * 🌐 Add Spanish translation for cookie-params `docs/es/docs/tutorial/cookie-params.md`. PR [#11410](https://github.com/tiangolo/fastapi/pull/11410) by [@fabianfalon](https://github.com/fabianfalon).

### Internal¶

  * ⬆ Bump mkdocstrings[python] from 0.23.0 to 0.24.3. PR [#11469](https://github.com/tiangolo/fastapi/pull/11469) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔨 Update internal scripts and remove unused ones. PR [#11499](https://github.com/tiangolo/fastapi/pull/11499) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Migrate from Hatch to PDM for the internal build. PR [#11498](https://github.com/tiangolo/fastapi/pull/11498) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade MkDocs Material and re-enable cards. PR [#11466](https://github.com/tiangolo/fastapi/pull/11466) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump pillow from 10.2.0 to 10.3.0. PR [#11403](https://github.com/tiangolo/fastapi/pull/11403) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔧 Ungroup dependabot updates. PR [#11465](https://github.com/tiangolo/fastapi/pull/11465) by [@tiangolo](https://github.com/tiangolo).

## 0.110.2¶

### Fixes¶

  * 🐛 Fix support for query parameters with list types, handle JSON encoding Pydantic `UndefinedType`. PR [#9929](https://github.com/tiangolo/fastapi/pull/9929) by [@arjwilliams](https://github.com/arjwilliams).

### Refactors¶

  * ♻️ Simplify Pydantic configs in OpenAPI models in `fastapi/openapi/models.py`. PR [#10886](https://github.com/tiangolo/fastapi/pull/10886) by [@JoeTanto2](https://github.com/JoeTanto2).
  * ✨ Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR [#11461](https://github.com/tiangolo/fastapi/pull/11461) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * 📝 Fix types in examples under `docs_src/extra_data_types`. PR [#10535](https://github.com/tiangolo/fastapi/pull/10535) by [@nilslindemann](https://github.com/nilslindemann).
  * 📝 Update references to UJSON. PR [#11464](https://github.com/tiangolo/fastapi/pull/11464) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Tweak docs and translations links, typos, format. PR [#11389](https://github.com/tiangolo/fastapi/pull/11389) by [@nilslindemann](https://github.com/nilslindemann).
  * 📝 Fix typo in `docs/es/docs/async.md`. PR [#11400](https://github.com/tiangolo/fastapi/pull/11400) by [@fabianfalon](https://github.com/fabianfalon).
  * 📝 Update OpenAPI client generation docs to use `@hey-api/openapi-ts`. PR [#11339](https://github.com/tiangolo/fastapi/pull/11339) by [@jordanshatford](https://github.com/jordanshatford).

### Translations¶

  * 🌐 Update Chinese translation for `docs/zh/docs/index.html`. PR [#11430](https://github.com/tiangolo/fastapi/pull/11430) by [@waketzheng](https://github.com/waketzheng).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md`. PR [#11411](https://github.com/tiangolo/fastapi/pull/11411) by [@anton2yakovlev](https://github.com/anton2yakovlev).
  * 🌐 Add Portuguese translations for `learn/index.md` `resources/index.md` `help/index.md` `about/index.md`. PR [#10807](https://github.com/tiangolo/fastapi/pull/10807) by [@nazarepiedady](https://github.com/nazarepiedady).
  * 🌐 Update Russian translations for deployments docs. PR [#11271](https://github.com/tiangolo/fastapi/pull/11271) by [@Lufa1u](https://github.com/Lufa1u).
  * 🌐 Add Bengali translations for `docs/bn/docs/python-types.md`. PR [#11376](https://github.com/tiangolo/fastapi/pull/11376) by [@imtiaz101325](https://github.com/imtiaz101325).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/security/simple-oauth2.md`. PR [#5744](https://github.com/tiangolo/fastapi/pull/5744) by [@KdHyeon0661](https://github.com/KdHyeon0661).
  * 🌐 Add Korean translation for `docs/ko/docs/help-fastapi.md`. PR [#4139](https://github.com/tiangolo/fastapi/pull/4139) by [@kty4119](https://github.com/kty4119).
  * 🌐 Add Korean translation for `docs/ko/docs/advanced/events.md`. PR [#5087](https://github.com/tiangolo/fastapi/pull/5087) by [@pers0n4](https://github.com/pers0n4).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/path-operation-configuration.md`. PR [#1954](https://github.com/tiangolo/fastapi/pull/1954) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/request-forms-and-files.md`. PR [#1946](https://github.com/tiangolo/fastapi/pull/1946) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md`. PR [#10532](https://github.com/tiangolo/fastapi/pull/10532) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/debugging.md`. PR [#5695](https://github.com/tiangolo/fastapi/pull/5695) by [@JungWooGeon](https://github.com/JungWooGeon).

### Internal¶

  * ⬆️ Upgrade version of typer for docs. PR [#11393](https://github.com/tiangolo/fastapi/pull/11393) by [@tiangolo](https://github.com/tiangolo).

## 0.110.1¶

### Fixes¶

  * 🐛 Fix parameterless `Depends()` with generics. PR [#9479](https://github.com/tiangolo/fastapi/pull/9479) by [@nzig](https://github.com/nzig).

### Refactors¶

  * ♻️ Update mypy. PR [#11049](https://github.com/tiangolo/fastapi/pull/11049) by [@k0t3n](https://github.com/k0t3n).
  * ♻️ Simplify string format with f-strings in `fastapi/applications.py`. PR [#11335](https://github.com/tiangolo/fastapi/pull/11335) by [@igeni](https://github.com/igeni).

### Upgrades¶

  * ⬆️ Upgrade Starlette to >=0.37.2,= 0.36.3`. PR [#11086](https://github.com/tiangolo/fastapi/pull/11086) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Update Turkish translation for `docs/tr/docs/fastapi-people.md`. PR [#10547](https://github.com/tiangolo/fastapi/pull/10547) by [@alperiox](https://github.com/alperiox).

### Internal¶

  * 🍱 Add new FastAPI logo. PR [#11090](https://github.com/tiangolo/fastapi/pull/11090) by [@tiangolo](https://github.com/tiangolo).

## 0.109.1¶

### Security fixes¶

  * ⬆️ Upgrade minimum version of `python-multipart` to `>=0.0.7` to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade `python-multipart`.

### Features¶

  * ✨ Include HTTP 205 in status codes with no body. PR [#10969](https://github.com/tiangolo/fastapi/pull/10969) by [@tiangolo](https://github.com/tiangolo).

### Refactors¶

  * ✅ Refactor tests for duplicate operation ID generation for compatibility with other tools running the FastAPI test suite. PR [#10876](https://github.com/tiangolo/fastapi/pull/10876) by [@emmettbutler](https://github.com/emmettbutler).
  * ♻️ Simplify string format with f-strings in `fastapi/utils.py`. PR [#10576](https://github.com/tiangolo/fastapi/pull/10576) by [@eukub](https://github.com/eukub).
  * 🔧 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR [#10893](https://github.com/tiangolo/fastapi/pull/10893) by [@jiridanek](https://github.com/jiridanek).
  * ✅ Re-enable test in `tests/test_tutorial/test_header_params/test_tutorial003.py` after fix in Starlette. PR [#10904](https://github.com/tiangolo/fastapi/pull/10904) by [@ooknimm](https://github.com/ooknimm).

### Docs¶

  * 📝 Tweak wording in `help-fastapi.md`. PR [#11040](https://github.com/tiangolo/fastapi/pull/11040) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Tweak docs for Behind a Proxy. PR [#11038](https://github.com/tiangolo/fastapi/pull/11038) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Add External Link: 10 Tips for adding SQLAlchemy to FastAPI. PR [#11036](https://github.com/tiangolo/fastapi/pull/11036) by [@Donnype](https://github.com/Donnype).
  * 📝 Add External Link: Tips on migrating from Flask to FastAPI and vice-versa. PR [#11029](https://github.com/tiangolo/fastapi/pull/11029) by [@jtemporal](https://github.com/jtemporal).
  * 📝 Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR [#10979](https://github.com/tiangolo/fastapi/pull/10979) by [@tiangolo](https://github.com/tiangolo).
  * ✏️ Fix typo in `fastapi/security/oauth2.py`. PR [#10972](https://github.com/tiangolo/fastapi/pull/10972) by [@RafalSkolasinski](https://github.com/RafalSkolasinski).
  * 📝 Update `HTTPException` details in `docs/en/docs/tutorial/handling-errors.md`. PR [#5418](https://github.com/tiangolo/fastapi/pull/5418) by [@papb](https://github.com/papb).
  * ✏️ A few tweaks in `docs/de/docs/tutorial/first-steps.md`. PR [#10959](https://github.com/tiangolo/fastapi/pull/10959) by [@nilslindemann](https://github.com/nilslindemann).
  * ✏️ Fix link in `docs/en/docs/advanced/async-tests.md`. PR [#10960](https://github.com/tiangolo/fastapi/pull/10960) by [@nilslindemann](https://github.com/nilslindemann).
  * ✏️ Fix typos for Spanish documentation. PR [#10957](https://github.com/tiangolo/fastapi/pull/10957) by [@jlopezlira](https://github.com/jlopezlira).
  * 📝 Add warning about lifespan functions and backwards compatibility with events. PR [#10734](https://github.com/tiangolo/fastapi/pull/10734) by [@jacob-indigo](https://github.com/jacob-indigo).
  * ✏️ Fix broken link in `docs/tutorial/sql-databases.md` in several languages. PR [#10716](https://github.com/tiangolo/fastapi/pull/10716) by [@theoohoho](https://github.com/theoohoho).
  * ✏️ Remove broken links from `external_links.yml`. PR [#10943](https://github.com/tiangolo/fastapi/pull/10943) by [@Torabek](https://github.com/Torabek).
  * 📝 Update template docs with more info about `url_for`. PR [#5937](https://github.com/tiangolo/fastapi/pull/5937) by [@EzzEddin](https://github.com/EzzEddin).
  * 📝 Update usage of Token model in security docs. PR [#9313](https://github.com/tiangolo/fastapi/pull/9313) by [@piotrszacilowski](https://github.com/piotrszacilowski).
  * ✏️ Update highlighted line in `docs/en/docs/tutorial/bigger-applications.md`. PR [#5490](https://github.com/tiangolo/fastapi/pull/5490) by [@papb](https://github.com/papb).
  * 📝 Add External Link: Explore How to Effectively Use JWT With FastAPI. PR [#10212](https://github.com/tiangolo/fastapi/pull/10212) by [@aanchlia](https://github.com/aanchlia).
  * 📝 Add hyperlink to `docs/en/docs/tutorial/static-files.md`. PR [#10243](https://github.com/tiangolo/fastapi/pull/10243) by [@hungtsetse](https://github.com/hungtsetse).
  * 📝 Add External Link: Instrument a FastAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR [#9440](https://github.com/tiangolo/fastapi/pull/9440) by [@softwarebloat](https://github.com/softwarebloat).
  * 📝 Review and rewording of `en/docs/contributing.md`. PR [#10480](https://github.com/tiangolo/fastapi/pull/10480) by [@nilslindemann](https://github.com/nilslindemann).
  * 📝 Add External Link: ML serving and monitoring with FastAPI and Evidently. PR [#9701](https://github.com/tiangolo/fastapi/pull/9701) by [@mnrozhkov](https://github.com/mnrozhkov).
  * 📝 Reword in docs, from "have in mind" to "keep in mind". PR [#10376](https://github.com/tiangolo/fastapi/pull/10376) by [@malicious](https://github.com/malicious).
  * 📝 Add External Link: Talk by Jeny Sadadia. PR [#10265](https://github.com/tiangolo/fastapi/pull/10265) by [@JenySadadia](https://github.com/JenySadadia).
  * 📝 Add location info to `tutorial/bigger-applications.md`. PR [#10552](https://github.com/tiangolo/fastapi/pull/10552) by [@nilslindemann](https://github.com/nilslindemann).
  * ✏️ Fix Pydantic method name in `docs/en/docs/advanced/path-operation-advanced-configuration.md`. PR [#10826](https://github.com/tiangolo/fastapi/pull/10826) by [@ahmedabdou14](https://github.com/ahmedabdou14).

### Translations¶

  * 🌐 Add Spanish translation for `docs/es/docs/external-links.md`. PR [#10933](https://github.com/tiangolo/fastapi/pull/10933) by [@pablocm83](https://github.com/pablocm83).
  * 🌐 Update Korean translation for `docs/ko/docs/tutorial/first-steps.md`, `docs/ko/docs/tutorial/index.md`, `docs/ko/docs/tutorial/path-params.md`, and `docs/ko/docs/tutorial/query-params.md`. PR [#4218](https://github.com/tiangolo/fastapi/pull/4218) by [@SnowSuno](https://github.com/SnowSuno).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md`. PR [#10870](https://github.com/tiangolo/fastapi/pull/10870) by [@zhiquanchi](https://github.com/zhiquanchi).
  * 🌐 Add Chinese translation for `docs/zh/docs/deployment/concepts.md`. PR [#10282](https://github.com/tiangolo/fastapi/pull/10282) by [@xzmeng](https://github.com/xzmeng).
  * 🌐 Add Azerbaijani translation for `docs/az/docs/index.md`. PR [#11047](https://github.com/tiangolo/fastapi/pull/11047) by [@aykhans](https://github.com/aykhans).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/middleware.md`. PR [#2829](https://github.com/tiangolo/fastapi/pull/2829) by [@JeongHyeongKim](https://github.com/JeongHyeongKim).
  * 🌐 Add German translation for `docs/de/docs/tutorial/body-nested-models.md`. PR [#10313](https://github.com/tiangolo/fastapi/pull/10313) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add Persian translation for `docs/fa/docs/tutorial/middleware.md`. PR [#9695](https://github.com/tiangolo/fastapi/pull/9695) by [@mojtabapaso](https://github.com/mojtabapaso).
  * 🌐 Update Farsi translation for `docs/fa/docs/index.md`. PR [#10216](https://github.com/tiangolo/fastapi/pull/10216) by [@theonlykingpin](https://github.com/theonlykingpin).
  * 🌐 Add German translation for `docs/de/docs/tutorial/body-fields.md`. PR [#10310](https://github.com/tiangolo/fastapi/pull/10310) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/tutorial/body.md`. PR [#10295](https://github.com/tiangolo/fastapi/pull/10295) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/tutorial/body-multiple-params.md`. PR [#10308](https://github.com/tiangolo/fastapi/pull/10308) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/security/get-current-user.md`. PR [#2681](https://github.com/tiangolo/fastapi/pull/2681) by [@sh0nk](https://github.com/sh0nk).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/advanced-dependencies.md`. PR [#3798](https://github.com/tiangolo/fastapi/pull/3798) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/events.md`. PR [#3815](https://github.com/tiangolo/fastapi/pull/3815) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/behind-a-proxy.md`. PR [#3820](https://github.com/tiangolo/fastapi/pull/3820) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/testing-events.md`. PR [#3818](https://github.com/tiangolo/fastapi/pull/3818) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/testing-websockets.md`. PR [#3817](https://github.com/tiangolo/fastapi/pull/3817) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/testing-database.md`. PR [#3821](https://github.com/tiangolo/fastapi/pull/3821) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/deployment/deta.md`. PR [#3837](https://github.com/tiangolo/fastapi/pull/3837) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/history-design-future.md`. PR [#3832](https://github.com/tiangolo/fastapi/pull/3832) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/project-generation.md`. PR [#3831](https://github.com/tiangolo/fastapi/pull/3831) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Chinese translation for `docs/zh/docs/deployment/docker.md`. PR [#10296](https://github.com/tiangolo/fastapi/pull/10296) by [@xzmeng](https://github.com/xzmeng).
  * 🌐 Update Spanish translation for `docs/es/docs/features.md`. PR [#10884](https://github.com/tiangolo/fastapi/pull/10884) by [@pablocm83](https://github.com/pablocm83).
  * 🌐 Add Spanish translation for `docs/es/docs/newsletter.md`. PR [#10922](https://github.com/tiangolo/fastapi/pull/10922) by [@pablocm83](https://github.com/pablocm83).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/background-tasks.md`. PR [#5910](https://github.com/tiangolo/fastapi/pull/5910) by [@junah201](https://github.com/junah201).
  * :globe_with_meridians: Add Turkish translation for `docs/tr/docs/alternatives.md`. PR [#10502](https://github.com/tiangolo/fastapi/pull/10502) by [@alperiox](https://github.com/alperiox).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/dependencies/index.md`. PR [#10989](https://github.com/tiangolo/fastapi/pull/10989) by [@KaniKim](https://github.com/KaniKim).
  * 🌐 Add Korean translation for `/docs/ko/docs/tutorial/body.md`. PR [#11000](https://github.com/tiangolo/fastapi/pull/11000) by [@KaniKim](https://github.com/KaniKim).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/schema-extra-example.md`. PR [#4065](https://github.com/tiangolo/fastapi/pull/4065) by [@luccasmmg](https://github.com/luccasmmg).
  * 🌐 Add Turkish translation for `docs/tr/docs/history-design-future.md`. PR [#11012](https://github.com/tiangolo/fastapi/pull/11012) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/resources/index.md`. PR [#11020](https://github.com/tiangolo/fastapi/pull/11020) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/how-to/index.md`. PR [#11021](https://github.com/tiangolo/fastapi/pull/11021) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add German translation for `docs/de/docs/tutorial/query-params.md`. PR [#10293](https://github.com/tiangolo/fastapi/pull/10293) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/benchmarks.md`. PR [#10866](https://github.com/tiangolo/fastapi/pull/10866) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add Turkish translation for `docs/tr/docs/learn/index.md`. PR [#11014](https://github.com/tiangolo/fastapi/pull/11014) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Persian translation for `docs/fa/docs/tutorial/security/index.md`. PR [#9945](https://github.com/tiangolo/fastapi/pull/9945) by [@mojtabapaso](https://github.com/mojtabapaso).
  * 🌐 Add Turkish translation for `docs/tr/docs/help/index.md`. PR [#11013](https://github.com/tiangolo/fastapi/pull/11013) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Turkish translation for `docs/tr/docs/about/index.md`. PR [#11006](https://github.com/tiangolo/fastapi/pull/11006) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Update Turkish translation for `docs/tr/docs/benchmarks.md`. PR [#11005](https://github.com/tiangolo/fastapi/pull/11005) by [@hasansezertasan](https://github.com/hasansezertasan).
  * 🌐 Add Italian translation for `docs/it/docs/index.md`. PR [#5233](https://github.com/tiangolo/fastapi/pull/5233) by [@matteospanio](https://github.com/matteospanio).
  * 🌐 Add Korean translation for `docs/ko/docs/help/index.md`. PR [#10983](https://github.com/tiangolo/fastapi/pull/10983) by [@KaniKim](https://github.com/KaniKim).
  * 🌐 Add Korean translation for `docs/ko/docs/features.md`. PR [#10976](https://github.com/tiangolo/fastapi/pull/10976) by [@KaniKim](https://github.com/KaniKim).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/security/get-current-user.md`. PR [#5737](https://github.com/tiangolo/fastapi/pull/5737) by [@KdHyeon0661](https://github.com/KdHyeon0661).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/security/first-steps.md`. PR [#10541](https://github.com/tiangolo/fastapi/pull/10541) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/handling-errors.md`. PR [#10375](https://github.com/tiangolo/fastapi/pull/10375) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/encoder.md`. PR [#10374](https://github.com/tiangolo/fastapi/pull/10374) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/body-updates.md`. PR [#10373](https://github.com/tiangolo/fastapi/pull/10373) by [@AlertRED](https://github.com/AlertRED).
  * 🌐 Russian translation: updated `fastapi-people.md`.. PR [#10255](https://github.com/tiangolo/fastapi/pull/10255) by [@NiKuma0](https://github.com/NiKuma0).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/security/index.md`. PR [#5798](https://github.com/tiangolo/fastapi/pull/5798) by [@3w36zj6](https://github.com/3w36zj6).
  * 🌐 Add German translation for `docs/de/docs/advanced/generate-clients.md`. PR [#10725](https://github.com/tiangolo/fastapi/pull/10725) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/advanced/openapi-webhooks.md`. PR [#10712](https://github.com/tiangolo/fastapi/pull/10712) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/advanced/custom-response.md`. PR [#10624](https://github.com/tiangolo/fastapi/pull/10624) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/advanced/additional-status-codes.md`. PR [#10617](https://github.com/tiangolo/fastapi/pull/10617) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add German translation for `docs/de/docs/tutorial/middleware.md`. PR [#10391](https://github.com/tiangolo/fastapi/pull/10391) by [@JohannesJungbluth](https://github.com/JohannesJungbluth).
  * 🌐 Add German translation for introduction documents. PR [#10497](https://github.com/tiangolo/fastapi/pull/10497) by [@nilslindemann](https://github.com/nilslindemann).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/encoder.md`. PR [#1955](https://github.com/tiangolo/fastapi/pull/1955) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/extra-data-types.md`. PR [#1932](https://github.com/tiangolo/fastapi/pull/1932) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Turkish translation for `docs/tr/docs/async.md`. PR [#5191](https://github.com/tiangolo/fastapi/pull/5191) by [@BilalAlpaslan](https://github.com/BilalAlpaslan).
  * 🌐 Add Turkish translation for `docs/tr/docs/project-generation.md`. PR [#5192](https://github.com/tiangolo/fastapi/pull/5192) by [@BilalAlpaslan](https://github.com/BilalAlpaslan).
  * 🌐 Add Korean translation for `docs/ko/docs/deployment/docker.md`. PR [#5657](https://github.com/tiangolo/fastapi/pull/5657) by [@nearnear](https://github.com/nearnear).
  * 🌐 Add Korean translation for `docs/ko/docs/deployment/server-workers.md`. PR [#4935](https://github.com/tiangolo/fastapi/pull/4935) by [@jujumilk3](https://github.com/jujumilk3).
  * 🌐 Add Korean translation for `docs/ko/docs/deployment/index.md`. PR [#4561](https://github.com/tiangolo/fastapi/pull/4561) by [@jujumilk3](https://github.com/jujumilk3).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/path-operation-configuration.md`. PR [#3639](https://github.com/tiangolo/fastapi/pull/3639) by [@jungsu-kwon](https://github.com/jungsu-kwon).
  * 🌐 Modify the description of `zh` \- Traditional Chinese. PR [#10889](https://github.com/tiangolo/fastapi/pull/10889) by [@cherinyy](https://github.com/cherinyy).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/static-files.md`. PR [#2957](https://github.com/tiangolo/fastapi/pull/2957) by [@jeesang7](https://github.com/jeesang7).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/response-model.md`. PR [#2766](https://github.com/tiangolo/fastapi/pull/2766) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/body-multiple-params.md`. PR [#2461](https://github.com/tiangolo/fastapi/pull/2461) by [@PandaHun](https://github.com/PandaHun).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/query-params-str-validations.md`. PR [#2415](https://github.com/tiangolo/fastapi/pull/2415) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/python-types.md`. PR [#2267](https://github.com/tiangolo/fastapi/pull/2267) by [@jrim](https://github.com/jrim).
  * 🌐 Add Korean translation for `docs/ko/docs/tutorial/body-nested-models.md`. PR [#2506](https://github.com/tiangolo/fastapi/pull/2506) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Korean translation for `docs/ko/docs/learn/index.md`. PR [#10977](https://github.com/tiangolo/fastapi/pull/10977) by [@KaniKim](https://github.com/KaniKim).
  * 🌐 Initialize translations for Traditional Chinese. PR [#10505](https://github.com/tiangolo/fastapi/pull/10505) by [@hsuanchi](https://github.com/hsuanchi).
  * ✏️ Tweak the german translation of `docs/de/docs/tutorial/index.md`. PR [#10962](https://github.com/tiangolo/fastapi/pull/10962) by [@nilslindemann](https://github.com/nilslindemann).
  * ✏️ Fix typo error in `docs/ko/docs/tutorial/path-params.md`. PR [#10758](https://github.com/tiangolo/fastapi/pull/10758) by [@2chanhaeng](https://github.com/2chanhaeng).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md`. PR [#1961](https://github.com/tiangolo/fastapi/pull/1961) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md`. PR [#1960](https://github.com/tiangolo/fastapi/pull/1960) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/dependencies/sub-dependencies.md`. PR [#1959](https://github.com/tiangolo/fastapi/pull/1959) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/background-tasks.md`. PR [#2668](https://github.com/tiangolo/fastapi/pull/2668) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/dependencies/index.md` and `docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md`. PR [#1958](https://github.com/tiangolo/fastapi/pull/1958) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/response-model.md`. PR [#1938](https://github.com/tiangolo/fastapi/pull/1938) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/body-multiple-params.md`. PR [#1903](https://github.com/tiangolo/fastapi/pull/1903) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/path-params-numeric-validations.md`. PR [#1902](https://github.com/tiangolo/fastapi/pull/1902) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/python-types.md`. PR [#1899](https://github.com/tiangolo/fastapi/pull/1899) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/handling-errors.md`. PR [#1953](https://github.com/tiangolo/fastapi/pull/1953) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/response-status-code.md`. PR [#1942](https://github.com/tiangolo/fastapi/pull/1942) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/extra-models.md`. PR [#1941](https://github.com/tiangolo/fastapi/pull/1941) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese tranlsation for `docs/ja/docs/tutorial/schema-extra-example.md`. PR [#1931](https://github.com/tiangolo/fastapi/pull/1931) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/body-nested-models.md`. PR [#1930](https://github.com/tiangolo/fastapi/pull/1930) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for `docs/ja/docs/tutorial/body-fields.md`. PR [#1923](https://github.com/tiangolo/fastapi/pull/1923) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add German translation for `docs/de/docs/tutorial/index.md`. PR [#9502](https://github.com/tiangolo/fastapi/pull/9502) by [@fhabers21](https://github.com/fhabers21).
  * 🌐 Add German translation for `docs/de/docs/tutorial/background-tasks.md`. PR [#10566](https://github.com/tiangolo/fastapi/pull/10566) by [@nilslindemann](https://github.com/nilslindemann).
  * ✏️ Fix typo in `docs/ru/docs/index.md`. PR [#10672](https://github.com/tiangolo/fastapi/pull/10672) by [@Delitel-WEB](https://github.com/Delitel-WEB).
  * ✏️ Fix typos in `docs/zh/docs/tutorial/extra-data-types.md`. PR [#10727](https://github.com/tiangolo/fastapi/pull/10727) by [@HiemalBeryl](https://github.com/HiemalBeryl).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md`. PR [#10410](https://github.com/tiangolo/fastapi/pull/10410) by [@AlertRED](https://github.com/AlertRED).

### Internal¶

  * 👥 Update FastAPI People. PR [#11074](https://github.com/tiangolo/fastapi/pull/11074) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors: add Coherence. PR [#11066](https://github.com/tiangolo/fastapi/pull/11066) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Upgrade GitHub Action issue-manager. PR [#11056](https://github.com/tiangolo/fastapi/pull/11056) by [@tiangolo](https://github.com/tiangolo).
  * 🍱 Update sponsors: TalkPython badge. PR [#11052](https://github.com/tiangolo/fastapi/pull/11052) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors: TalkPython badge image. PR [#11048](https://github.com/tiangolo/fastapi/pull/11048) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, remove Deta. PR [#11041](https://github.com/tiangolo/fastapi/pull/11041) by [@tiangolo](https://github.com/tiangolo).
  * 💄 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR [#11039](https://github.com/tiangolo/fastapi/pull/11039) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add Italian to `mkdocs.yml`. PR [#11016](https://github.com/tiangolo/fastapi/pull/11016) by [@alejsdev](https://github.com/alejsdev).
  * 🔨 Verify `mkdocs.yml` languages in CI, update `docs.py`. PR [#11009](https://github.com/tiangolo/fastapi/pull/11009) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update config in `label-approved.yml` to accept translations with 1 reviewer. PR [#11007](https://github.com/tiangolo/fastapi/pull/11007) by [@alejsdev](https://github.com/alejsdev).
  * 👷 Add changes-requested handling in GitHub Action issue manager. PR [#10971](https://github.com/tiangolo/fastapi/pull/10971) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Group dependencies on dependabot updates. PR [#10952](https://github.com/tiangolo/fastapi/pull/10952) by [@Kludex](https://github.com/Kludex).
  * ⬆ Bump actions/setup-python from 4 to 5. PR [#10764](https://github.com/tiangolo/fastapi/pull/10764) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR [#10731](https://github.com/tiangolo/fastapi/pull/10731) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR [#10777](https://github.com/tiangolo/fastapi/pull/10777) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 🔧 Add support for translations to languages with a longer code name, like `zh-hant`. PR [#10950](https://github.com/tiangolo/fastapi/pull/10950) by [@tiangolo](https://github.com/tiangolo).

## 0.109.0¶

### Features¶

  * ✨ Add support for Python 3.12. PR [#10666](https://github.com/tiangolo/fastapi/pull/10666) by [@Jamim](https://github.com/Jamim).

### Upgrades¶

  * ⬆️ Upgrade Starlette to >=0.35.0,=0.29.0,=3.7.1,> dep: Start request
        Note over dep: Run code up to yield
        opt raise
            dep -->> handler: Raise HTTPException
            handler -->> client: HTTP error response
            dep -->> dep: Raise other exception
        end
        dep ->> operation: Run dependency, e.g. DB session
        opt raise
            operation -->> dep: Raise HTTPException
            dep -->> handler: Auto forward exception
            handler -->> client: HTTP error response
            operation -->> dep: Raise other exception
            dep -->> handler: Auto forward exception
        end
        operation ->> client: Return response to client
        Note over client,operation: Response is already sent, can't change it anymore
        opt Tasks
            operation -->> tasks: Send background tasks
        end
        opt Raise other exception
            tasks -->> dep: Raise other exception
        end
        Note over dep: After yield
        opt Handle other exception
            dep -->> dep: Handle exception, can't change response. E.g. close DB session.
        end

The new execution flow can be found in the docs: [Execution of dependencies with `yield`](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#execution-of-dependencies-with-yield).

### Features¶

  * ✨ Add support for raising exceptions (including `HTTPException`) in dependencies with `yield` in the exit code, do not support them in background tasks. PR [#10831](https://github.com/tiangolo/fastapi/pull/10831) by [@tiangolo](https://github.com/tiangolo).

### Internal¶

  * 👥 Update FastAPI People. PR [#10567](https://github.com/tiangolo/fastapi/pull/10567) by [@tiangolo](https://github.com/tiangolo).

## 0.105.0¶

### Features¶

  * ✨ Add support for multiple Annotated annotations, e.g. `Annotated[str, Field(), Query()]`. PR [#10773](https://github.com/tiangolo/fastapi/pull/10773) by [@tiangolo](https://github.com/tiangolo).

### Refactors¶

  * 🔥 Remove unused NoneType. PR [#10774](https://github.com/tiangolo/fastapi/pull/10774) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * 📝 Tweak default suggested configs for generating clients. PR [#10736](https://github.com/tiangolo/fastapi/pull/10736) by [@tiangolo](https://github.com/tiangolo).

### Internal¶

  * 🔧 Update sponsors, add Scalar. PR [#10728](https://github.com/tiangolo/fastapi/pull/10728) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add PropelAuth. PR [#10760](https://github.com/tiangolo/fastapi/pull/10760) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update build docs, verify README on CI. PR [#10750](https://github.com/tiangolo/fastapi/pull/10750) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, remove Fern. PR [#10729](https://github.com/tiangolo/fastapi/pull/10729) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add Codacy. PR [#10677](https://github.com/tiangolo/fastapi/pull/10677) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add Reflex. PR [#10676](https://github.com/tiangolo/fastapi/pull/10676) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update release notes, move and check latest-changes. PR [#10588](https://github.com/tiangolo/fastapi/pull/10588) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Upgrade latest-changes GitHub Action. PR [#10587](https://github.com/tiangolo/fastapi/pull/10587) by [@tiangolo](https://github.com/tiangolo).

## 0.104.1¶

### Fixes¶

  * 📌 Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR [#10529](https://github.com/tiangolo/fastapi/pull/10529) by [@alejandraklachquin](https://github.com/alejandraklachquin).
    * This is not really a bug in FastAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the [Swagger UI side](https://github.com/swagger-api/swagger-ui/issues/9337).

### Docs¶

  * 📝 Update data structure and render for external-links. PR [#10495](https://github.com/tiangolo/fastapi/pull/10495) by [@tiangolo](https://github.com/tiangolo).
  * ✏️ Fix link to SPDX license identifier in `docs/en/docs/tutorial/metadata.md`. PR [#10433](https://github.com/tiangolo/fastapi/pull/10433) by [@worldworm](https://github.com/worldworm).
  * 📝 Update example validation error from Pydantic v1 to match Pydantic v2 in `docs/en/docs/tutorial/path-params.md`. PR [#10043](https://github.com/tiangolo/fastapi/pull/10043) by [@giuliowaitforitdavide](https://github.com/giuliowaitforitdavide).
  * ✏️ Fix typos in emoji docs and in some source examples. PR [#10438](https://github.com/tiangolo/fastapi/pull/10438) by [@afuetterer](https://github.com/afuetterer).
  * ✏️ Fix typo in `docs/en/docs/reference/dependencies.md`. PR [#10465](https://github.com/tiangolo/fastapi/pull/10465) by [@suravshresth](https://github.com/suravshresth).
  * ✏️ Fix typos and rewordings in `docs/en/docs/tutorial/body-nested-models.md`. PR [#10468](https://github.com/tiangolo/fastapi/pull/10468) by [@yogabonito](https://github.com/yogabonito).
  * 📝 Update docs, remove references to removed `pydantic.Required` in `docs/en/docs/tutorial/query-params-str-validations.md`. PR [#10469](https://github.com/tiangolo/fastapi/pull/10469) by [@yogabonito](https://github.com/yogabonito).
  * ✏️ Fix typo in `docs/en/docs/reference/index.md`. PR [#10467](https://github.com/tiangolo/fastapi/pull/10467) by [@tarsil](https://github.com/tarsil).
  * 🔥 Remove unnecessary duplicated docstrings. PR [#10484](https://github.com/tiangolo/fastapi/pull/10484) by [@tiangolo](https://github.com/tiangolo).

### Internal¶

  * ✏️ Update Pydantic links to dotenv support. PR [#10511](https://github.com/tiangolo/fastapi/pull/10511) by [@White-Mask](https://github.com/White-Mask).
  * ✏️ Update links in `docs/en/docs/async.md` and `docs/zh/docs/async.md` to make them relative. PR [#10498](https://github.com/tiangolo/fastapi/pull/10498) by [@hasnatsajid](https://github.com/hasnatsajid).
  * ✏️ Fix links in `docs/em/docs/async.md`. PR [#10507](https://github.com/tiangolo/fastapi/pull/10507) by [@hasnatsajid](https://github.com/hasnatsajid).
  * ✏️ Fix typo in `docs/em/docs/index.md`, Python 3.8. PR [#10521](https://github.com/tiangolo/fastapi/pull/10521) by [@kerriop](https://github.com/kerriop).
  * ⬆ Bump pillow from 9.5.0 to 10.1.0. PR [#10446](https://github.com/tiangolo/fastapi/pull/10446) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Update mkdocs-material requirement from =8.1.4 to >=8.1.4,=0.23.0 to >=0.23.0, `Annotated` in `docs/en/docs/tutorial/query-params-str-validations.md`. PR [#9625](https://github.com/tiangolo/fastapi/pull/9625) by [@mccricardo](https://github.com/mccricardo).
  * 📝 Use in memory database for testing SQL in docs. PR [#1223](https://github.com/tiangolo/fastapi/pull/1223) by [@HarshaLaxman](https://github.com/HarshaLaxman).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/metadata.md`. PR [#9681](https://github.com/tiangolo/fastapi/pull/9681) by [@TabarakoAkula](https://github.com/TabarakoAkula).
  * 🌐 Fix typo in Spanish translation for `docs/es/docs/tutorial/first-steps.md`. PR [#9571](https://github.com/tiangolo/fastapi/pull/9571) by [@lilidl-nft](https://github.com/lilidl-nft).
  * 🌐 Add Russian translation for `docs/tutorial/path-operation-configuration.md`. PR [#9696](https://github.com/tiangolo/fastapi/pull/9696) by [@TabarakoAkula](https://github.com/TabarakoAkula).
  * 🌐 Add Chinese translation for `docs/zh/docs/advanced/security/index.md`. PR [#9666](https://github.com/tiangolo/fastapi/pull/9666) by [@lordqyxz](https://github.com/lordqyxz).
  * 🌐 Add Chinese translations for `docs/zh/docs/advanced/settings.md`. PR [#9652](https://github.com/tiangolo/fastapi/pull/9652) by [@ChoyeonChern](https://github.com/ChoyeonChern).
  * 🌐 Add Chinese translations for `docs/zh/docs/advanced/websockets.md`. PR [#9651](https://github.com/tiangolo/fastapi/pull/9651) by [@ChoyeonChern](https://github.com/ChoyeonChern).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/testing.md`. PR [#9641](https://github.com/tiangolo/fastapi/pull/9641) by [@wdh99](https://github.com/wdh99).
  * 🌐 Add Russian translation for `docs/tutorial/extra-models.md`. PR [#9619](https://github.com/tiangolo/fastapi/pull/9619) by [@ivan-abc](https://github.com/ivan-abc).
  * 🌐 Add Russian translation for `docs/tutorial/cors.md`. PR [#9608](https://github.com/tiangolo/fastapi/pull/9608) by [@ivan-abc](https://github.com/ivan-abc).
  * 🌐 Add Polish translation for `docs/pl/docs/features.md`. PR [#5348](https://github.com/tiangolo/fastapi/pull/5348) by [@mbroton](https://github.com/mbroton).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/body-nested-models.md`. PR [#9605](https://github.com/tiangolo/fastapi/pull/9605) by [@Alexandrhub](https://github.com/Alexandrhub).

### Internal¶

  * ⬆ Bump ruff from 0.0.272 to 0.0.275. PR [#9721](https://github.com/tiangolo/fastapi/pull/9721) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Update uvicorn[standard] requirement from =0.12.0 to >=0.12.0,=2.17.0 to >=2.17.0,=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR [#9567](https://github.com/tiangolo/fastapi/pull/9567) by [@Kludex](https://github.com/Kludex).

### Refactors¶

  * ♻ Remove `media_type` from `ORJSONResponse` as it's inherited from the parent class. PR [#5805](https://github.com/tiangolo/fastapi/pull/5805) by [@Kludex](https://github.com/Kludex).
  * ♻ Instantiate `HTTPException` only when needed, optimization refactor. PR [#5356](https://github.com/tiangolo/fastapi/pull/5356) by [@pawamoy](https://github.com/pawamoy).

### Docs¶

  * 🔥 Remove link to Pydantic's benchmark, as it was removed there. PR [#5811](https://github.com/tiangolo/fastapi/pull/5811) by [@Kludex](https://github.com/Kludex).

### Translations¶

  * 🌐 Fix spelling in Indonesian translation of `docs/id/docs/tutorial/index.md`. PR [#5635](https://github.com/tiangolo/fastapi/pull/5635) by [@purwowd](https://github.com/purwowd).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/index.md`. PR [#5896](https://github.com/tiangolo/fastapi/pull/5896) by [@Wilidon](https://github.com/Wilidon).
  * 🌐 Add Chinese translations for `docs/zh/docs/advanced/response-change-status-code.md` and `docs/zh/docs/advanced/response-headers.md`. PR [#9544](https://github.com/tiangolo/fastapi/pull/9544) by [@ChoyeonChern](https://github.com/ChoyeonChern).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/schema-extra-example.md`. PR [#9621](https://github.com/tiangolo/fastapi/pull/9621) by [@Alexandrhub](https://github.com/Alexandrhub).

### Internal¶

  * 🔧 Add sponsor Platform.sh. PR [#9650](https://github.com/tiangolo/fastapi/pull/9650) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR [#9646](https://github.com/tiangolo/fastapi/pull/9646) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Add custom tokens for GitHub Actions to avoid rate limits. PR [#9647](https://github.com/tiangolo/fastapi/pull/9647) by [@tiangolo](https://github.com/tiangolo).

## 0.96.0¶

### Features¶

  * ⚡ Update `create_cloned_field` to use a global cache and improve startup performance. PR [#4645](https://github.com/tiangolo/fastapi/pull/4645) by [@madkinsz](https://github.com/madkinsz) and previous original PR by [@huonw](https://github.com/huonw).

### Docs¶

  * 📝 Update Deta deployment tutorial for compatibility with Deta Space. PR [#6004](https://github.com/tiangolo/fastapi/pull/6004) by [@mikBighne98](https://github.com/mikBighne98).
  * ✏️ Fix typo in Deta deployment tutorial. PR [#9501](https://github.com/tiangolo/fastapi/pull/9501) by [@lemonyte](https://github.com/lemonyte).

### Translations¶

  * 🌐 Add Russian translation for `docs/tutorial/body.md`. PR [#3885](https://github.com/tiangolo/fastapi/pull/3885) by [@solomein-sv](https://github.com/solomein-sv).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/static-files.md`. PR [#9580](https://github.com/tiangolo/fastapi/pull/9580) by [@Alexandrhub](https://github.com/Alexandrhub).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/query-params.md`. PR [#9584](https://github.com/tiangolo/fastapi/pull/9584) by [@Alexandrhub](https://github.com/Alexandrhub).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/first-steps.md`. PR [#9471](https://github.com/tiangolo/fastapi/pull/9471) by [@AGolicyn](https://github.com/AGolicyn).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/debugging.md`. PR [#9579](https://github.com/tiangolo/fastapi/pull/9579) by [@Alexandrhub](https://github.com/Alexandrhub).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/path-params.md`. PR [#9519](https://github.com/tiangolo/fastapi/pull/9519) by [@AGolicyn](https://github.com/AGolicyn).
  * 🌐 Add Chinese translation for `docs/zh/docs/tutorial/static-files.md`. PR [#9436](https://github.com/tiangolo/fastapi/pull/9436) by [@wdh99](https://github.com/wdh99).
  * 🌐 Update Spanish translation including new illustrations in `docs/es/docs/async.md`. PR [#9483](https://github.com/tiangolo/fastapi/pull/9483) by [@andresbermeoq](https://github.com/andresbermeoq).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/path-params-numeric-validations.md`. PR [#9563](https://github.com/tiangolo/fastapi/pull/9563) by [@ivan-abc](https://github.com/ivan-abc).
  * 🌐 Add Russian translation for `docs/ru/docs/deployment/concepts.md`. PR [#9577](https://github.com/tiangolo/fastapi/pull/9577) by [@Xewus](https://github.com/Xewus).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/body-multiple-params.md`. PR [#9586](https://github.com/tiangolo/fastapi/pull/9586) by [@Alexandrhub](https://github.com/Alexandrhub).

### Internal¶

  * 👥 Update FastAPI People. PR [#9602](https://github.com/tiangolo/fastapi/pull/9602) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 🔧 Update sponsors, remove InvestSuite. PR [#9612](https://github.com/tiangolo/fastapi/pull/9612) by [@tiangolo](https://github.com/tiangolo).

## 0.95.2¶

  * ⬆️ Upgrade Starlette version to `>=0.27.0` for a security release. PR [#9541](https://github.com/tiangolo/fastapi/pull/9541) by [@tiangolo](https://github.com/tiangolo). Details on [Starlette's security advisory](https://github.com/encode/starlette/security/advisories/GHSA-v5gw-mw7f-84px).

### Translations¶

  * 🌐 Add Portuguese translation for `docs/pt/docs/advanced/events.md`. PR [#9326](https://github.com/tiangolo/fastapi/pull/9326) by [@oandersonmagalhaes](https://github.com/oandersonmagalhaes).
  * 🌐 Add Russian translation for `docs/ru/docs/deployment/manually.md`. PR [#9417](https://github.com/tiangolo/fastapi/pull/9417) by [@Xewus](https://github.com/Xewus).
  * 🌐 Add setup for translations to Lao. PR [#9396](https://github.com/tiangolo/fastapi/pull/9396) by [@TheBrown](https://github.com/TheBrown).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/testing.md`. PR [#9403](https://github.com/tiangolo/fastapi/pull/9403) by [@Xewus](https://github.com/Xewus).
  * 🌐 Add Russian translation for `docs/ru/docs/deployment/https.md`. PR [#9428](https://github.com/tiangolo/fastapi/pull/9428) by [@Xewus](https://github.com/Xewus).
  * ✏ Fix command to install requirements in Windows. PR [#9445](https://github.com/tiangolo/fastapi/pull/9445) by [@MariiaRomanuik](https://github.com/MariiaRomanuik).
  * 🌐 Add French translation for `docs/fr/docs/advanced/response-directly.md`. PR [#9415](https://github.com/tiangolo/fastapi/pull/9415) by [@axel584](https://github.com/axel584).
  * 🌐 Initiate Czech translation setup. PR [#9288](https://github.com/tiangolo/fastapi/pull/9288) by [@3p1463k](https://github.com/3p1463k).
  * ✏ Fix typo in Portuguese docs for `docs/pt/docs/index.md`. PR [#9337](https://github.com/tiangolo/fastapi/pull/9337) by [@lucasbalieiro](https://github.com/lucasbalieiro).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/response-status-code.md`. PR [#9370](https://github.com/tiangolo/fastapi/pull/9370) by [@nadia3373](https://github.com/nadia3373).

### Internal¶

  * 🐛 Fix `flask.escape` warning for internal tests. PR [#9468](https://github.com/tiangolo/fastapi/pull/9468) by [@samuelcolvin](https://github.com/samuelcolvin).
  * ✅ Refactor 2 tests, for consistency and simplification. PR [#9504](https://github.com/tiangolo/fastapi/pull/9504) by [@tiangolo](https://github.com/tiangolo).
  * ✅ Refactor OpenAPI tests, prepare for Pydantic v2. PR [#9503](https://github.com/tiangolo/fastapi/pull/9503) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR [#9394](https://github.com/tiangolo/fastapi/pull/9394) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * 💚 Disable setup-python pip cache in CI. PR [#9438](https://github.com/tiangolo/fastapi/pull/9438) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR [#9346](https://github.com/tiangolo/fastapi/pull/9346) by [@dependabot[bot]](https://github.com/apps/dependabot).

## 0.95.1¶

### Fixes¶

  * 🐛 Fix using `Annotated` in routers or path operations decorated multiple times. PR [#9315](https://github.com/tiangolo/fastapi/pull/9315) by [@sharonyogev](https://github.com/sharonyogev).

### Docs¶

  * 🌐 🔠 📄 🐢 Translate docs to Emoji 🥳 🎉 💥 🤯 🤯. PR [#5385](https://github.com/tiangolo/fastapi/pull/5385) by [@LeeeeT](https://github.com/LeeeeT).
  * 📝 Add notification message warning about old versions of FastAPI not supporting `Annotated`. PR [#9298](https://github.com/tiangolo/fastapi/pull/9298) by [@grdworkin](https://github.com/grdworkin).
  * 📝 Fix typo in `docs/en/docs/advanced/behind-a-proxy.md`. PR [#5681](https://github.com/tiangolo/fastapi/pull/5681) by [@Leommjr](https://github.com/Leommjr).
  * ✏ Fix wrong import from typing module in Persian translations for `docs/fa/docs/index.md`. PR [#6083](https://github.com/tiangolo/fastapi/pull/6083) by [@Kimiaattaei](https://github.com/Kimiaattaei).
  * ✏️ Fix format, remove unnecessary asterisks in `docs/en/docs/help-fastapi.md`. PR [#9249](https://github.com/tiangolo/fastapi/pull/9249) by [@armgabrielyan](https://github.com/armgabrielyan).
  * ✏ Fix typo in `docs/en/docs/tutorial/query-params-str-validations.md`. PR [#9272](https://github.com/tiangolo/fastapi/pull/9272) by [@nicornk](https://github.com/nicornk).
  * ✏ Fix typo/bug in inline code example in `docs/en/docs/tutorial/query-params-str-validations.md`. PR [#9273](https://github.com/tiangolo/fastapi/pull/9273) by [@tim-habitat](https://github.com/tim-habitat).
  * ✏ Fix typo in `docs/en/docs/tutorial/path-params-numeric-validations.md`. PR [#9282](https://github.com/tiangolo/fastapi/pull/9282) by [@aadarsh977](https://github.com/aadarsh977).
  * ✏ Fix typo: 'wll' to 'will' in `docs/en/docs/tutorial/query-params-str-validations.md`. PR [#9380](https://github.com/tiangolo/fastapi/pull/9380) by [@dasstyxx](https://github.com/dasstyxx).

### Translations¶

  * 🌐 Add French translation for `docs/fr/docs/advanced/index.md`. PR [#5673](https://github.com/tiangolo/fastapi/pull/5673) by [@axel584](https://github.com/axel584).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/body-nested-models.md`. PR [#4053](https://github.com/tiangolo/fastapi/pull/4053) by [@luccasmmg](https://github.com/luccasmmg).
  * 🌐 Add Russian translation for `docs/ru/docs/alternatives.md`. PR [#5994](https://github.com/tiangolo/fastapi/pull/5994) by [@Xewus](https://github.com/Xewus).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/extra-models.md`. PR [#5912](https://github.com/tiangolo/fastapi/pull/5912) by [@LorhanSohaky](https://github.com/LorhanSohaky).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/path-operation-configuration.md`. PR [#5936](https://github.com/tiangolo/fastapi/pull/5936) by [@LorhanSohaky](https://github.com/LorhanSohaky).
  * 🌐 Add Russian translation for `docs/ru/docs/contributing.md`. PR [#6002](https://github.com/tiangolo/fastapi/pull/6002) by [@stigsanek](https://github.com/stigsanek).
  * 🌐 Add Korean translation for `docs/tutorial/dependencies/classes-as-dependencies.md`. PR [#9176](https://github.com/tiangolo/fastapi/pull/9176) by [@sehwan505](https://github.com/sehwan505).
  * 🌐 Add Russian translation for `docs/ru/docs/project-generation.md`. PR [#9243](https://github.com/tiangolo/fastapi/pull/9243) by [@Xewus](https://github.com/Xewus).
  * 🌐 Add French translation for `docs/fr/docs/index.md`. PR [#9265](https://github.com/tiangolo/fastapi/pull/9265) by [@frabc](https://github.com/frabc).
  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/query-params-str-validations.md`. PR [#9267](https://github.com/tiangolo/fastapi/pull/9267) by [@dedkot01](https://github.com/dedkot01).
  * 🌐 Add Russian translation for `docs/ru/docs/benchmarks.md`. PR [#9271](https://github.com/tiangolo/fastapi/pull/9271) by [@Xewus](https://github.com/Xewus).

### Internal¶

  * 🔧 Update sponsors: remove Jina. PR [#9388](https://github.com/tiangolo/fastapi/pull/9388) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors, add databento, remove Ines's course and StriveWorks. PR [#9351](https://github.com/tiangolo/fastapi/pull/9351) by [@tiangolo](https://github.com/tiangolo).

## 0.95.0¶

### Highlights¶

This release adds support for dependencies and parameters using `Annotated` and recommends its usage. ✨

This has **several benefits** , one of the main ones is that now the parameters of your functions with `Annotated` would **not be affected** at all.

If you call those functions in **other places in your code** , the actual **default values** will be kept, your editor will help you notice missing **required arguments** , Python will require you to pass required arguments at **runtime** , you will be able to **use the same functions** for different things and with different libraries (e.g. **Typer** will soon support `Annotated` too, then you could use the same function for an API and a CLI), etc.

Because `Annotated` is **standard Python** , you still get all the **benefits** from editors and tools, like **autocompletion** , **inline errors** , etc.

One of the **biggest benefits** is that now you can create `Annotated` dependencies that are then shared by multiple _path operation functions_ , this will allow you to **reduce** a lot of **code duplication** in your codebase, while keeping all the support from editors and tools.

For example, you could have code like this:

    def get_current_user(token: str):
        # authenticate user
        return User()

    @app.get("/items/")
    def read_items(user: User = Depends(get_current_user)):
        ...

    @app.post("/items/")
    def create_item(*, user: User = Depends(get_current_user), item: Item):
        ...

    @app.get("/items/{item_id}")
    def read_item(*, user: User = Depends(get_current_user), item_id: int):
        ...

    @app.delete("/items/{item_id}")
    def delete_item(*, user: User = Depends(get_current_user), item_id: int):
        ...

There's a bit of code duplication for the dependency:

    user: User = Depends(get_current_user)

...the bigger the codebase, the more noticeable it is.

Now you can create an annotated dependency once, like this:

    CurrentUser = Annotated[User, Depends(get_current_user)]

And then you can reuse this `Annotated` dependency:

    CurrentUser = Annotated[User, Depends(get_current_user)]

    @app.get("/items/")
    def read_items(user: CurrentUser):
        ...

    @app.post("/items/")
    def create_item(user: CurrentUser, item: Item):
        ...

    @app.get("/items/{item_id}")
    def read_item(user: CurrentUser, item_id: int):
        ...

    @app.delete("/items/{item_id}")
    def delete_item(user: CurrentUser, item_id: int):
        ...

...and `CurrentUser` has all the typing information as `User`, so your editor will work as expected (autocompletion and everything), and **FastAPI** will be able to understand the dependency defined in `Annotated`. 😎

Roughly **all the docs** have been rewritten to use `Annotated` as the main way to declare **parameters** and **dependencies**. All the **examples** in the docs now include a version with `Annotated` and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. 🚀

The key updated docs are:

  * Python Types Intro:
    * [Type Hints with Metadata Annotations](https://fastapi.tiangolo.com/python-types/#type-hints-with-metadata-annotations).
  * Tutorial:
    * [Query Parameters and String Validations - Additional validation](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#additional-validation)
      * [Advantages of `Annotated`](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#advantages-of-annotated)
    * [Path Parameters and Numeric Validations - Order the parameters as you need, tricks](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#order-the-parameters-as-you-need-tricks)
      * [Better with `Annotated`](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#better-with-annotated)
    * [Dependencies - First Steps - Share `Annotated` dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/#share-annotated-dependencies)

Special thanks to [@nzig](https://github.com/nzig) for the core implementation and to [@adriangb](https://github.com/adriangb) for the inspiration and idea with [Xpresso](https://github.com/adriangb/xpresso)! 🚀

### Features¶

  * ✨Add support for PEP-593 `Annotated` for specifying dependencies and parameters. PR [#4871](https://github.com/tiangolo/fastapi/pull/4871) by [@nzig](https://github.com/nzig).

### Docs¶

  * 📝 Tweak tip recommending `Annotated` in docs. PR [#9270](https://github.com/tiangolo/fastapi/pull/9270) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update order of examples, latest Python version first, and simplify version tab names. PR [#9269](https://github.com/tiangolo/fastapi/pull/9269) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update all docs to use `Annotated` as the main recommendation, with new examples and tests. PR [#9268](https://github.com/tiangolo/fastapi/pull/9268) by [@tiangolo](https://github.com/tiangolo).

## 0.94.1¶

### Fixes¶

  * 🎨 Fix types for lifespan, upgrade Starlette to 0.26.1. PR [#9245](https://github.com/tiangolo/fastapi/pull/9245) by [@tiangolo](https://github.com/tiangolo).

## 0.94.0¶

### Upgrades¶

  * ⬆ Upgrade python-multipart to support 0.0.6. PR [#9212](https://github.com/tiangolo/fastapi/pull/9212) by [@musicinmybrain](https://github.com/musicinmybrain).
  * ⬆️ Upgrade Starlette version, support new `lifespan` with state. PR [#9239](https://github.com/tiangolo/fastapi/pull/9239) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * 📝 Update Sentry link in docs. PR [#9218](https://github.com/tiangolo/fastapi/pull/9218) by [@smeubank](https://github.com/smeubank).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/history-design-future.md`. PR [#5986](https://github.com/tiangolo/fastapi/pull/5986) by [@Xewus](https://github.com/Xewus).

### Internal¶

  * ➕ Add `pydantic` to PyPI classifiers. PR [#5914](https://github.com/tiangolo/fastapi/pull/5914) by [@yezz123](https://github.com/yezz123).
  * ⬆ Bump black from 22.10.0 to 23.1.0. PR [#5953](https://github.com/tiangolo/fastapi/pull/5953) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR [#6027](https://github.com/tiangolo/fastapi/pull/6027) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR [#6034](https://github.com/tiangolo/fastapi/pull/6034) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ [pre-commit.ci] pre-commit autoupdate. PR [#5709](https://github.com/tiangolo/fastapi/pull/5709) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).

## 0.93.0¶

### Features¶

  * ✨ Add support for `lifespan` async context managers (superseding `startup` and `shutdown` events). Initial PR [#2944](https://github.com/tiangolo/fastapi/pull/2944) by [@uSpike](https://github.com/uSpike).

Now, instead of using independent `startup` and `shutdown` events, you can define that logic in a single function with `yield` decorated with `@asynccontextmanager` (an async context manager).

For example:

    from contextlib import asynccontextmanager

    from fastapi import FastAPI

    def fake_answer_to_everything_ml_model(x: float):
        return x * 42

    ml_models = {}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # Load the ML model
        ml_models["answer_to_everything"] = fake_answer_to_everything_ml_model
        yield
        # Clean up the ML models and release the resources
        ml_models.clear()

    app = FastAPI(lifespan=lifespan)

    @app.get("/predict")
    async def predict(x: float):
        result = ml_models["answer_to_everything"](x)
        return {"result": result}

**Note** : This is the recommended way going forward, instead of using `startup` and `shutdown` events.

### Docs¶

  * ✏ Fix formatting in `docs/en/docs/tutorial/metadata.md` for `ReDoc`. PR [#6005](https://github.com/tiangolo/fastapi/pull/6005) by [@eykamp](https://github.com/eykamp).

### Translations¶

  * 🌐 Tamil translations - initial setup. PR [#5564](https://github.com/tiangolo/fastapi/pull/5564) by [@gusty1g](https://github.com/gusty1g).
  * 🌐 Add French translation for `docs/fr/docs/advanced/path-operation-advanced-configuration.md`. PR [#9221](https://github.com/tiangolo/fastapi/pull/9221) by [@axel584](https://github.com/axel584).
  * 🌐 Add French translation for `docs/tutorial/debugging.md`. PR [#9175](https://github.com/tiangolo/fastapi/pull/9175) by [@frabc](https://github.com/frabc).
  * 🌐 Initiate Armenian translation setup. PR [#5844](https://github.com/tiangolo/fastapi/pull/5844) by [@har8](https://github.com/har8).
  * 🌐 Add French translation for `deployment/manually.md`. PR [#3693](https://github.com/tiangolo/fastapi/pull/3693) by [@rjNemo](https://github.com/rjNemo).

### Internal¶

  * 👷 Update translation bot messages. PR [#9206](https://github.com/tiangolo/fastapi/pull/9206) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update translations bot to use Discussions, and notify when a PR is done. PR [#9183](https://github.com/tiangolo/fastapi/pull/9183) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors-badges. PR [#9182](https://github.com/tiangolo/fastapi/pull/9182) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#9181](https://github.com/tiangolo/fastapi/pull/9181) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 🔊 Log GraphQL errors in FastAPI People, because it returns 200, with a payload with an error. PR [#9171](https://github.com/tiangolo/fastapi/pull/9171) by [@tiangolo](https://github.com/tiangolo).
  * 💚 Fix/workaround GitHub Actions in Docker with git for FastAPI People. PR [#9169](https://github.com/tiangolo/fastapi/pull/9169) by [@tiangolo](https://github.com/tiangolo).
  * ♻️ Refactor FastAPI Experts to use only discussions now that questions are migrated. PR [#9165](https://github.com/tiangolo/fastapi/pull/9165) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade analytics. PR [#6025](https://github.com/tiangolo/fastapi/pull/6025) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade and re-enable installing Typer-CLI. PR [#6008](https://github.com/tiangolo/fastapi/pull/6008) by [@tiangolo](https://github.com/tiangolo).

## 0.92.0¶

🚨 This is a security fix. Please upgrade as soon as possible.

### Upgrades¶

  * ⬆️ Upgrade Starlette to 0.25.0. PR [#5996](https://github.com/tiangolo/fastapi/pull/5996) by [@tiangolo](https://github.com/tiangolo).
    * This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.
    * Only applications using forms (e.g. file uploads) could be affected.
    * For most cases, upgrading won't have any breaking changes.

## 0.91.0¶

### Upgrades¶

  * ⬆️ Upgrade Starlette version to `0.24.0` and refactor internals for compatibility. PR [#5985](https://github.com/tiangolo/fastapi/pull/5985) by [@tiangolo](https://github.com/tiangolo).
    * This can solve nuanced errors when using middlewares. Before Starlette `0.24.0`, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks [@adriangb](https://github.com/adriangb)! Starlette PR [#2017](https://github.com/encode/starlette/pull/2017)). Now the middleware class instances are created once, right before the first request (the first time the app is called).
    * If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.

## 0.90.1¶

### Upgrades¶

  * ⬆️ Upgrade Starlette range to allow 0.23.1. PR [#5980](https://github.com/tiangolo/fastapi/pull/5980) by [@tiangolo](https://github.com/tiangolo).

### Docs¶

  * ✏ Tweak wording to clarify `docs/en/docs/project-generation.md`. PR [#5930](https://github.com/tiangolo/fastapi/pull/5930) by [@chandra-deb](https://github.com/chandra-deb).
  * ✏ Update Pydantic GitHub URLs. PR [#5952](https://github.com/tiangolo/fastapi/pull/5952) by [@yezz123](https://github.com/yezz123).
  * 📝 Add opinion from Cisco. PR [#5981](https://github.com/tiangolo/fastapi/pull/5981) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/cookie-params.md`. PR [#5890](https://github.com/tiangolo/fastapi/pull/5890) by [@bnzone](https://github.com/bnzone).

### Internal¶

  * ✏ Update `zip-docs.sh` internal script, remove extra space. PR [#5931](https://github.com/tiangolo/fastapi/pull/5931) by [@JuanPerdomo00](https://github.com/JuanPerdomo00).

## 0.90.0¶

### Upgrades¶

  * ⬆️ Bump Starlette from 0.22.0 to 0.23.0. Initial PR [#5739](https://github.com/tiangolo/fastapi/pull/5739) by [@Kludex](https://github.com/Kludex).

### Docs¶

  * 📝 Add article "Tortoise ORM / FastAPI 整合快速筆記" to External Links. PR [#5496](https://github.com/tiangolo/fastapi/pull/5496) by [@Leon0824](https://github.com/Leon0824).
  * 👥 Update FastAPI People. PR [#5954](https://github.com/tiangolo/fastapi/pull/5954) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 📝 Micro-tweak help docs. PR [#5960](https://github.com/tiangolo/fastapi/pull/5960) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update new issue chooser to direct to GitHub Discussions. PR [#5948](https://github.com/tiangolo/fastapi/pull/5948) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Recommend GitHub Discussions for questions. PR [#5944](https://github.com/tiangolo/fastapi/pull/5944) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/tutorial/body-fields.md`. PR [#5898](https://github.com/tiangolo/fastapi/pull/5898) by [@simatheone](https://github.com/simatheone).
  * 🌐 Add Russian translation for `docs/ru/docs/help-fastapi.md`. PR [#5970](https://github.com/tiangolo/fastapi/pull/5970) by [@tiangolo](https://github.com/tiangolo).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/static-files.md`. PR [#5858](https://github.com/tiangolo/fastapi/pull/5858) by [@batlopes](https://github.com/batlopes).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/encoder.md`. PR [#5525](https://github.com/tiangolo/fastapi/pull/5525) by [@felipebpl](https://github.com/felipebpl).
  * 🌐 Add Russian translation for `docs/ru/docs/contributing.md`. PR [#5870](https://github.com/tiangolo/fastapi/pull/5870) by [@Xewus](https://github.com/Xewus).

### Internal¶

  * ⬆️ Upgrade Ubuntu version for docs workflow. PR [#5971](https://github.com/tiangolo/fastapi/pull/5971) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update sponsors badges. PR [#5943](https://github.com/tiangolo/fastapi/pull/5943) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Compute FastAPI Experts including GitHub Discussions. PR [#5941](https://github.com/tiangolo/fastapi/pull/5941) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade isort and update pre-commit. PR [#5940](https://github.com/tiangolo/fastapi/pull/5940) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add template for questions in Discussions. PR [#5920](https://github.com/tiangolo/fastapi/pull/5920) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update Sponsor Budget Insight to Powens. PR [#5916](https://github.com/tiangolo/fastapi/pull/5916) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update GitHub Sponsors badge data. PR [#5915](https://github.com/tiangolo/fastapi/pull/5915) by [@tiangolo](https://github.com/tiangolo).

## 0.89.1¶

### Fixes¶

  * 🐛 Ignore Response classes on return annotation. PR [#5855](https://github.com/tiangolo/fastapi/pull/5855) by [@Kludex](https://github.com/Kludex). See the new docs in the PR below.

### Docs¶

  * 📝 Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR [#5873](https://github.com/tiangolo/fastapi/pull/5873) by [@tiangolo](https://github.com/tiangolo). New docs at [Response Model - Return Type: Other Return Type Annotations](https://fastapi.tiangolo.com/tutorial/response-model/#other-return-type-annotations).
  * 📝 Add External Link: FastAPI lambda container: serverless simplified. PR [#5784](https://github.com/tiangolo/fastapi/pull/5784) by [@rafrasenberg](https://github.com/rafrasenberg).

### Translations¶

  * 🌐 Add Turkish translation for `docs/tr/docs/tutorial/first_steps.md`. PR [#5691](https://github.com/tiangolo/fastapi/pull/5691) by [@Kadermiyanyedi](https://github.com/Kadermiyanyedi).

## 0.89.0¶

### Features¶

  * ✨ Add support for function return type annotations to declare the `response_model`. Initial PR [#1436](https://github.com/tiangolo/fastapi/pull/1436) by [@uriyyo](https://github.com/uriyyo).

Now you can declare the return type / `response_model` in the function return type annotation:

    from fastapi import FastAPI
    from pydantic import BaseModel

    app = FastAPI()

    class Item(BaseModel):
        name: str
        price: float

    @app.get("/items/")
    async def read_items() -> list[Item]:
        return [
            Item(name="Portal Gun", price=42.0),
            Item(name="Plumbus", price=32.0),
        ]

FastAPI will use the return type annotation to perform:

  * Data validation
  * Automatic documentation
    * It could power automatic client generators
  * **Data filtering**

Before this version it was only supported via the `response_model` parameter.

### Docs¶

  * 📝 Add External Link: Authorization on FastAPI with Casbin. PR [#5712](https://github.com/tiangolo/fastapi/pull/5712) by [@Xhy-5000](https://github.com/Xhy-5000).
  * ✏ Fix typo in `docs/en/docs/async.md`. PR [#5785](https://github.com/tiangolo/fastapi/pull/5785) by [@Kingdageek](https://github.com/Kingdageek).
  * ✏ Fix typo in `docs/en/docs/deployment/concepts.md`. PR [#5824](https://github.com/tiangolo/fastapi/pull/5824) by [@kelbyfaessler](https://github.com/kelbyfaessler).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/fastapi-people.md`. PR [#5577](https://github.com/tiangolo/fastapi/pull/5577) by [@Xewus](https://github.com/Xewus).
  * 🌐 Fix typo in Chinese translation for `docs/zh/docs/benchmarks.md`. PR [#4269](https://github.com/tiangolo/fastapi/pull/4269) by [@15027668g](https://github.com/15027668g).
  * 🌐 Add Korean translation for `docs/tutorial/cors.md`. PR [#3764](https://github.com/tiangolo/fastapi/pull/3764) by [@NinaHwang](https://github.com/NinaHwang).

### Internal¶

  * ⬆ Update coverage[toml] requirement from =6.5.0 to >=6.5.0,=0.12.0 to >=0.12.0,=1.3.18 to >=1.3.18,=0.6.1 to >=0.6.1,=2.12.0 to >=2.12.0,=0.12.0,=0.12.0,` warning when JS is disabled. PR [#5074](https://github.com/tiangolo/fastapi/pull/5074) by [@evroon](https://github.com/evroon).
  * ✨ Add support for `FrozenSet` in parameters (e.g. query). PR [#2938](https://github.com/tiangolo/fastapi/pull/2938) by [@juntatalor](https://github.com/juntatalor).
  * ✨ Allow custom middlewares to raise `HTTPException`s and propagate them. PR [#2036](https://github.com/tiangolo/fastapi/pull/2036) by [@ghandic](https://github.com/ghandic).
  * ✨ Preserve `json.JSONDecodeError` information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR [#4057](https://github.com/tiangolo/fastapi/pull/4057) by [@UKnowWhoIm](https://github.com/UKnowWhoIm).

### Fixes¶

  * 🐛 Fix `jsonable_encoder` for dataclasses with pydantic-compatible fields. PR [#3607](https://github.com/tiangolo/fastapi/pull/3607) by [@himbeles](https://github.com/himbeles).
  * 🐛 Fix support for extending `openapi_extras` with parameter lists. PR [#4267](https://github.com/tiangolo/fastapi/pull/4267) by [@orilevari](https://github.com/orilevari).

### Docs¶

  * ✏ Fix a simple typo in `docs/en/docs/python-types.md`. PR [#5193](https://github.com/tiangolo/fastapi/pull/5193) by [@GlitchingCore](https://github.com/GlitchingCore).
  * ✏ Fix typos in `tests/test_schema_extra_examples.py`. PR [#5126](https://github.com/tiangolo/fastapi/pull/5126) by [@supraaxdd](https://github.com/supraaxdd).
  * ✏ Fix typos in `docs/en/docs/tutorial/path-params-numeric-validations.md`. PR [#5142](https://github.com/tiangolo/fastapi/pull/5142) by [@invisibleroads](https://github.com/invisibleroads).
  * 📝 Add step about upgrading pip in the venv to avoid errors when installing dependencies `docs/en/docs/contributing.md`. PR [#5181](https://github.com/tiangolo/fastapi/pull/5181) by [@edisnake](https://github.com/edisnake).
  * ✏ Reword and clarify text in tutorial `docs/en/docs/tutorial/body-nested-models.md`. PR [#5169](https://github.com/tiangolo/fastapi/pull/5169) by [@papb](https://github.com/papb).
  * ✏ Fix minor typo in `docs/en/docs/features.md`. PR [#5206](https://github.com/tiangolo/fastapi/pull/5206) by [@OtherBarry](https://github.com/OtherBarry).
  * ✏ Fix minor typos in `docs/en/docs/async.md`. PR [#5125](https://github.com/tiangolo/fastapi/pull/5125) by [@Ksenofanex](https://github.com/Ksenofanex).
  * 📝 Add external link to docs: "Fastapi, Docker(Docker compose) and Postgres". PR [#5033](https://github.com/tiangolo/fastapi/pull/5033) by [@krishnardt](https://github.com/krishnardt).
  * 📝 Simplify example for docs for Additional Responses, remove unnecessary `else`. PR [#4693](https://github.com/tiangolo/fastapi/pull/4693) by [@adriangb](https://github.com/adriangb).
  * 📝 Update docs, compare enums with identity instead of equality. PR [#4905](https://github.com/tiangolo/fastapi/pull/4905) by [@MicaelJarniac](https://github.com/MicaelJarniac).
  * ✏ Fix typo in `docs/en/docs/python-types.md`. PR [#4886](https://github.com/tiangolo/fastapi/pull/4886) by [@MicaelJarniac](https://github.com/MicaelJarniac).
  * 🎨 Fix syntax highlighting in docs for OpenAPI Callbacks. PR [#4368](https://github.com/tiangolo/fastapi/pull/4368) by [@xncbf](https://github.com/xncbf).
  * ✏ Reword confusing sentence in docs file `typo-fix-path-params-numeric-validations.md`. PR [#3219](https://github.com/tiangolo/fastapi/pull/3219) by [@ccrenfroe](https://github.com/ccrenfroe).
  * 📝 Update docs for handling HTTP Basic Auth with `secrets.compare_digest()` to account for non-ASCII characters. PR [#3536](https://github.com/tiangolo/fastapi/pull/3536) by [@lewoudar](https://github.com/lewoudar).
  * 📝 Update docs for testing, fix examples with relative imports. PR [#5302](https://github.com/tiangolo/fastapi/pull/5302) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Add Russian translation for `docs/ru/docs/index.md`. PR [#5289](https://github.com/tiangolo/fastapi/pull/5289) by [@impocode](https://github.com/impocode).
  * 🌐 Add Russian translation for `docs/ru/docs/deployment/versions.md`. PR [#4985](https://github.com/tiangolo/fastapi/pull/4985) by [@emp7yhead](https://github.com/emp7yhead).
  * 🌐 Add Portuguese translation for `docs/pt/docs/tutorial/header-params.md`. PR [#4921](https://github.com/tiangolo/fastapi/pull/4921) by [@batlopes](https://github.com/batlopes).
  * 🌐 Update `ko/mkdocs.yml` for a missing link. PR [#5020](https://github.com/tiangolo/fastapi/pull/5020) by [@dalinaum](https://github.com/dalinaum).

### Internal¶

  * ⬆ Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR [#5258](https://github.com/tiangolo/fastapi/pull/5258) by [@dependabot[bot]](https://github.com/apps/dependabot).
  * ⬆ [pre-commit.ci] pre-commit autoupdate. PR [#5196](https://github.com/tiangolo/fastapi/pull/5196) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).
  * 🔥 Delete duplicated tests in `tests/test_tutorial/test_sql_databases/test_sql_databases.py`. PR [#5040](https://github.com/tiangolo/fastapi/pull/5040) by [@raccoonyy](https://github.com/raccoonyy).
  * ♻ Simplify internal RegEx in `fastapi/utils.py`. PR [#5057](https://github.com/tiangolo/fastapi/pull/5057) by [@pylounge](https://github.com/pylounge).
  * 🔧 Fix Type hint of `auto_error` which does not need to be `Optional[bool]`. PR [#4933](https://github.com/tiangolo/fastapi/pull/4933) by [@DavidKimDY](https://github.com/DavidKimDY).
  * 🔧 Update mypy config, use `strict = true` instead of manual configs. PR [#4605](https://github.com/tiangolo/fastapi/pull/4605) by [@michaeloliverx](https://github.com/michaeloliverx).
  * ♻ Change a `dict()` for `{}` in `fastapi/utils.py`. PR [#3138](https://github.com/tiangolo/fastapi/pull/3138) by [@ShahriyarR](https://github.com/ShahriyarR).
  * ♻ Move internal variable for errors in `jsonable_encoder` to put related code closer. PR [#4560](https://github.com/tiangolo/fastapi/pull/4560) by [@GuilleQP](https://github.com/GuilleQP).
  * ♻ Simplify conditional assignment in `fastapi/dependencies/utils.py`. PR [#4597](https://github.com/tiangolo/fastapi/pull/4597) by [@cikay](https://github.com/cikay).
  * ⬆ Upgrade version pin accepted for Flake8, for internal code, to `flake8 >=3.8.3,=2.11.2,=1.1.0,= 3.7. PR [#1880](https://github.com/tiangolo/fastapi/pull/1880) by [@FFY00](https://github.com/FFY00).
  * ⬆ Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR [#2733](https://github.com/tiangolo/fastapi/pull/2733) by [@hukkin](https://github.com/hukkin).
  * ⬆️ Bump Uvicorn max range to 0.15.0. PR [#3345](https://github.com/tiangolo/fastapi/pull/3345) by [@Kludex](https://github.com/Kludex).

### Docs¶

  * 📝 Update GraphQL docs, recommend Strawberry. PR [#3981](https://github.com/tiangolo/fastapi/pull/3981) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR [#3974](https://github.com/tiangolo/fastapi/pull/3974) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Upgrade HTTPS guide with more explanations and diagrams. PR [#3950](https://github.com/tiangolo/fastapi/pull/3950) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Add Turkish translation for `docs/features.md`. PR [#1950](https://github.com/tiangolo/fastapi/pull/1950) by [@ycd](https://github.com/ycd).
  * 🌐 Add Turkish translation for `docs/benchmarks.md`. PR [#2729](https://github.com/tiangolo/fastapi/pull/2729) by [@Telomeraz](https://github.com/Telomeraz).
  * 🌐 Add Turkish translation for `docs/index.md`. PR [#1908](https://github.com/tiangolo/fastapi/pull/1908) by [@ycd](https://github.com/ycd).
  * 🌐 Add French translation for `docs/tutorial/body.md`. PR [#3671](https://github.com/tiangolo/fastapi/pull/3671) by [@Smlep](https://github.com/Smlep).
  * 🌐 Add French translation for `deployment/docker.md`. PR [#3694](https://github.com/tiangolo/fastapi/pull/3694) by [@rjNemo](https://github.com/rjNemo).
  * 🌐 Add Portuguese translation for `docs/tutorial/path-params.md`. PR [#3664](https://github.com/tiangolo/fastapi/pull/3664) by [@FelipeSilva93](https://github.com/FelipeSilva93).
  * 🌐 Add Portuguese translation for `docs/deployment/https.md`. PR [#3754](https://github.com/tiangolo/fastapi/pull/3754) by [@lsglucas](https://github.com/lsglucas).
  * 🌐 Add German translation for `docs/features.md`. PR [#3699](https://github.com/tiangolo/fastapi/pull/3699) by [@mawassk](https://github.com/mawassk).

### Internal¶

  * ✨ Update GitHub Action: notify-translations, to avoid a race conditions. PR [#3989](https://github.com/tiangolo/fastapi/pull/3989) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade development `autoflake`, supporting multi-line imports. PR [#3988](https://github.com/tiangolo/fastapi/pull/3988) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR [#3987](https://github.com/tiangolo/fastapi/pull/3987) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#3986](https://github.com/tiangolo/fastapi/pull/3986) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 💚 Fix badges in README and main page. PR [#3979](https://github.com/tiangolo/fastapi/pull/3979) by [@ghandic](https://github.com/ghandic).
  * ⬆ Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR [#3350](https://github.com/tiangolo/fastapi/pull/3350) by [@ArcLightSlavik](https://github.com/ArcLightSlavik).
  * ✨ Add Deepset Sponsorship. PR [#3976](https://github.com/tiangolo/fastapi/pull/3976) by [@tiangolo](https://github.com/tiangolo).
  * 🎨 Tweak CSS styles for shell animations. PR [#3888](https://github.com/tiangolo/fastapi/pull/3888) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add new Sponsor Calmcode.io. PR [#3777](https://github.com/tiangolo/fastapi/pull/3777) by [@tiangolo](https://github.com/tiangolo).

## 0.68.1¶

  * ✨ Add support for `read_with_orm_mode`, to support [SQLModel](https://sqlmodel.tiangolo.com/) relationship attributes. PR [#3757](https://github.com/tiangolo/fastapi/pull/3757) by [@tiangolo](https://github.com/tiangolo).

### Translations¶

  * 🌐 Add Portuguese translation of `docs/fastapi-people.md`. PR [#3461](https://github.com/tiangolo/fastapi/pull/3461) by [@ComicShrimp](https://github.com/ComicShrimp).
  * 🌐 Add Chinese translation for `docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md`. PR [#3492](https://github.com/tiangolo/fastapi/pull/3492) by [@jaystone776](https://github.com/jaystone776).
  * 🔧 Add new Translation tracking issues for German and Indonesian. PR [#3718](https://github.com/tiangolo/fastapi/pull/3718) by [@tiangolo](https://github.com/tiangolo).
  * 🌐 Add Chinese translation for `docs/tutorial/dependencies/sub-dependencies.md`. PR [#3491](https://github.com/tiangolo/fastapi/pull/3491) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Portuguese translation for `docs/advanced/index.md`. PR [#3460](https://github.com/tiangolo/fastapi/pull/3460) by [@ComicShrimp](https://github.com/ComicShrimp).
  * 🌐 Portuguese translation of `docs/async.md`. PR [#1330](https://github.com/tiangolo/fastapi/pull/1330) by [@Serrones](https://github.com/Serrones).
  * 🌐 Add French translation for `docs/async.md`. PR [#3416](https://github.com/tiangolo/fastapi/pull/3416) by [@Smlep](https://github.com/Smlep).

### Internal¶

  * ✨ Add GitHub Action: Notify Translations. PR [#3715](https://github.com/tiangolo/fastapi/pull/3715) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Update computation of FastAPI People and sponsors. PR [#3714](https://github.com/tiangolo/fastapi/pull/3714) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Enable recent Material for MkDocs Insiders features. PR [#3710](https://github.com/tiangolo/fastapi/pull/3710) by [@tiangolo](https://github.com/tiangolo).
  * 🔥 Remove/clean extra imports from examples in docs for features. PR [#3709](https://github.com/tiangolo/fastapi/pull/3709) by [@tiangolo](https://github.com/tiangolo).
  * ➕ Update docs library to include sources in Markdown. PR [#3648](https://github.com/tiangolo/fastapi/pull/3648) by [@tiangolo](https://github.com/tiangolo).
  * ⬆ Enable tests for Python 3.9. PR [#2298](https://github.com/tiangolo/fastapi/pull/2298) by [@Kludex](https://github.com/Kludex).
  * 👥 Update FastAPI People. PR [#3642](https://github.com/tiangolo/fastapi/pull/3642) by [@github-actions[bot]](https://github.com/apps/github-actions).

## 0.68.0¶

### Features¶

  * ✨ Add support for extensions and updates to the OpenAPI schema in each _path operation_. New docs: [FastAPI Path Operation Advanced Configuration - OpenAPI Extra](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#openapi-extra). Initial PR [#1922](https://github.com/tiangolo/fastapi/pull/1922) by [@edouardlp](https://github.com/edouardlp).
  * ✨ Add additional OpenAPI metadata parameters to `FastAPI` class, shown on the automatic API docs UI. New docs: [Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/). Initial PR [#1812](https://github.com/tiangolo/fastapi/pull/1812) by [@dkreeft](https://github.com/dkreeft).
  * ✨ Add `description` parameter to all the security scheme classes, e.g. `APIKeyQuery(name="key", description="A very cool API key")`. PR [#1757](https://github.com/tiangolo/fastapi/pull/1757) by [@hylkepostma](https://github.com/hylkepostma).
  * ✨ Update OpenAPI models, supporting recursive models and extensions. PR [#3628](https://github.com/tiangolo/fastapi/pull/3628) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Import and re-export data structures from Starlette, used by Request properties, on `fastapi.datastructures`. Initial PR [#1872](https://github.com/tiangolo/fastapi/pull/1872) by [@jamescurtin](https://github.com/jamescurtin).

### Docs¶

  * 📝 Update docs about async and response-model with more gender neutral language. PR [#1869](https://github.com/tiangolo/fastapi/pull/1869) by [@Edward-Knight](https://github.com/Edward-Knight).

### Translations¶

  * 🌐 Add Russian translation for `docs/python-types.md`. PR [#3039](https://github.com/tiangolo/fastapi/pull/3039) by [@dukkee](https://github.com/dukkee).
  * 🌐 Add Chinese translation for `docs/tutorial/dependencies/index.md`. PR [#3489](https://github.com/tiangolo/fastapi/pull/3489) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Russian translation for `docs/external-links.md`. PR [#3036](https://github.com/tiangolo/fastapi/pull/3036) by [@dukkee](https://github.com/dukkee).
  * 🌐 Add Chinese translation for `docs/tutorial/dependencies/global-dependencies.md`. PR [#3493](https://github.com/tiangolo/fastapi/pull/3493) by [@jaystone776](https://github.com/jaystone776).
  * 🌐 Add Portuguese translation for `docs/deployment/versions.md`. PR [#3618](https://github.com/tiangolo/fastapi/pull/3618) by [@lsglucas](https://github.com/lsglucas).
  * 🌐 Add Japanese translation for `docs/tutorial/security/oauth2-jwt.md`. PR [#3526](https://github.com/tiangolo/fastapi/pull/3526) by [@sattosan](https://github.com/sattosan).

### Internal¶

  * ✅ Add the `docs_src` directory to test coverage and update tests. Initial PR [#1904](https://github.com/tiangolo/fastapi/pull/1904) by [@Kludex](https://github.com/Kludex).
  * 🔧 Add new GitHub templates with forms for new issues. PR [#3612](https://github.com/tiangolo/fastapi/pull/3612) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Add official FastAPI Twitter to docs: [@fastapi](https://x.com/fastapi). PR [#3578](https://github.com/tiangolo/fastapi/pull/3578) by [@tiangolo](https://github.com/tiangolo).

## 0.67.0¶

### Features¶

  * ✨ Add support for `dataclasses` in request bodies and `response_model`. New documentation: [Advanced User Guide - Using Dataclasses](https://fastapi.tiangolo.com/advanced/dataclasses/). PR [#3577](https://github.com/tiangolo/fastapi/pull/3577) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Support `dataclasses` in responses. PR [#3576](https://github.com/tiangolo/fastapi/pull/3576) by [@tiangolo](https://github.com/tiangolo), continuation from initial PR [#2722](https://github.com/tiangolo/fastapi/pull/2722) by [@amitlissack](https://github.com/amitlissack).

### Docs¶

  * 📝 Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR [#2839](https://github.com/tiangolo/fastapi/pull/2839) by [@aitoehigie](https://github.com/aitoehigie).
  * ✏ Fix code highlighted line in: `body-nested-models.md`. PR [#3463](https://github.com/tiangolo/fastapi/pull/3463) by [@jaystone776](https://github.com/jaystone776).
  * ✏ Fix typo in `body-nested-models.md`. PR [#3462](https://github.com/tiangolo/fastapi/pull/3462) by [@jaystone776](https://github.com/jaystone776).
  * ✏ Fix typo "might me" -> "might be" in `docs/en/docs/tutorial/schema-extra-example.md`. PR [#3362](https://github.com/tiangolo/fastapi/pull/3362) by [@dbrakman](https://github.com/dbrakman).
  * 📝 Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR [#3271](https://github.com/tiangolo/fastapi/pull/3271) by [@ShahriyarR](https://github.com/ShahriyarR).
  * 📝 Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR [#2974](https://github.com/tiangolo/fastapi/pull/2974) by [@rodrigo-arenas](https://github.com/rodrigo-arenas).
  * ✏️ Fix typo on docstring in datastructures file. PR [#2887](https://github.com/tiangolo/fastapi/pull/2887) by [@Kludex](https://github.com/Kludex).
  * 📝 Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR [#3572](https://github.com/tiangolo/fastapi/pull/3572) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Add External Link, replaces #1898. PR [#3571](https://github.com/tiangolo/fastapi/pull/3571) by [@tiangolo](https://github.com/tiangolo).

### Internal¶

  * 🎨 Improve style for sponsors, add radius border. PR [#2388](https://github.com/tiangolo/fastapi/pull/2388) by [@Kludex](https://github.com/Kludex).
  * 👷 Update GitHub Action latest-changes. PR [#3574](https://github.com/tiangolo/fastapi/pull/3574) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub Action latest-changes. PR [#3573](https://github.com/tiangolo/fastapi/pull/3573) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Rename and clarify CI workflow job names. PR [#3570](https://github.com/tiangolo/fastapi/pull/3570) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Update GitHub Action latest-changes, strike 2 ⚾. PR [#3575](https://github.com/tiangolo/fastapi/pull/3575) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Sort external links in docs to have the most recent at the top. PR [#3568](https://github.com/tiangolo/fastapi/pull/3568) by [@tiangolo](https://github.com/tiangolo).

## 0.66.1¶

### Translations¶

  * 🌐 Add basic setup for German translations. PR [#3522](https://github.com/tiangolo/fastapi/pull/3522) by [@0x4Dark](https://github.com/0x4Dark).
  * 🌐 Add Portuguese translation for `docs/tutorial/security/index.md`. PR [#3507](https://github.com/tiangolo/fastapi/pull/3507) by [@oandersonmagalhaes](https://github.com/oandersonmagalhaes).
  * 🌐 Add Portuguese translation for `docs/deployment/index.md`. PR [#3337](https://github.com/tiangolo/fastapi/pull/3337) by [@lsglucas](https://github.com/lsglucas).

### Internal¶

  * 🔧 Configure strict pytest options and update/refactor tests. Upgrade pytest to `>=6.2.4,=2.12.0,=3.3.0,=0.0.12 to fix conflicts. PR [#3429](https://github.com/tiangolo/fastapi/pull/3429) by [@tiangolo](https://github.com/tiangolo).

## 0.65.2¶

### Security fixes¶

  * 🔒 Check Content-Type request header before assuming JSON. Initial PR [#2118](https://github.com/tiangolo/fastapi/pull/2118) by [@patrickkwang](https://github.com/patrickkwang).

This change fixes a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.

In versions lower than `0.65.2`, FastAPI would try to read the request payload as JSON even if the `content-type` header sent was not set to `application/json` or a compatible JSON media type (e.g. `application/geo+json`).

So, a request with a content type of `text/plain` containing JSON data would be accepted and the JSON data would be extracted.

But requests with content type `text/plain` are exempt from [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) preflights, for being considered [Simple requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests). So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application.

See [CVE-2021-32677](https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7) for more details.

Thanks to [Dima Boger](https://x.com/b0g3r) for the security report! 🙇🔒

### Internal¶

  * 🔧 Update sponsors badge, course bundle. PR [#3340](https://github.com/tiangolo/fastapi/pull/3340) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add new gold sponsor Jina 🎉. PR [#3291](https://github.com/tiangolo/fastapi/pull/3291) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add new banner sponsor badge for FastAPI courses bundle. PR [#3288](https://github.com/tiangolo/fastapi/pull/3288) by [@tiangolo](https://github.com/tiangolo).
  * 👷 Upgrade Issue Manager GitHub Action. PR [#3236](https://github.com/tiangolo/fastapi/pull/3236) by [@tiangolo](https://github.com/tiangolo).

## 0.65.1¶

### Security fixes¶

  * 📌 Upgrade pydantic pin, to handle security vulnerability [CVE-2021-29510](https://github.com/pydantic/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh). PR [#3213](https://github.com/tiangolo/fastapi/pull/3213) by [@tiangolo](https://github.com/tiangolo).

## 0.65.0¶

### Breaking Changes - Upgrade¶

  * ⬆️ Upgrade Starlette to `0.14.2`, including internal `UJSONResponse` migrated from Starlette. This includes several bug fixes and features from Starlette. PR [#2335](https://github.com/tiangolo/fastapi/pull/2335) by [@hanneskuettner](https://github.com/hanneskuettner).

### Translations¶

  * 🌐 Initialize new language Polish for translations. PR [#3170](https://github.com/tiangolo/fastapi/pull/3170) by [@neternefer](https://github.com/neternefer).

### Internal¶

  * 👷 Add GitHub Action cache to speed up CI installs. PR [#3204](https://github.com/tiangolo/fastapi/pull/3204) by [@tiangolo](https://github.com/tiangolo).
  * ⬆️ Upgrade setup-python GitHub Action to v2. PR [#3203](https://github.com/tiangolo/fastapi/pull/3203) by [@tiangolo](https://github.com/tiangolo).
  * 🐛 Fix docs script to generate a new translation language with `overrides` boilerplate. PR [#3202](https://github.com/tiangolo/fastapi/pull/3202) by [@tiangolo](https://github.com/tiangolo).
  * ✨ Add new Deta banner badge with new sponsorship tier 🙇. PR [#3194](https://github.com/tiangolo/fastapi/pull/3194) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#3189](https://github.com/tiangolo/fastapi/pull/3189) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 🔊 Update FastAPI People to allow better debugging. PR [#3188](https://github.com/tiangolo/fastapi/pull/3188) by [@tiangolo](https://github.com/tiangolo).

## 0.64.0¶

### Features¶

  * ✨ Add support for adding multiple `examples` in request bodies and path, query, cookie, and header params. New docs: [Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#body-with-multiple-examples). Initial PR [#1267](https://github.com/tiangolo/fastapi/pull/1267) by [@austinorr](https://github.com/austinorr).

### Fixes¶

  * 📌 Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR [#3001](https://github.com/tiangolo/fastapi/pull/3001) by [@tiangolo](https://github.com/tiangolo).
  * 🎨 Add newly required type annotations for mypy. PR [#2882](https://github.com/tiangolo/fastapi/pull/2882) by [@tiangolo](https://github.com/tiangolo).
  * 🎨 Remove internal "type: ignore", now unnecessary. PR [#2424](https://github.com/tiangolo/fastapi/pull/2424) by [@AsakuraMizu](https://github.com/AsakuraMizu).

### Docs¶

  * 📝 Add link to article in Russian "FastAPI: знакомимся с фреймворком". PR [#2564](https://github.com/tiangolo/fastapi/pull/2564) by [@trkohler](https://github.com/trkohler).
  * 📝 Add external link to blog post "Authenticate Your FastAPI App with Auth0". PR [#2172](https://github.com/tiangolo/fastapi/pull/2172) by [@dompatmore](https://github.com/dompatmore).
  * 📝 Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR [#2557](https://github.com/tiangolo/fastapi/pull/2557) by [@davidefiocco](https://github.com/davidefiocco).
  * 📝 Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR [#2515](https://github.com/tiangolo/fastapi/pull/2515) by [@vjanz](https://github.com/vjanz).
  * ✏ Fix typo in Tutorial - Handling Errors. PR [#2486](https://github.com/tiangolo/fastapi/pull/2486) by [@johnthagen](https://github.com/johnthagen).
  * ✏ Fix typo in Security OAuth2 scopes. PR [#2407](https://github.com/tiangolo/fastapi/pull/2407) by [@jugmac00](https://github.com/jugmac00).
  * ✏ Fix typo/clarify docs for SQL (Relational) Databases. PR [#2393](https://github.com/tiangolo/fastapi/pull/2393) by [@kangni](https://github.com/kangni).
  * 📝 Add external link to "FastAPI for Flask Users". PR [#2280](https://github.com/tiangolo/fastapi/pull/2280) by [@amitness](https://github.com/amitness).

### Translations¶

  * 🌐 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR [#3051](https://github.com/tiangolo/fastapi/pull/3051) by [@louis70109](https://github.com/louis70109).
  * 🌐 Add French translation for Tutorial - Background Tasks. PR [#3098](https://github.com/tiangolo/fastapi/pull/3098) by [@Smlep](https://github.com/Smlep).
  * 🌐 Fix Korean translation for docs/ko/docs/index.md. PR [#3159](https://github.com/tiangolo/fastapi/pull/3159) by [@SueNaEunYang](https://github.com/SueNaEunYang).
  * 🌐 Add Korean translation for Tutorial - Query Parameters. PR [#2390](https://github.com/tiangolo/fastapi/pull/2390) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add French translation for FastAPI People. PR [#2232](https://github.com/tiangolo/fastapi/pull/2232) by [@JulianMaurin](https://github.com/JulianMaurin).
  * 🌐 Add Korean translation for Tutorial - Path Parameters. PR [#2355](https://github.com/tiangolo/fastapi/pull/2355) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add French translation for Features. PR [#2157](https://github.com/tiangolo/fastapi/pull/2157) by [@Jefidev](https://github.com/Jefidev).
  * 👥 Update FastAPI People. PR [#3031](https://github.com/tiangolo/fastapi/pull/3031) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 🌐 Add Chinese translation for Tutorial - Debugging. PR [#2737](https://github.com/tiangolo/fastapi/pull/2737) by [@blt232018](https://github.com/blt232018).
  * 🌐 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR [#2642](https://github.com/tiangolo/fastapi/pull/2642) by [@waynerv](https://github.com/waynerv).
  * 🌐 Add Korean translation for Tutorial - Header Parameters. PR [#2589](https://github.com/tiangolo/fastapi/pull/2589) by [@mode9](https://github.com/mode9).
  * 🌐 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR [#2559](https://github.com/tiangolo/fastapi/pull/2559) by [@blt232018](https://github.com/blt232018).
  * 🌐 Add Korean translation for Tutorial - First Steps. PR [#2323](https://github.com/tiangolo/fastapi/pull/2323) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR [#2540](https://github.com/tiangolo/fastapi/pull/2540) by [@blt232018](https://github.com/blt232018).
  * 🌐 Add Chinese translation for Tutorial - Middleware. PR [#2334](https://github.com/tiangolo/fastapi/pull/2334) by [@lpdswing](https://github.com/lpdswing).
  * 🌐 Add Korean translation for Tutorial - Intro. PR [#2317](https://github.com/tiangolo/fastapi/pull/2317) by [@hard-coders](https://github.com/hard-coders).
  * 🌐 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR [#2453](https://github.com/tiangolo/fastapi/pull/2453) by [@waynerv](https://github.com/waynerv).
  * 🌐 Add Chinese translation for Tutorial - Security - Security Intro. PR [#2443](https://github.com/tiangolo/fastapi/pull/2443) by [@waynerv](https://github.com/waynerv).
  * 🌐 Add Chinese translation for Tutorial - Header Parameters. PR [#2412](https://github.com/tiangolo/fastapi/pull/2412) by [@maoyibo](https://github.com/maoyibo).
  * 🌐 Add Chinese translation for Tutorial - Extra Data Types. PR [#2410](https://github.com/tiangolo/fastapi/pull/2410) by [@maoyibo](https://github.com/maoyibo).
  * 🌐 Add Japanese translation for Deployment - Docker. PR [#2312](https://github.com/tiangolo/fastapi/pull/2312) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Deployment - Versions. PR [#2310](https://github.com/tiangolo/fastapi/pull/2310) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Chinese translation for Tutorial - Cookie Parameters. PR [#2261](https://github.com/tiangolo/fastapi/pull/2261) by [@alicrazy1947](https://github.com/alicrazy1947).
  * 🌐 Add Japanese translation for Tutorial - Static files. PR [#2260](https://github.com/tiangolo/fastapi/pull/2260) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Tutorial - Testing. PR [#2259](https://github.com/tiangolo/fastapi/pull/2259) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Tutorial - Debugging. PR [#2256](https://github.com/tiangolo/fastapi/pull/2256) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Tutorial - Middleware. PR [#2255](https://github.com/tiangolo/fastapi/pull/2255) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Concurrency and async / await. PR [#2058](https://github.com/tiangolo/fastapi/pull/2058) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR [#2514](https://github.com/tiangolo/fastapi/pull/2514) by [@waynerv](https://github.com/waynerv).
  * 🌐 Add Japanese translation for Deployment - Deta. PR [#2314](https://github.com/tiangolo/fastapi/pull/2314) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Chinese translation for Tutorial - Security - Get Current User. PR [#2474](https://github.com/tiangolo/fastapi/pull/2474) by [@waynerv](https://github.com/waynerv).
  * 🌐 Add Japanese translation for Deployment - Manually. PR [#2313](https://github.com/tiangolo/fastapi/pull/2313) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Deployment - Intro. PR [#2309](https://github.com/tiangolo/fastapi/pull/2309) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for FastAPI People. PR [#2254](https://github.com/tiangolo/fastapi/pull/2254) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR [#2124](https://github.com/tiangolo/fastapi/pull/2124) by [@Attsun1031](https://github.com/Attsun1031).
  * 🌐 Add Japanese translation for External Links. PR [#2070](https://github.com/tiangolo/fastapi/pull/2070) by [@tokusumi](https://github.com/tokusumi).
  * 🌐 Add Japanese translation for Tutorial - Body - Updates. PR [#1956](https://github.com/tiangolo/fastapi/pull/1956) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for Tutorial - Form Data. PR [#1943](https://github.com/tiangolo/fastapi/pull/1943) by [@SwftAlpc](https://github.com/SwftAlpc).
  * 🌐 Add Japanese translation for Tutorial - Cookie Parameters. PR [#1933](https://github.com/tiangolo/fastapi/pull/1933) by [@SwftAlpc](https://github.com/SwftAlpc).

### Internal¶

  * 🔧 Update top banner, point to newsletter. PR [#3003](https://github.com/tiangolo/fastapi/pull/3003) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Disable sponsor WeTransfer. PR [#3002](https://github.com/tiangolo/fastapi/pull/3002) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#2880](https://github.com/tiangolo/fastapi/pull/2880) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 👥 Update FastAPI People. PR [#2739](https://github.com/tiangolo/fastapi/pull/2739) by [@github-actions[bot]](https://github.com/apps/github-actions).
  * 🔧 Add new Gold Sponsor Talk Python 🎉. PR [#2673](https://github.com/tiangolo/fastapi/pull/2673) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add new Gold Sponsor vim.so 🎉. PR [#2669](https://github.com/tiangolo/fastapi/pull/2669) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add FastAPI user survey banner. PR [#2623](https://github.com/tiangolo/fastapi/pull/2623) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Add new Bronze Sponsor(s) 🥉🎉. PR [#2622](https://github.com/tiangolo/fastapi/pull/2622) by [@tiangolo](https://github.com/tiangolo).
  * 📝 Update social links: add Discord, fix GitHub. PR [#2621](https://github.com/tiangolo/fastapi/pull/2621) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update FastAPI People GitHub Sponsors order. PR [#2620](https://github.com/tiangolo/fastapi/pull/2620) by [@tiangolo](https://github.com/tiangolo).
  * 🔧 Update InvestSuite sponsor data. PR [#2608](https://github.com/tiangolo/fastapi/pull/2608) by [@tiangolo](https://github.com/tiangolo).
  * 👥 Update FastAPI People. PR [#2590](https://github.com/tiangolo/fastapi/pull/2590) by [@github-actions[bot]](https://github.com/apps/github-actions).

## 0.63.0¶

### Features¶

  * ✨ Improve type annotations, add support for mypy --strict, internally and for external packages. PR [#2547](https://github.com/tiangolo/fastapi/pull/2547) by [@tiangolo](https://github.com/tiangolo).

### Breaking changes¶

  * ⬆️ Upgrade Uvicorn when installing `fastapi[all]` to the latest version including `uvloop`, the new range is `uvicorn[standard] >=0.12.0, `1.0.0`.
    * Remove support for deprecated Pydantic `0.32.2`. This improves maintainability and allows new features.
    * In `FastAPI` and `APIRouter`:
      * Remove _path operation decorators_ related/deprecated parameter `response_model_skip_defaults` (use `response_model_exclude_unset` instead).
      * Change _path operation decorators_ parameter default for `response_model_exclude` from `set()` to `None` (as is in Pydantic).
    * In `encoders.jsonable_encoder`:
      * Remove deprecated `skip_defaults`, use instead `exclude_unset`.
      * Set default of `exclude` from `set()` to `None` (as is in Pydantic).
    * PR [#1862](https://github.com/tiangolo/fastapi/pull/1862).
  * In `encoders.jsonable_encoder` remove parameter `sqlalchemy_safe`.
    * It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's `orm_mode` as described in the tutorial: [SQL (Relational) Databases](https://fastapi.tiangolo.com/tutorial/sql-databases/).
    * PR [#1864](https://github.com/tiangolo/fastapi/pull/1864).

### Docs¶

  * Add link to the course by TestDriven.io: [Test-Driven Development with FastAPI and Docker](https://testdriven.io/courses/tdd-fastapi/). PR [#1860](https://github.com/tiangolo/fastapi/pull/1860).
  * Fix empty log message in docs example about handling errors. PR [#1815](https://github.com/tiangolo/fastapi/pull/1815) by [@manlix](https://github.com/manlix).
  * Reword text to reduce ambiguity while not being gender-specific. PR [#1824](https://github.com/tiangolo/fastapi/pull/1824) by [@Mause](https://github.com/Mause).

### Internal¶

  * Add Flake8 linting. Original PR [#1774](https://github.com/tiangolo/fastapi/pull/1774) by [@MashhadiNima](https://github.com/MashhadiNima).
  * Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR [#1853](https://github.com/tiangolo/fastapi/pull/1853).

## 0.60.2¶

  * Fix typo in docs for query parameters. PR [#1832](https://github.com/tiangolo/fastapi/pull/1832) by [@ycd](https://github.com/ycd).
  * Add docs about [Async Tests](https://fastapi.tiangolo.com/advanced/async-tests/). PR [#1619](https://github.com/tiangolo/fastapi/pull/1619) by [@empicano](https://github.com/empicano).
  * Raise an exception when using form data (`Form`, `File`) without having `python-multipart` installed.
    * Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.
    * It also detects if the correct package `python-multipart` is installed instead of the incorrect `multipart` (both importable as `multipart`).
    * PR [#1851](https://github.com/tiangolo/fastapi/pull/1851) based on original PR [#1627](https://github.com/tiangolo/fastapi/pull/1627) by [@chrisngyn](https://github.com/chrisngyn), [@YKo20010](https://github.com/YKo20010), [@kx-chen](https://github.com/kx-chen).
  * Re-enable Gitter releases bot. PR [#1831](https://github.com/tiangolo/fastapi/pull/1831).
  * Add link to async SQL databases tutorial from main SQL tutorial. PR [#1813](https://github.com/tiangolo/fastapi/pull/1813) by [@short2strings](https://github.com/short2strings).
  * Fix typo in tutorial about behind a proxy. PR [#1807](https://github.com/tiangolo/fastapi/pull/1807) by [@toidi](https://github.com/toidi).
  * Fix typo in Portuguese docs. PR [#1795](https://github.com/tiangolo/fastapi/pull/1795) by [@izaguerreiro](https://github.com/izaguerreiro).
  * Add translations setup for Ukrainian. PR [#1830](https://github.com/tiangolo/fastapi/pull/1830).
  * Add external link [Build And Host Fast Data Science Applications Using FastAPI](https://towardsdatascience.com/build-and-host-fast-data-science-applications-using-fastapi-823be8a1d6a0). PR [#1786](https://github.com/tiangolo/fastapi/pull/1786) by [@Kludex](https://github.com/Kludex).
  * Fix encoding of Pydantic models that inherit from others models with custom `json_encoders`. PR [#1769](https://github.com/tiangolo/fastapi/pull/1769) by [@henrybetts](https://github.com/henrybetts).
  * Simplify and improve `jsonable_encoder`. PR [#1754](https://github.com/tiangolo/fastapi/pull/1754) by [@MashhadiNima](https://github.com/MashhadiNima).
  * Simplify internal code syntax in several points. PR [#1753](https://github.com/tiangolo/fastapi/pull/1753) by [@uriyyo](https://github.com/uriyyo).
  * Improve internal typing, declare `Optional` parameters. PR [#1731](https://github.com/tiangolo/fastapi/pull/1731) by [@MashhadiNima](https://github.com/MashhadiNima).
  * Add external link [Deploy FastAPI on Azure App Service](https://www.tutlinks.com/deploy-fastapi-on-azure/) to docs. PR [#1726](https://github.com/tiangolo/fastapi/pull/1726) by [@windson](https://github.com/windson).
  * Add link to Starlette docs about WebSocket testing. PR [#1717](https://github.com/tiangolo/fastapi/pull/1717) by [@hellocoldworld](https://github.com/hellocoldworld).
  * Refactor generating dependant, merge for loops. PR [#1714](https://github.com/tiangolo/fastapi/pull/1714) by [@Bloodielie](https://github.com/Bloodielie).
  * Update example for templates with Jinja to include HTML media type. PR [#1690](https://github.com/tiangolo/fastapi/pull/1690) by [@frafra](https://github.com/frafra).
  * Fix typos in docs for security. PR [#1678](https://github.com/tiangolo/fastapi/pull/1678) by [@nilslindemann](https://github.com/nilslindemann).
  * Fix typos in docs for dependencies. PR [#1675](https://github.com/tiangolo/fastapi/pull/1675) by [@nilslindemann](https://github.com/nilslindemann).
  * Fix type annotation for `**extra` parameters in `FastAPI`. PR [#1659](https://github.com/tiangolo/fastapi/pull/1659) by [@bharel](https://github.com/bharel).
  * Bump MkDocs Material to fix docs in browsers with dark mode. PR [#1789](https://github.com/tiangolo/fastapi/pull/1789) by [@adriencaccia](https://github.com/adriencaccia).
  * Remove docs preview comment from each commit. PR [#1826](https://github.com/tiangolo/fastapi/pull/1826).
  * Update GitHub context extraction for Gitter notification bot. PR [#1766](https://github.com/tiangolo/fastapi/pull/1766).

## 0.60.1¶

  * Add debugging logs for GitHub actions to introspect GitHub hidden context. PR [#1764](https://github.com/tiangolo/fastapi/pull/1764).
  * Use OS preference theme for online docs. PR [#1760](https://github.com/tiangolo/fastapi/pull/1760) by [@adriencaccia](https://github.com/adriencaccia).
  * Upgrade Starlette to version `0.13.6` to handle a vulnerability when using static files in Windows. PR [#1759](https://github.com/tiangolo/fastapi/pull/1759) by [@jamesag26](https://github.com/jamesag26).
  * Pin Swagger UI temporarily, waiting for a fix for [swagger-api/swagger-ui#6249](https://github.com/swagger-api/swagger-ui/issues/6249). PR [#1763](https://github.com/tiangolo/fastapi/pull/1763).
  * Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR [#1761](https://github.com/tiangolo/fastapi/pull/1761).
  * Update GitHub Actions, refactor Gitter bot. PR [#1746](https://github.com/tiangolo/fastapi/pull/1746).

## 0.60.0¶

  * Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR [#1740](https://github.com/tiangolo/fastapi/pull/1740).
  * Add custom GitHub Action to get artifact with docs preview. PR [#1739](https://github.com/tiangolo/fastapi/pull/1739).
  * Add new GitHub Actions to preview docs from PRs. PR [#1738](https://github.com/tiangolo/fastapi/pull/1738).
  * Add XML test coverage to support GitHub Actions. PR [#1737](https://github.com/tiangolo/fastapi/pull/1737).
  * Update badges and remove Travis now that GitHub Actions is the main CI. PR [#1736](https://github.com/tiangolo/fastapi/pull/1736).
  * Add GitHub Actions for CI, move from Travis. PR [#1735](https://github.com/tiangolo/fastapi/pull/1735).
  * Add support for adding OpenAPI schema for GET requests with a body. PR [#1626](https://github.com/tiangolo/fastapi/pull/1626) by [@victorphoenix3](https://github.com/victorphoenix3).

## 0.59.0¶

  * Fix typo in docstring for OAuth2 utils. PR [#1621](https://github.com/tiangolo/fastapi/pull/1621) by [@tomarv2](https://github.com/tomarv2).
  * Update JWT docs to use Python-jose instead of PyJWT. Initial PR [#1610](https://github.com/tiangolo/fastapi/pull/1610) by [@asheux](https://github.com/asheux).
  * Fix/re-enable search bar in docs. PR [#1703](https://github.com/tiangolo/fastapi/pull/1703).
  * Auto-generate a "server" in OpenAPI `servers` when there's a `root_path` instead of prefixing all the `paths`:
    * Add a new parameter for `FastAPI` classes: `root_path_in_servers` to disable the auto-generation of `servers`.
    * New docs about `root_path` and `servers` in [Additional Servers](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).
    * Update OAuth2 examples to use a relative URL for `tokenUrl="token"` to make sure those examples keep working as-is even when behind a reverse proxy.
    * Initial PR [#1596](https://github.com/tiangolo/fastapi/pull/1596) by [@rkbeatss](https://github.com/rkbeatss).
  * Fix typo/link in External Links. PR [#1702](https://github.com/tiangolo/fastapi/pull/1702).
  * Update handling of [External Links](https://fastapi.tiangolo.com/external-links/) to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR [#https://github.com/tiangolo/fastapi/pull/1701](https://github.com/tiangolo/fastapi/pull/1701).
  * Add external link [Machine learning model serving in Python using FastAPI and Streamlit](https://davidefiocco.github.io/2020/06/27/streamlit-fastapi-ml-serving.html) to docs. PR [#1669](https://github.com/tiangolo/fastapi/pull/1669) by [@davidefiocco](https://github.com/davidefiocco).
  * Add note in docs on order in Pydantic Unions. PR [#1591](https://github.com/tiangolo/fastapi/pull/1591) by [@kbanc](https://github.com/kbanc).
  * Improve support for tests in editor. PR [#1699](https://github.com/tiangolo/fastapi/pull/1699).
  * Pin dependencies. PR [#1697](https://github.com/tiangolo/fastapi/pull/1697).
  * Update isort to version 5.x.x. PR [#1670](https://github.com/tiangolo/fastapi/pull/1670) by [@asheux](https://github.com/asheux).

## 0.58.1¶

  * Add link in docs to Pydantic data types. PR [#1612](https://github.com/tiangolo/fastapi/pull/1612) by [@tayoogunbiyi](https://github.com/tayoogunbiyi).
  * Fix link in warning logs for `openapi_prefix`. PR [#1611](https://github.com/tiangolo/fastapi/pull/1611) by [@bavaria95](https://github.com/bavaria95).
  * Fix bad link in docs. PR [#1603](https://github.com/tiangolo/fastapi/pull/1603) by [@molto0504](https://github.com/molto0504).
  * Add Vim temporary files to `.gitignore` for contributors using Vim. PR [#1590](https://github.com/tiangolo/fastapi/pull/1590) by [@asheux](https://github.com/asheux).
  * Fix typo in docs for sub-applications. PR [#1578](https://github.com/tiangolo/fastapi/pull/1578) by [@schlpbch](https://github.com/schlpbch).
  * Use `Optional` in all the examples in the docs. Original PR [#1574](https://github.com/tiangolo/fastapi/pull/1574) by [@chrisngyn](https://github.com/chrisngyn), [@kx-chen](https://github.com/kx-chen), [@YKo20010](https://github.com/YKo20010). Updated and merged PR [#1644](https://github.com/tiangolo/fastapi/pull/1644).
  * Update tests and handling of `response_model_by_alias`. PR [#1642](https://github.com/tiangolo/fastapi/pull/1642).
  * Add translation to Chinese for [Body - Fields - 请求体 - 字段](https://fastapi.tiangolo.com/zh/tutorial/body-fields/). PR [#1569](https://github.com/tiangolo/fastapi/pull/1569) by [@waynerv](https://github.com/waynerv).
  * Update Chinese translation of main page. PR [#1564](https://github.com/tiangolo/fastapi/pull/1564) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Body - Multiple Parameters - 请求体 - 多个参数](https://fastapi.tiangolo.com/zh/tutorial/body-multiple-params/). PR [#1532](https://github.com/tiangolo/fastapi/pull/1532) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Path Parameters and Numeric Validations - 路径参数和数值校验](https://fastapi.tiangolo.com/zh/tutorial/path-params-numeric-validations/). PR [#1506](https://github.com/tiangolo/fastapi/pull/1506) by [@waynerv](https://github.com/waynerv).
  * Add GitHub action to auto-label approved PRs (mainly for translations). PR [#1638](https://github.com/tiangolo/fastapi/pull/1638).

## 0.58.0¶

  * Deep merge OpenAPI responses to preserve all the additional metadata. PR [#1577](https://github.com/tiangolo/fastapi/pull/1577).
  * Mention in docs that only main app events are run (not sub-apps). PR [#1554](https://github.com/tiangolo/fastapi/pull/1554) by [@amacfie](https://github.com/amacfie).
  * Fix body validation error response, do not include body variable when it is not embedded. PR [#1553](https://github.com/tiangolo/fastapi/pull/1553) by [@amacfie](https://github.com/amacfie).
  * Fix testing OAuth2 security scopes when using dependency overrides. PR [#1549](https://github.com/tiangolo/fastapi/pull/1549) by [@amacfie](https://github.com/amacfie).
  * Fix Model for JSON Schema keyword `not` as a JSON Schema instead of a list. PR [#1548](https://github.com/tiangolo/fastapi/pull/1548) by [@v-do](https://github.com/v-do).
  * Add support for OpenAPI `servers`. PR [#1547](https://github.com/tiangolo/fastapi/pull/1547) by [@mikaello](https://github.com/mikaello).

## 0.57.0¶

  * Remove broken link from "External Links". PR [#1565](https://github.com/tiangolo/fastapi/pull/1565) by [@victorphoenix3](https://github.com/victorphoenix3).
  * Update/fix docs for [WebSockets with dependencies](https://fastapi.tiangolo.com/advanced/websockets/#using-depends-and-others). Original PR [#1540](https://github.com/tiangolo/fastapi/pull/1540) by [@ChihSeanHsu](https://github.com/ChihSeanHsu).
  * Add support for Python's `http.HTTPStatus` in `status_code` parameters. PR [#1534](https://github.com/tiangolo/fastapi/pull/1534) by [@retnikt](https://github.com/retnikt).
  * When using Pydantic models with `__root__`, use the internal value in `jsonable_encoder`. PR [#1524](https://github.com/tiangolo/fastapi/pull/1524) by [@patrickkwang](https://github.com/patrickkwang).
  * Update docs for path parameters. PR [#1521](https://github.com/tiangolo/fastapi/pull/1521) by [@yankeexe](https://github.com/yankeexe).
  * Update docs for first steps, links and rewording. PR [#1518](https://github.com/tiangolo/fastapi/pull/1518) by [@yankeexe](https://github.com/yankeexe).
  * Enable `showCommonExtensions` in Swagger UI to show additional validations like `maxLength`, etc. PR [#1466](https://github.com/tiangolo/fastapi/pull/1466) by [@TiewKH](https://github.com/TiewKH).
  * Make `OAuth2PasswordRequestFormStrict` importable directly from `fastapi.security`. PR [#1462](https://github.com/tiangolo/fastapi/pull/1462) by [@RichardHoekstra](https://github.com/RichardHoekstra).
  * Add docs about [Default response class](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class). PR [#1455](https://github.com/tiangolo/fastapi/pull/1455) by [@TezRomacH](https://github.com/TezRomacH).
  * Add note in docs about additional parameters `response_model_exclude_defaults` and `response_model_exclude_none` in [Response Model](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter). PR [#1427](https://github.com/tiangolo/fastapi/pull/1427) by [@wshayes](https://github.com/wshayes).
  * Add note about [PyCharm Pydantic plugin](https://github.com/koxudaxi/pydantic-pycharm-plugin) to docs. PR [#1420](https://github.com/tiangolo/fastapi/pull/1420) by [@koxudaxi](https://github.com/koxudaxi).
  * Update and clarify testing function name. PR [#1395](https://github.com/tiangolo/fastapi/pull/1395) by [@chenl](https://github.com/chenl).
  * Fix duplicated headers created by indirect dependencies that use the request directly. PR [#1386](https://github.com/tiangolo/fastapi/pull/1386) by [@obataku](https://github.com/obataku) from tests by [@scottsmith2gmail](https://github.com/scottsmith2gmail).
  * Upgrade Starlette version to `0.13.4`. PR [#1361](https://github.com/tiangolo/fastapi/pull/1361) by [@rushton](https://github.com/rushton).
  * Improve error handling and feedback for requests with invalid JSON. PR [#1354](https://github.com/tiangolo/fastapi/pull/1354) by [@aviramha](https://github.com/aviramha).
  * Add support for declaring metadata for tags in OpenAPI. New docs at [Tutorial - Metadata and Docs URLs - Metadata for tags](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-tags). PR [#1348](https://github.com/tiangolo/fastapi/pull/1348) by [@thomas-maschler](https://github.com/thomas-maschler).
  * Add basic setup for Russian translations. PR [#1566](https://github.com/tiangolo/fastapi/pull/1566).
  * Remove obsolete Chinese articles after adding official community translations. PR [#1510](https://github.com/tiangolo/fastapi/pull/1510) by [@waynerv](https://github.com/waynerv).
  * Add `__repr__` for _path operation function_ parameter helpers (like `Query`, `Depends`, etc) to simplify debugging. PR [#1560](https://github.com/tiangolo/fastapi/pull/1560) by [@rkbeatss](https://github.com/rkbeatss) and [@victorphoenix3](https://github.com/victorphoenix3).

## 0.56.1¶

  * Add link to advanced docs from tutorial. PR [#1512](https://github.com/tiangolo/fastapi/pull/1512) by [@kx-chen](https://github.com/kx-chen).
  * Remove internal unnecessary f-strings. PR [#1526](https://github.com/tiangolo/fastapi/pull/1526) by [@kotamatsuoka](https://github.com/kotamatsuoka).
  * Add translation to Chinese for [Query Parameters and String Validations - 查询参数和字符串校验](https://fastapi.tiangolo.com/zh/tutorial/query-params-str-validations/). PR [#1500](https://github.com/tiangolo/fastapi/pull/1500) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Request Body - 请求体](https://fastapi.tiangolo.com/zh/tutorial/body/). PR [#1492](https://github.com/tiangolo/fastapi/pull/1492) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Help FastAPI - Get Help - 帮助 FastAPI - 获取帮助](https://fastapi.tiangolo.com/zh/help-fastapi/). PR [#1465](https://github.com/tiangolo/fastapi/pull/1465) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Query Parameters - 查询参数](https://fastapi.tiangolo.com/zh/tutorial/query-params/). PR [#1454](https://github.com/tiangolo/fastapi/pull/1454) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Contributing - 开发 - 贡献](https://fastapi.tiangolo.com/zh/contributing/). PR [#1460](https://github.com/tiangolo/fastapi/pull/1460) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Path Parameters - 路径参数](https://fastapi.tiangolo.com/zh/tutorial/path-params/). PR [#1453](https://github.com/tiangolo/fastapi/pull/1453) by [@waynerv](https://github.com/waynerv).
  * Add official Microsoft project generator for [serving spaCy with FastAPI and Azure Cognitive Skills](https://github.com/microsoft/cookiecutter-spacy-fastapi) to [Project Generators](https://fastapi.tiangolo.com/project-generation/). PR [#1390](https://github.com/tiangolo/fastapi/pull/1390) by [@kabirkhan](https://github.com/kabirkhan).
  * Update docs in [Python Types Intro](https://fastapi.tiangolo.com/python-types/) to include info about `Optional`. Original PR [#1377](https://github.com/tiangolo/fastapi/pull/1377) by [@yaegassy](https://github.com/yaegassy).
  * Fix support for callable class dependencies with `yield`. PR [#1365](https://github.com/tiangolo/fastapi/pull/1365) by [@mrosales](https://github.com/mrosales).
  * Fix/remove incorrect error logging when a client sends invalid payloads. PR [#1351](https://github.com/tiangolo/fastapi/pull/1351) by [@dbanty](https://github.com/dbanty).
  * Add translation to Chinese for [First Steps - 第一步](https://fastapi.tiangolo.com/zh/tutorial/first-steps/). PR [#1323](https://github.com/tiangolo/fastapi/pull/1323) by [@waynerv](https://github.com/waynerv).
  * Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR [#1322](https://github.com/tiangolo/fastapi/pull/1322) by [@nsidnev](https://github.com/nsidnev).
  * Optimize internal regex performance in `get_path_param_names()`. PR [#1243](https://github.com/tiangolo/fastapi/pull/1243) by [@heckad](https://github.com/heckad).
  * Remove `*,` from functions in docs where it's not needed. PR [#1239](https://github.com/tiangolo/fastapi/pull/1239) by [@pankaj-giri](https://github.com/pankaj-giri).
  * Start translations for Italian. PR [#1557](https://github.com/tiangolo/fastapi/pull/1557) by [@csr](https://github.com/csr).

## 0.56.0¶

  * Add support for ASGI `root_path`:
    * Use `root_path` internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.
    * Add new `root_path` parameter for `FastAPI` applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter `--root-path`).
    * Deprecate `openapi_prefix` parameter in favor of the new `root_path` parameter.
    * Add new/updated docs for [Sub Applications - Mounts](https://fastapi.tiangolo.com/advanced/sub-applications/), without `openapi_prefix` (as it is now handled automatically).
    * Add new/updated docs for [Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/), including how to setup a local testing proxy with Traefik and using `root_path`.
    * Update docs for [Extending OpenAPI](https://fastapi.tiangolo.com/advanced/extending-openapi/) with the new `openapi_prefix` parameter passed (internally generated from `root_path`).
    * Original PR [#1199](https://github.com/tiangolo/fastapi/pull/1199) by [@iksteen](https://github.com/iksteen).
  * Update new issue templates and docs: [Help FastAPI - Get Help](https://fastapi.tiangolo.com/help-fastapi/). PR [#1531](https://github.com/tiangolo/fastapi/pull/1531).
  * Update GitHub action issue-manager. PR [#1520](https://github.com/tiangolo/fastapi/pull/1520).
  * Add new links:
    * **English articles** :
      * [Real-time Notifications with Python and Postgres](https://wuilly.com/2019/10/real-time-notifications-with-python-and-postgres/) by [Guillermo Cruz](https://wuilly.com/).
      * [Microservice in Python using FastAPI](https://dev.to/paurakhsharma/microservice-in-python-using-fastapi-24cc) by [Paurakh Sharma Humagain](https://x.com/PaurakhSharma).
      * [Build simple API service with Python FastAPI — Part 1](https://dev.to/cuongld2/build-simple-api-service-with-python-fastapi-part-1-581o) by [cuongld2](https://dev.to/cuongld2).
      * [FastAPI + Zeit.co = 🚀](https://paulsec.github.io/posts/fastapi_plus_zeit_serverless_fu/) by [Paul Sec](https://x.com/PaulWebSec).
      * [Build a web API from scratch with FastAPI - the workshop](https://dev.to/tiangolo/build-a-web-api-from-scratch-with-fastapi-the-workshop-2ehe) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).
      * [Build a Secure Twilio Webhook with Python and FastAPI](https://www.twilio.com/blog/build-secure-twilio-webhook-python-fastapi) by [Twilio](https://www.twilio.com).
      * [Using FastAPI with Django](https://www.stavros.io/posts/fastapi-with-django/) by [Stavros Korokithakis](https://x.com/Stavros).
      * [Introducing Dispatch](https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072) by [Netflix](https://netflixtechblog.com/).
    * **Podcasts** :
      * [Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebastían Ramírez (tiangolo)](https://www.pythonpodcast.com/fastapi-web-application-framework-episode-259/) by [Podcast.`__init__`](https://www.pythonpodcast.com/).
    * **Talks** :
      * [PyConBY 2020: Serve ML models easily with FastAPI](https://www.youtube.com/watch?v=z9K5pwb0rt8) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).
      * [[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI](https://www.youtube.com/watch?v=PnpTY1f4k2U) by [Sebastián Ramírez (tiangolo)](https://x.com/tiangolo).
    * PR [#1467](https://github.com/tiangolo/fastapi/pull/1467).
  * Add translation to Chinese for [Python Types Intro - Python 类型提示简介](https://fastapi.tiangolo.com/zh/python-types/). PR [#1197](https://github.com/tiangolo/fastapi/pull/1197) by [@waynerv](https://github.com/waynerv).

## 0.55.1¶

  * Fix handling of enums with their own schema in path parameters. To support [pydantic/pydantic#1432](https://github.com/pydantic/pydantic/pull/1432) in FastAPI. PR [#1463](https://github.com/tiangolo/fastapi/pull/1463).

## 0.55.0¶

  * Allow enums to allow them to have their own schemas in OpenAPI. To support [pydantic/pydantic#1432](https://github.com/pydantic/pydantic/pull/1432) in FastAPI. PR [#1461](https://github.com/tiangolo/fastapi/pull/1461).
  * Add links for funding through [GitHub sponsors](https://github.com/sponsors/tiangolo). PR [#1425](https://github.com/tiangolo/fastapi/pull/1425).
  * Update issue template for for questions. PR [#1344](https://github.com/tiangolo/fastapi/pull/1344) by [@retnikt](https://github.com/retnikt).
  * Update warning about storing passwords in docs. PR [#1336](https://github.com/tiangolo/fastapi/pull/1336) by [@skorokithakis](https://github.com/skorokithakis).
  * Fix typo. PR [#1326](https://github.com/tiangolo/fastapi/pull/1326) by [@chenl](https://github.com/chenl).
  * Add translation to Portuguese for [Alternatives, Inspiration and Comparisons - Alternativas, Inspiração e Comparações](https://fastapi.tiangolo.com/pt/alternatives/). PR [#1325](https://github.com/tiangolo/fastapi/pull/1325) by [@Serrones](https://github.com/Serrones).
  * Fix 2 typos in docs. PR [#1324](https://github.com/tiangolo/fastapi/pull/1324) by [@waynerv](https://github.com/waynerv).
  * Update CORS docs, fix correct default of `max_age=600`. PR [#1301](https://github.com/tiangolo/fastapi/pull/1301) by [@derekbekoe](https://github.com/derekbekoe).
  * Add translation of [main page to Portuguese](https://fastapi.tiangolo.com/pt/). PR [#1300](https://github.com/tiangolo/fastapi/pull/1300) by [@Serrones](https://github.com/Serrones).
  * Re-word and clarify docs for extra info in fields. PR [#1299](https://github.com/tiangolo/fastapi/pull/1299) by [@chris-allnutt](https://github.com/chris-allnutt).
  * Make sure the `*` in short features in the docs is consistent (after `.`) in all languages. PR [#1424](https://github.com/tiangolo/fastapi/pull/1424).
  * Update order of execution for `get_db` in SQLAlchemy tutorial. PR [#1293](https://github.com/tiangolo/fastapi/pull/1293) by [@bcb](https://github.com/bcb).
  * Fix typos in Async docs. PR [#1423](https://github.com/tiangolo/fastapi/pull/1423).

## 0.54.2¶

  * Add translation to Spanish for [Concurrency and async / await - Concurrencia y async / await](https://fastapi.tiangolo.com/es/async/). PR [#1290](https://github.com/tiangolo/fastapi/pull/1290) by [@alvaropernas](https://github.com/alvaropernas).
  * Remove obsolete vote link. PR [#1289](https://github.com/tiangolo/fastapi/pull/1289) by [@donhui](https://github.com/donhui).
  * Allow disabling docs UIs by just disabling OpenAPI with `openapi_url=None`. New example in docs: [Advanced: Conditional OpenAPI](https://fastapi.tiangolo.com/advanced/conditional-openapi/). PR [#1421](https://github.com/tiangolo/fastapi/pull/1421).
  * Add translation to Portuguese for [Benchmarks - Comparações](https://fastapi.tiangolo.com/pt/benchmarks/). PR [#1274](https://github.com/tiangolo/fastapi/pull/1274) by [@Serrones](https://github.com/Serrones).
  * Add translation to Portuguese for [Tutorial - User Guide - Intro - Tutorial - Guia de Usuário - Introdução](https://fastapi.tiangolo.com/pt/tutorial/). PR [#1259](https://github.com/tiangolo/fastapi/pull/1259) by [@marcosmmb](https://github.com/marcosmmb).
  * Allow using Unicode in MkDocs for translations. PR [#1419](https://github.com/tiangolo/fastapi/pull/1419).
  * Add translation to Spanish for [Advanced User Guide - Intro - Guía de Usuario Avanzada - Introducción](https://fastapi.tiangolo.com/es/advanced/). PR [#1250](https://github.com/tiangolo/fastapi/pull/1250) by [@jfunez](https://github.com/jfunez).
  * Add translation to Portuguese for [History, Design and Future - História, Design e Futuro](https://fastapi.tiangolo.com/pt/history-design-future/). PR [#1249](https://github.com/tiangolo/fastapi/pull/1249) by [@marcosmmb](https://github.com/marcosmmb).
  * Add translation to Portuguese for [Features - Recursos](https://fastapi.tiangolo.com/pt/features/). PR [#1248](https://github.com/tiangolo/fastapi/pull/1248) by [@marcosmmb](https://github.com/marcosmmb).
  * Add translation to Spanish for [Tutorial - User Guide - Intro - Tutorial - Guía de Usuario - Introducción](https://fastapi.tiangolo.com/es/tutorial/). PR [#1244](https://github.com/tiangolo/fastapi/pull/1244) by [@MartinEliasQ](https://github.com/MartinEliasQ).
  * Add translation to Chinese for [Deployment - 部署](https://fastapi.tiangolo.com/zh/deployment/). PR [#1203](https://github.com/tiangolo/fastapi/pull/1203) by [@RunningIkkyu](https://github.com/RunningIkkyu).
  * Add translation to Chinese for [Tutorial - User Guide - Intro - 教程 - 用户指南 - 简介](https://fastapi.tiangolo.com/zh/tutorial/). PR [#1202](https://github.com/tiangolo/fastapi/pull/1202) by [@waynerv](https://github.com/waynerv).
  * Add translation to Chinese for [Features - 特性](https://fastapi.tiangolo.com/zh/features/). PR [#1192](https://github.com/tiangolo/fastapi/pull/1192) by [@Dustyposa](https://github.com/Dustyposa).
  * Add translation for [main page to Chinese](https://fastapi.tiangolo.com/zh/) PR [#1191](https://github.com/tiangolo/fastapi/pull/1191) by [@waynerv](https://github.com/waynerv).
  * Update docs for project generation. PR [#1287](https://github.com/tiangolo/fastapi/pull/1287).
  * Add Spanish translation for [Introducción a los Tipos de Python (Python Types Intro)](https://fastapi.tiangolo.com/es/python-types/). PR [#1237](https://github.com/tiangolo/fastapi/pull/1237) by [@mariacamilagl](https://github.com/mariacamilagl).
  * Add Spanish translation for [Características (Features)](https://fastapi.tiangolo.com/es/features/). PR [#1220](https://github.com/tiangolo/fastapi/pull/1220) by [@mariacamilagl](https://github.com/mariacamilagl).

## 0.54.1¶

  * Update database test setup. PR [#1226](https://github.com/tiangolo/fastapi/pull/1226).
  * Improve test debugging by showing response text in failing tests. PR [#1222](https://github.com/tiangolo/fastapi/pull/1222) by [@samuelcolvin](https://github.com/samuelcolvin).

## 0.54.0¶

  * Fix grammatical mistakes in async docs. PR [#1188](https://github.com/tiangolo/fastapi/pull/1188) by [@mickeypash](https://github.com/mickeypash).
  * Add support for `response_model_exclude_defaults` and `response_model_exclude_none`:
    * Deprecate the parameter `include_none` in `jsonable_encoder` and add the inverted `exclude_none`, to keep in sync with Pydantic.
    * PR [#1166](https://github.com/tiangolo/fastapi/pull/1166) by [@voegtlel](https://github.com/voegtlel).
  * Add example about [Testing a Database](https://fastapi.tiangolo.com/advanced/testing-database/). Initial PR [#1144](https://github.com/tiangolo/fastapi/pull/1144) by [@duganchen](https://github.com/duganchen).
  * Update docs for [Development - Contributing: Translations](https://fastapi.tiangolo.com/contributing/#translations) including note about reviewing translation PRs. [#1215](https://github.com/tiangolo/fastapi/pull/1215).
  * Update log style in README.md for GitHub Markdown compatibility. PR [#1200](https://github.com/tiangolo/fastapi/pull/1200) by [#geekgao](https://github.com/geekgao).
  * Add Python venv `env` to `.gitignore`. PR [#1212](https://github.com/tiangolo/fastapi/pull/1212) by [@cassiobotaro](https://github.com/cassiobotaro).
  * Start Portuguese translations. PR [#1210](https://github.com/tiangolo/fastapi/pull/1210) by [@cassiobotaro](https://github.com/cassiobotaro).
  * Update docs for Pydantic's `Settings` using a dependency with `@lru_cache()`. PR [#1214](https://github.com/tiangolo/fastapi/pull/1214).
  * Add first translation to Spanish [FastAPI](https://fastapi.tiangolo.com/es/). PR [#1201](https://github.com/tiangolo/fastapi/pull/1201) by [@mariacamilagl](https://github.com/mariacamilagl).
  * Add docs about [Settings and Environment Variables](https://fastapi.tiangolo.com/advanced/settings/). Initial PR [1118](https://github.com/tiangolo/fastapi/pull/1118) by [@alexmitelman](https://github.com/alexmitelman).

## 0.53.2¶

  * Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR [#1079](https://github.com/tiangolo/fastapi/pull/1079) by [@Toad2186](https://github.com/Toad2186).
  * Fix dependency overrides in WebSocket testing. PR [#1122](https://github.com/tiangolo/fastapi/pull/1122) by [@amitlissack](https://github.com/amitlissack).
  * Fix docs script to ensure languages are always sorted. PR [#1189](https://github.com/tiangolo/fastapi/pull/1189).
  * Start translations for Chinese. PR [#1187](https://github.com/tiangolo/fastapi/pull/1187) by [@RunningIkkyu](https://github.com/RunningIkkyu).
  * Add docs for [Schema Extra - Example](https://fastapi.tiangolo.com/tutorial/schema-extra-example/). PR [#1185](https://github.com/tiangolo/fastapi/pull/1185).

## 0.53.1¶

  * Fix included example after translations refactor. PR [#1182](https://github.com/tiangolo/fastapi/pull/1182).
  * Add docs example for `example` in `Field`. Docs at [Body - Fields: JSON Schema extras](https://fastapi.tiangolo.com/tutorial/body-fields/#json-schema-extras). PR [#1106](https://github.com/tiangolo/fastapi/pull/1106) by [@JohnPaton](https://github.com/JohnPaton).
  * Fix using recursive models in `response_model`. PR [#1164](https://github.com/tiangolo/fastapi/pull/1164) by [@voegtlel](https://github.com/voegtlel).
  * Add docs for [Pycharm Debugging](https://fastapi.tiangolo.com/tutorial/debugging/). PR [#1096](https://github.com/tiangolo/fastapi/pull/1096) by [@youngquan](https://github.com/youngquan).
  * Fix typo in docs. PR [#1148](https://github.com/tiangolo/fastapi/pull/1148) by [@PLNech](https://github.com/PLNech).
  * Update Windows development environment instructions. PR [#1179](https://github.com/tiangolo/fastapi/pull/1179).

## 0.53.0¶

  * Update test coverage badge. PR [#1175](https://github.com/tiangolo/fastapi/pull/1175).
  * Add `orjson` to `pip install fastapi[all]`. PR [#1161](https://github.com/tiangolo/fastapi/pull/1161) by [@michael0liver](https://github.com/michael0liver).
  * Fix included example for `GZipMiddleware`. PR [#1138](https://github.com/tiangolo/fastapi/pull/1138) by [@arimbr](https://github.com/arimbr).
  * Fix class name in docstring for `OAuth2PasswordRequestFormStrict`. PR [#1126](https://github.com/tiangolo/fastapi/pull/1126) by [@adg-mh](https://github.com/adg-mh).
  * Clarify function name in example in docs. PR [#1121](https://github.com/tiangolo/fastapi/pull/1121) by [@tmsick](https://github.com/tmsick).
  * Add external link [Apache Kafka producer and consumer with FastAPI and aiokafka](https://iwpnd.pw/articles/2020-03/apache-kafka-fastapi-geostream) to docs. PR [#1112](https://github.com/tiangolo/fastapi/pull/1112) by [@iwpnd](https://github.com/iwpnd).
  * Fix serialization when using `by_alias` or `exclude_unset` and returning data with Pydantic models. PR [#1074](https://github.com/tiangolo/fastapi/pull/1074) by [@juhovh-aiven](https://github.com/juhovh-aiven).
  * Add Gitter chat to docs. PR [#1061](https://github.com/tiangolo/fastapi/pull/1061) by [@aakashnand](https://github.com/aakashnand).
  * Update and simplify translations docs. PR [#1171](https://github.com/tiangolo/fastapi/pull/1171).
  * Update development of FastAPI docs, set address to `127.0.0.1` to improve Windows support. PR [#1169](https://github.com/tiangolo/fastapi/pull/1169) by [@mariacamilagl](https://github.com/mariacamilagl).
  * Add support for docs translations. New docs: [Development - Contributing: Docs: Translations](https://fastapi.tiangolo.com/contributing/#translations). PR [#1168](https://github.com/tiangolo/fastapi/pull/1168).
  * Update terminal styles in docs and add note about [**Typer** , the FastAPI of CLIs](https://typer.tiangolo.com/). PR [#1139](https://github.com/tiangolo/fastapi/pull/1139).

## 0.52.0¶

  * Add new high-performance JSON response class using `orjson`. New docs: [Custom Response - HTML, Stream, File, others: `ORJSONResponse`](https://fastapi.tiangolo.com/advanced/custom-response/#use-orjsonresponse). PR [#1065](https://github.com/tiangolo/fastapi/pull/1065).

## 0.51.0¶

  * Re-export utils from Starlette:
    * This allows using things like `from fastapi.responses import JSONResponse` instead of `from starlette.responses import JSONResponse`.
    * It's mainly syntax sugar, a convenience for developer experience.
    * Now `Request`, `Response`, `WebSocket`, `status` can be imported directly from `fastapi` as in `from fastapi import Response`. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.
    * Documentation changes in many places, but new docs and noticeable improvements:
      * [Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).
      * [Advanced Middleware](https://fastapi.tiangolo.com/advanced/middleware/).
      * [Including WSGI - Flask, Django, others](https://fastapi.tiangolo.com/advanced/wsgi/).
    * PR [#1064](https://github.com/tiangolo/fastapi/pull/1064).

## 0.50.0¶

  * Add link to Release Notes from docs about pinning versions for deployment. PR [#1058](https://github.com/tiangolo/fastapi/pull/1058).
  * Upgrade code to use the latest version of Starlette, including:
    * Several bug fixes.
    * Optional redirects of slashes, with or without ending in `/`.
    * Events for routers, `"startup"`, and `"shutdown"`.
    * PR [#1057](https://github.com/tiangolo/fastapi/pull/1057).
  * Add docs about pinning FastAPI versions for deployment: [Deployment: FastAPI versions](https://fastapi.tiangolo.com/deployment/#fastapi-versions). PR [#1056](https://github.com/tiangolo/fastapi/pull/1056).

## 0.49.2¶

  * Fix links in release notes. PR [#1052](https://github.com/tiangolo/fastapi/pull/1052) by [@sattosan](https://github.com/sattosan).
  * Fix typo in release notes. PR [#1051](https://github.com/tiangolo/fastapi/pull/1051) by [@sattosan](https://github.com/sattosan).
  * Refactor/clarify `serialize_response` parameter name to avoid confusion. PR [#1031](https://github.com/tiangolo/fastapi/pull/1031) by [@patrickmckenna](https://github.com/patrickmckenna).
  * Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR [#1027](https://github.com/tiangolo/fastapi/pull/1027) by [@sm-Fifteen](https://github.com/sm-Fifteen).
  * Add missing dependencies for testing. PR [#1026](https://github.com/tiangolo/fastapi/pull/1026) by [@sm-Fifteen](https://github.com/sm-Fifteen).
  * Fix accepting valid types for response models, including Python types like `List[int]`. PR [#1017](https://github.com/tiangolo/fastapi/pull/1017) by [@patrickmckenna](https://github.com/patrickmckenna).
  * Fix format in SQL tutorial. PR [#1015](https://github.com/tiangolo/fastapi/pull/1015) by [@vegarsti](https://github.com/vegarsti).

## 0.49.1¶

  * Fix path operation duplicated parameters when used in dependencies and the path operation function. PR [#994](https://github.com/tiangolo/fastapi/pull/994) by [@merowinger92](https://github.com/merowinger92).
  * Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR [#1047](https://github.com/tiangolo/fastapi/pull/1047).
  * Move mypy configurations to config file. PR [#987](https://github.com/tiangolo/fastapi/pull/987) by [@hukkinj1](https://github.com/hukkinj1).
  * Temporary fix to Netlify previews not deployable from PRs from forks. PR [#1046](https://github.com/tiangolo/fastapi/pull/1046) by [@mariacamilagl](https://github.com/mariacamilagl).

## 0.49.0¶

  * Fix encoding of `pathlib` paths in `jsonable_encoder`. PR [#978](https://github.com/tiangolo/fastapi/pull/978) by [@patrickmckenna](https://github.com/patrickmckenna).
  * Add articles to [External Links](https://fastapi.tiangolo.com/external-links/): [PythonのWeb frameworkのパフォーマンス比較 (Django, Flask, responder, FastAPI, japronto)](https://qiita.com/bee2/items/0ad260ab9835a2087dae) and [[FastAPI] Python製のASGI Web フレームワーク FastAPIに入門する](https://qiita.com/bee2/items/75d9c0d7ba20e7a4a0e9). PR [#974](https://github.com/tiangolo/fastapi/pull/974) by [@tokusumi](https://github.com/tokusumi).
  * Fix broken links in docs. PR [#949](https://github.com/tiangolo/fastapi/pull/949) by [@tsotnikov](https://github.com/tsotnikov).
  * Fix small typos. PR [#941](https://github.com/tiangolo/fastapi/pull/941) by [@NikitaKolesov](https://github.com/NikitaKolesov).
  * Update and clarify docs for dependencies with `yield`. PR [#986](https://github.com/tiangolo/fastapi/pull/986).
  * Add Mermaid JS support for diagrams in docs. Add first diagrams to [Dependencies: First Steps](https://fastapi.tiangolo.com/tutorial/dependencies/) and [Dependencies with `yield` and `HTTPException`](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-httpexception). PR [#985](https://github.com/tiangolo/fastapi/pull/985).
  * Update CI to run docs deployment in GitHub actions. PR [#983](https://github.com/tiangolo/fastapi/pull/983).
  * Allow `callable`s in _path operation functions_ , like functions modified with `functools.partial`. PR [#977](https://github.com/tiangolo/fastapi/pull/977).

## 0.48.0¶

  * Run linters first in tests to error out faster. PR [#948](https://github.com/tiangolo/fastapi/pull/948).
  * Log warning about `email-validator` only when used. PR [#946](https://github.com/tiangolo/fastapi/pull/946).
  * Simplify [Peewee docs](https://fastapi.tiangolo.com/advanced/sql-databases-peewee/) with double dependency with `yield`. PR [#947](https://github.com/tiangolo/fastapi/pull/947).
  * Add article [External Links](https://fastapi.tiangolo.com/external-links/): [Create and Deploy FastAPI app to Heroku](https://www.tutlinks.com/create-and-deploy-fastapi-app-to-heroku/). PR [#942](https://github.com/tiangolo/fastapi/pull/942) by [@windson](https://github.com/windson).
  * Update description of Sanic, as it is now ASGI too. PR [#932](https://github.com/tiangolo/fastapi/pull/932) by [@raphaelauv](https://github.com/raphaelauv).
  * Fix typo in main page. PR [#920](https://github.com/tiangolo/fastapi/pull/920) by [@mMarzeta](https://github.com/mMarzeta).
  * Fix parsing of possibly invalid bodies. PR [#918](https://github.com/tiangolo/fastapi/pull/918) by [@dmontagu](https://github.com/dmontagu).
  * Fix typo [#916](https://github.com/tiangolo/fastapi/pull/916) by [@adursun](https://github.com/adursun).
  * Allow `Any` type for enums in OpenAPI. PR [#906](https://github.com/tiangolo/fastapi/pull/906) by [@songzhi](https://github.com/songzhi).
  * Add article to [External Links](https://fastapi.tiangolo.com/external-links/): [How to continuously deploy a FastAPI to AWS Lambda with AWS SAM](https://iwpnd.pw/articles/2020-01/deploy-fastapi-to-aws-lambda). PR [#901](https://github.com/tiangolo/fastapi/pull/901) by [@iwpnd](https://github.com/iwpnd).
  * Add note about using Body parameters without Pydantic. PR [#900](https://github.com/tiangolo/fastapi/pull/900) by [@pawamoy](https://github.com/pawamoy).
  * Fix Pydantic field clone logic. PR [#899](https://github.com/tiangolo/fastapi/pull/899) by [@deuce2367](https://github.com/deuce2367).
  * Fix link in middleware docs. PR [#893](https://github.com/tiangolo/fastapi/pull/893) by [@linchiwei123](https://github.com/linchiwei123).
  * Rename default API title from "Fast API" to "FastAPI" for consistency. PR [#890](https://github.com/tiangolo/fastapi/pull/890).

## 0.47.1¶

  * Fix model filtering in `response_model`, cloning sub-models. PR [#889](https://github.com/tiangolo/fastapi/pull/889).
  * Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR [#888](https://github.com/tiangolo/fastapi/pull/888).

## 0.47.0¶

  * Refactor documentation to make a simpler and shorter [Tutorial - User Guide](https://fastapi.tiangolo.com/tutorial/) and an additional [Advanced User Guide](https://fastapi.tiangolo.com/advanced/) with all the additional docs. PR [#887](https://github.com/tiangolo/fastapi/pull/887).
  * Tweak external links, Markdown format, typos. PR [#881](https://github.com/tiangolo/fastapi/pull/881).
  * Fix bug in tutorial handling HTTP Basic Auth `username` and `password`. PR [#865](https://github.com/tiangolo/fastapi/pull/865) by [@isaevpd](https://github.com/isaevpd).
  * Fix handling form _path operation_ parameters declared with pure classes like `list`, `tuple`, etc. PR [#856](https://github.com/tiangolo/fastapi/pull/856) by [@nsidnev](https://github.com/nsidnev).
  * Add request `body` to `RequestValidationError`, new docs: [Use the `RequestValidationError` body](https://fastapi.tiangolo.com/tutorial/handling-errors/#use-the-requestvalidationerror-body). Initial PR [#853](https://github.com/tiangolo/fastapi/pull/853) by [@aviramha](https://github.com/aviramha).
  * Update [External Links](https://fastapi.tiangolo.com/external-links/) with new links and dynamic GitHub projects with `fastapi` topic. PR [#850](https://github.com/tiangolo/fastapi/pull/850).
  * Fix Peewee `contextvars` handling in docs: [SQL (Relational) Databases with Peewee](https://fastapi.tiangolo.com/advanced/sql-databases-peewee/). PR [#879](https://github.com/tiangolo/fastapi/pull/879).
  * Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: [Development - Contributing](https://fastapi.tiangolo.com/contributing/). PR [#877](https://github.com/tiangolo/fastapi/pull/877).
  * Update docs for [HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/) to improve security against timing attacks. Initial PR [#807](https://github.com/tiangolo/fastapi/pull/807) by [@zwass](https://github.com/zwass).

## 0.46.0¶

  * Fix typos and tweak configs. PR [#837](https://github.com/tiangolo/fastapi/pull/837).
  * Add link to Chinese article in [External Links](https://fastapi.tiangolo.com/external-links/). PR [810](https://github.com/tiangolo/fastapi/pull/810) by [@wxq0309](https://github.com/wxq0309).
  * Implement `OAuth2AuthorizationCodeBearer` class. PR [#797](https://github.com/tiangolo/fastapi/pull/797) by [@kuwv](https://github.com/kuwv).
  * Update example upgrade in docs main page. PR [#795](https://github.com/tiangolo/fastapi/pull/795) by [@cdeil](https://github.com/cdeil).
  * Fix callback handling for sub-routers. PR [#792](https://github.com/tiangolo/fastapi/pull/792) by [@jekirl](https://github.com/jekirl).
  * Fix typos. PR [#784](https://github.com/tiangolo/fastapi/pull/784) by [@kkinder](https://github.com/kkinder).
  * Add 4 Japanese articles to [External Links](https://fastapi.tiangolo.com/external-links/). PR [#783](https://github.com/tiangolo/fastapi/pull/783) by [@HymanZHAN](https://github.com/HymanZHAN).
  * Add support for subtypes of main types in `jsonable_encoder`, e.g. asyncpg's UUIDs. PR [#756](https://github.com/tiangolo/fastapi/pull/756) by [@RmStorm](https://github.com/RmStorm).
  * Fix usage of Pydantic's `HttpUrl` in docs. PR [#832](https://github.com/tiangolo/fastapi/pull/832) by [@Dustyposa](https://github.com/Dustyposa).
  * Fix Twitter links in docs. PR [#813](https://github.com/tiangolo/fastapi/pull/813) by [@justindujardin](https://github.com/justindujardin).
  * Add docs for correctly [using FastAPI with Peewee ORM](https://fastapi.tiangolo.com/advanced/sql-databases-peewee/). Including how to overwrite parts of Peewee to correctly handle async threads. PR [#789](https://github.com/tiangolo/fastapi/pull/789).

## 0.45.0¶

  * Add support for OpenAPI Callbacks:
    * New docs: [OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).
    * Refactor generation of `operationId`s to be valid Python names (also valid variables in most languages).
    * Add `default_response_class` parameter to `APIRouter`.
    * Original PR [#722](https://github.com/tiangolo/fastapi/pull/722) by [@booooh](https://github.com/booooh).
  * Refactor logging to use the same logger everywhere, update log strings and levels. PR [#781](https://github.com/tiangolo/fastapi/pull/781).
  * Add article to [External Links](https://fastapi.tiangolo.com/external-links/): [Почему Вы должны попробовать FastAPI?](https://habr.com/ru/post/478620/). PR [#766](https://github.com/tiangolo/fastapi/pull/766) by [@prostomarkeloff](https://github.com/prostomarkeloff).
  * Remove gender bias in docs for handling errors. PR [#780](https://github.com/tiangolo/fastapi/pull/780). Original idea in PR [#761](https://github.com/tiangolo/fastapi/pull/761) by [@classywhetten](https://github.com/classywhetten).
  * Rename docs and references to `body-schema` to `body-fields` to keep in line with Pydantic. PR [#746](https://github.com/tiangolo/fastapi/pull/746) by [@prostomarkeloff](https://github.com/prostomarkeloff).

## 0.44.1¶

  * Add GitHub social preview images to git. PR [#752](https://github.com/tiangolo/fastapi/pull/752).
  * Update PyPI "trove classifiers". PR [#751](https://github.com/tiangolo/fastapi/pull/751).
  * Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR [749](https://github.com/tiangolo/fastapi/pull/749).
  * Update "new issue" templates. PR [#749](https://github.com/tiangolo/fastapi/pull/749).
  * Fix serialization of errors for exotic Pydantic types. PR [#748](https://github.com/tiangolo/fastapi/pull/748) by [@dmontagu](https://github.com/dmontagu).

## 0.44.0¶

  * Add GitHub action [Issue Manager](https://github.com/tiangolo/issue-manager). PR [#742](https://github.com/tiangolo/fastapi/pull/742).
  * Fix typos in docs. PR [734](https://github.com/tiangolo/fastapi/pull/734) by [@bundabrg](https://github.com/bundabrg).
  * Fix usage of `custom_encoder` in `jsonable_encoder`. PR [#715](https://github.com/tiangolo/fastapi/pull/715) by [@matrixise](https://github.com/matrixise).
  * Fix invalid XML example. PR [710](https://github.com/tiangolo/fastapi/pull/710) by [@OcasoProtal](https://github.com/OcasoProtal).
  * Fix typos and update wording in deployment docs. PR [#700](https://github.com/tiangolo/fastapi/pull/700) by [@marier-nico](https://github.com/tiangolo/fastapi/pull/700).
  * Add note about dependencies in `APIRouter` docs. PR [#698](https://github.com/tiangolo/fastapi/pull/698) by [@marier-nico](https://github.com/marier-nico).
  * Add support for async class methods as dependencies [#681](https://github.com/tiangolo/fastapi/pull/681) by [@frankie567](https://github.com/frankie567).
  * Add FastAPI with Swagger UI cheatsheet to external links. PR [#671](https://github.com/tiangolo/fastapi/pull/671) by [@euri10](https://github.com/euri10).
  * Fix typo in HTTP protocol in CORS example. PR [#647](https://github.com/tiangolo/fastapi/pull/647) by [@forestmonster](https://github.com/forestmonster).
  * Add support for Pydantic versions `1.0.0` and above, with temporary (deprecated) backwards compatibility for Pydantic `0.32.2`. PR [#646](https://github.com/tiangolo/fastapi/pull/646) by [@dmontagu](https://github.com/dmontagu).

## 0.43.0¶

  * Update docs to reduce gender bias. PR [#645](https://github.com/tiangolo/fastapi/pull/645) by [@ticosax](https://github.com/ticosax).
  * Add docs about [overriding the `operationId` for all the _path operations_](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#using-the-path-operation-function-name-as-the-operationid) based on their function name. PR [#642](https://github.com/tiangolo/fastapi/pull/642) by [@SKalt](https://github.com/SKalt).
  * Fix validators in models generating an incorrect key order. PR [#637](https://github.com/tiangolo/fastapi/pull/637) by [@jaddison](https://github.com/jaddison).
  * Generate correct OpenAPI docs for responses with no content. PR [#621](https://github.com/tiangolo/fastapi/pull/621) by [@brotskydotcom](https://github.com/brotskydotcom).
  * Remove `$` from Bash code blocks in docs for consistency. PR [#613](https://github.com/tiangolo/fastapi/pull/613) by [@nstapelbroek](https://github.com/nstapelbroek).
  * Add docs for [self-serving docs' (Swagger UI) static assets](https://fastapi.tiangolo.com/advanced/extending-openapi/#self-hosting-javascript-and-css-for-docs), e.g. to use the docs offline, or without Internet. Initial PR [#557](https://github.com/tiangolo/fastapi/pull/557) by [@svalouch](https://github.com/svalouch).
  * Fix `black` linting after upgrade. PR [#682](https://github.com/tiangolo/fastapi/pull/682) by [@frankie567](https://github.com/frankie567).

## 0.42.0¶

  * Add dependencies with `yield`, a.k.a. exit steps, context managers, cleanup, teardown, ...
    * This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.
    * Dependencies with `yield` can be normal or `async`, **FastAPI** will run normal dependencies in a threadpool.
    * They can be combined with normal dependencies.
    * It's possible to have arbitrary trees/levels of dependencies with `yield` and exit steps are handled in the correct order automatically.
    * It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:
      * `async-exit-stack`
      * `async-generator`
    * New docs at [Dependencies with `yield`](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/).
    * Updated database docs [SQL (Relational) Databases: Main **FastAPI** app](https://fastapi.tiangolo.com/tutorial/sql-databases/#main-fastapi-app).
    * PR [#595](https://github.com/tiangolo/fastapi/pull/595).
  * Fix `sitemap.xml` in website. PR [#598](https://github.com/tiangolo/fastapi/pull/598) by [@samuelcolvin](https://github.com/samuelcolvin).

## 0.41.0¶

  * Upgrade required Starlette to `0.12.9`, the new range is `>=0.12.9,=0.11.1,=0.28, . PR [#117](https://github.com/tiangolo/fastapi/pull/117).

  * Add docs about [Extending OpenAPI](https://fastapi.tiangolo.com/advanced/extending-openapi/). PR [#126](https://github.com/tiangolo/fastapi/pull/126).

  * Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR [#92](https://github.com/tiangolo/fastapi/pull/92) by [@blueyed](https://github.com/blueyed).

  * Fix duplicated param variable creation. PR [#123](https://github.com/tiangolo/fastapi/pull/123) by [@yihuang](https://github.com/yihuang).

  * Add note in [Response Model docs](https://fastapi.tiangolo.com/tutorial/response-model/) about why using a function parameter instead of a function return type annotation. PR [#109](https://github.com/tiangolo/fastapi/pull/109) by [@JHSaunders](https://github.com/JHSaunders).

  * Fix event docs (startup/shutdown) function name. PR [#105](https://github.com/tiangolo/fastapi/pull/105) by [@stratosgear](https://github.com/stratosgear).

## 0.10.2¶

  * Fix OpenAPI (JSON Schema) for declarations of Python `Union` (JSON Schema `additionalProperties`). PR [#121](https://github.com/tiangolo/fastapi/pull/121).

  * Update [Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/) with a note on Celery.

  * Document response models using unions and lists, updated at: [Extra Models](https://fastapi.tiangolo.com/tutorial/extra-models/). PR [#108](https://github.com/tiangolo/fastapi/pull/108).

## 0.10.1¶

  * Add docs and tests for [encode/databases](https://github.com/encode/databases). New docs at: [Async SQL (Relational) Databases](https://fastapi.tiangolo.com/advanced/async-sql-databases/). PR [#107](https://github.com/tiangolo/fastapi/pull/107).

## 0.10.0¶

  * Add support for Background Tasks in _path operation functions_ and dependencies. New documentation about [Background Tasks is here](https://fastapi.tiangolo.com/tutorial/background-tasks/). PR [#103](https://github.com/tiangolo/fastapi/pull/103).

  * Add support for `.websocket_route()` in `APIRouter`. PR [#100](https://github.com/tiangolo/fastapi/pull/100) by [@euri10](https://github.com/euri10).

  * New docs section about [Events: startup - shutdown](https://fastapi.tiangolo.com/advanced/events/). PR [#99](https://github.com/tiangolo/fastapi/pull/99).

## 0.9.1¶

  * Document receiving [Multiple values with the same query parameter](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#query-parameter-list-multiple-values) and [Duplicate headers](https://fastapi.tiangolo.com/tutorial/header-params/#duplicate-headers). PR [#95](https://github.com/tiangolo/fastapi/pull/95).

## 0.9.0¶

  * Upgrade compatible Pydantic version to `0.21.0`. PR [#90](https://github.com/tiangolo/fastapi/pull/90).

  * Add documentation for: [Application Configuration](https://fastapi.tiangolo.com/tutorial/application-configuration/).

  * Fix typo in docs. PR [#76](https://github.com/tiangolo/fastapi/pull/76) by [@matthewhegarty](https://github.com/matthewhegarty).

  * Fix link in "Deployment" to "Bigger Applications".

## 0.8.0¶

  * Make development scripts executable. PR [#76](https://github.com/tiangolo/fastapi/pull/76) by [@euri10](https://github.com/euri10).

  * Add support for adding `tags` in `app.include_router()`. PR [#55](https://github.com/tiangolo/fastapi/pull/55) by [@euri10](https://github.com/euri10). Documentation updated in the section: [Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).

  * Update docs related to Uvicorn to use new `--reload` option from version `0.5.x`. PR [#74](https://github.com/tiangolo/fastapi/pull/74).

  * Update `isort` imports and scripts to be compatible with newer versions. PR [#75](https://github.com/tiangolo/fastapi/pull/75).

## 0.7.1¶

  * Update [technical details about `async def` handling](https://fastapi.tiangolo.com/async/#path-operation-functions) with respect to previous frameworks. PR [#64](https://github.com/tiangolo/fastapi/pull/64) by [@haizaar](https://github.com/haizaar).

  * Add [deployment documentation for Docker in Raspberry Pi](https://fastapi.tiangolo.com/deployment/#raspberry-pi-and-other-architectures) and other architectures.

  * Trigger Docker images build on Travis CI automatically. PR [#65](https://github.com/tiangolo/fastapi/pull/65).

## 0.7.0¶

  * Add support for `UploadFile` in `File` parameter annotations.
    * This includes a file-like interface.
    * Here's the updated documentation for declaring [`File` parameters with `UploadFile`](https://fastapi.tiangolo.com/tutorial/request-files/#file-parameters-with-uploadfile).
    * And here's the updated documentation for using [`Form` parameters mixed with `File` parameters, supporting `bytes` and `UploadFile`](https://fastapi.tiangolo.com/tutorial/request-forms-and-files/) at the same time.
    * PR [#63](https://github.com/tiangolo/fastapi/pull/63).

## 0.6.4¶

  * Add [technical details about `async def` handling to docs](https://fastapi.tiangolo.com/async/#very-technical-details). PR [#61](https://github.com/tiangolo/fastapi/pull/61).

  * Add docs for [Debugging FastAPI applications in editors](https://fastapi.tiangolo.com/tutorial/debugging/).

  * Clarify [Bigger Applications deployed with Docker](https://fastapi.tiangolo.com/deployment/#bigger-applications).

  * Fix typos in docs.

  * Add section about [History, Design and Future](https://fastapi.tiangolo.com/history-design-future/).

  * Add docs for using [WebSockets with **FastAPI**](https://fastapi.tiangolo.com/advanced/websockets/). PR [#62](https://github.com/tiangolo/fastapi/pull/62).

## 0.6.3¶

  * Add Favicons to docs. PR [#53](https://github.com/tiangolo/fastapi/pull/53).

## 0.6.2¶

  * Introduce new project generator based on FastAPI and PostgreSQL: . PR [#52](https://github.com/tiangolo/fastapi/pull/52).

  * Update [SQL tutorial with SQLAlchemy, using `Depends` to improve editor support and reduce code repetition](https://fastapi.tiangolo.com/tutorial/sql-databases/). PR [#52](https://github.com/tiangolo/fastapi/pull/52).

  * Improve middleware naming in tutorial for SQL with SQLAlchemy .

## 0.6.1¶

  * Add docs for GraphQL: . PR [#48](https://github.com/tiangolo/fastapi/pull/48).

## 0.6.0¶

  * Update SQL with SQLAlchemy tutorial at  using the new official `request.state`. PR [#45](https://github.com/tiangolo/fastapi/pull/45).

  * Upgrade Starlette to version `0.11.1` and add required compatibility changes. PR [#44](https://github.com/tiangolo/fastapi/pull/44).

## 0.5.1¶

  * Add section about [helping and getting help with **FastAPI**](https://fastapi.tiangolo.com/help-fastapi/).

  * Add note about [path operations order in docs](https://fastapi.tiangolo.com/tutorial/path-params/#order-matters).

  * Update [section about error handling](https://fastapi.tiangolo.com/tutorial/handling-errors/) with more information and make relation with Starlette error handling utilities more explicit. PR [#41](https://github.com/tiangolo/fastapi/pull/41).

  * Add [Development - Contributing section to the docs](). PR [#42](https://github.com/tiangolo/fastapi/pull/42).

## 0.5.0¶

  * Add new `HTTPException` with support for custom headers. With new documentation for handling errors at: . PR [#35](https://github.com/tiangolo/fastapi/pull/35).

  * Add [documentation to use Starlette `Request` object](https://fastapi.tiangolo.com/advanced/using-request-directly/) directly. Check [#25](https://github.com/tiangolo/fastapi/pull/25) by [@euri10](https://github.com/euri10).

  * Add issue templates to simplify reporting bugs, getting help, etc: [#34](https://github.com/tiangolo/fastapi/pull/34).

  * Update example for the SQLAlchemy tutorial at  using middleware and database session attached to request.

## 0.4.0¶

  * Add `openapi_prefix`, support for reverse proxy and mounting sub-applications. See the docs at : [#26](https://github.com/tiangolo/fastapi/pull/26) by [@kabirkhan](https://github.com/kabirkhan).

  * Update [docs/tutorial for SQLAlchemy](https://fastapi.tiangolo.com/tutorial/sql-databases/) including note about _DB Browser for SQLite_.

## 0.3.0¶

  * Fix/add SQLAlchemy support, including ORM, and update [docs for SQLAlchemy](https://fastapi.tiangolo.com/tutorial/sql-databases/): [#30](https://github.com/tiangolo/fastapi/pull/30).

## 0.2.1¶

  * Fix `jsonable_encoder` for Pydantic models with `Config` but without `json_encoders`: [#29](https://github.com/tiangolo/fastapi/pull/29).

## 0.2.0¶

  * Fix typos in Security section: [#24](https://github.com/tiangolo/fastapi/pull/24) by [@kkinder](https://github.com/kkinder).

  * Add support for Pydantic custom JSON encoders: [#21](https://github.com/tiangolo/fastapi/pull/21) by [@euri10](https://github.com/euri10).

## 0.1.19¶

  * Upgrade Starlette version to the current latest `0.10.1`: [#17](https://github.com/tiangolo/fastapi/pull/17) by [@euri10](https://github.com/euri10).

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.

## About - FastAPI

**URL**: https://fastapi.tiangolo.com/about/
**Depth**: 1

# About¶

About FastAPI, its design, inspiration and more. 🤓

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.

## FastAPI and friends newsletter - FastAPI

**URL**: https://fastapi.tiangolo.com/newsletter/
**Depth**: 1

# FastAPI and friends newsletter¶

Back to top
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[LLM]: Large Language Model
  *[GTD]: Getting Things Done
  *[`lt`]: less than
  *[XWT]: XML Web Token
  *[PSGI]: Parallel Server Gateway Interface
  *[cluster]: A group of machines that are configured to be connected and work together in some way.
  *[Deep Learning]: A method of machine learning that uses artificial neural networks with numerous hidden layers between input and output layers, thereby developing a comprehensive internal structure
  *[MDN]: Mozilla Developer Network: documentation for developers, written by the Firefox people
  *[I/O]: Input/Output: disk reading or writing, network communications.
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications
  *[**TL;DR:**]: too long; didn't read
  *[CPU]: Central Processing Unit
  *[path]: also known as: endpoints, routes
  *[operations]: also known as HTTP methods, as POST, GET, PUT, DELETE
  *[**Dependency Injection**]: also known as "components", "resources", "services", "providers"
  *[test coverage]: The amount of code that is automatically tested
  *[type annotated]: Python type annotations, with this your editor and external tools can give you better support
  *[ORM]: Object-Relational Mapper
  *[ODM]: Object-Document Mapper
  *[IDE]: Integrated Development Environment: similar to a code editor
  *[linter]: A program that checks for code errors
  *[BDFL]: Benevolent Dictator For Life