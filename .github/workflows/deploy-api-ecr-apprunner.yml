name: Deploy API to ECR + App Runner

on:
  push:
    branches: [ "main" ]
    paths:
      - "llm_txt/**"
      - "pyproject.toml"
      - "Dockerfile.api"
      - ".github/workflows/deploy-api-ecr-apprunner.yml"
  workflow_dispatch:

permissions:
  id-token: write   # for OIDC to AWS
  contents: read

env:
  ECR_REPO: ${{ vars.ECR_REPO || 'llm-txt-api' }}
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials (access keys)
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' && secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -f Dockerfile.api -t $IMAGE_URI:latest -t $IMAGE_URI:${{ github.sha }} .

      - name: Push image
        run: |
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:${{ github.sha }}

      - name: Update App Runner service (optional)
        if: ${{ env.APP_RUNNER_SERVICE_ARN != '' }}
        run: |
          IMAGE_URI=${IMAGE_URI}:latest
          aws apprunner update-service \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration "ImageRepository={ImageIdentifier=${IMAGE_URI},ImageRepositoryType=ECR},AutoDeploymentsEnabled=true"
